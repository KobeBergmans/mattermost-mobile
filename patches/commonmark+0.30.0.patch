diff --git a/node_modules/commonmark/dist/commonmark.js b/node_modules/commonmark/dist/commonmark.js
index c1b33d7..29b96e6 100644
--- a/node_modules/commonmark/dist/commonmark.js
+++ b/node_modules/commonmark/dist/commonmark.js
@@ -11,12 +11,23 @@
             case "block_quote":
             case "list":
             case "item":
+            case "table":
+            case "table_row":
+            case "table_cell":
             case "paragraph":
             case "heading":
             case "emph":
             case "strong":
+            case "del":
             case "link":
             case "image":
+            case "at_mention":
+            case "channel_link":
+            case "emoji":
+            case "hashtag":
+            case "latex_inline":
+            case "mention_highlight":
+            case "search_highlight":
             case "custom_inline":
             case "custom_block":
                 return true;
@@ -87,12 +98,23 @@
         this._listData = {};
         this._info = null;
         this._destination = null;
+        this._size = null;
         this._title = null;
         this._isFenced = false;
         this._fenceChar = null;
         this._fenceLength = 0;
         this._fenceOffset = null;
         this._level = null;
+        this._mentionName = null;
+        this._emojiName = null;
+        this._hashtag = null;
+        this._latexCode = null;
+
+        // used by tables
+        this._alignColumns = [];
+        this._isHeading = false;
+        this._align = "";
+
         this._onEnter = null;
         this._onExit = null;
     };
@@ -165,6 +187,15 @@
         }
     });
 
+    Object.defineProperty(proto, "size", {
+        get: function() {
+            return this._size;
+        },
+        set: function(s) {
+            this._size = s;
+        }
+    });
+
     Object.defineProperty(proto, "title", {
         get: function() {
             return this._title;
@@ -228,6 +259,63 @@
         }
     });
 
+    Object.defineProperty(proto, "mentionName", {
+        get: function() {
+            return this._mentionName;
+        },
+    });
+
+    Object.defineProperty(proto, "channelName", {
+        get: function() {
+            return this._channelName;
+        },
+    });
+
+    Object.defineProperty(proto, "emojiName", {
+        get: function() {
+            return this._emojiName;
+        },
+    });
+
+    Object.defineProperty(proto, "hashtag", {
+        get: function() {
+            return this._hashtag;
+        },
+    });
+
+    Object.defineProperty(proto, "latexCode", {
+        get: function() {
+            return this._latexCode;
+        },
+    });
+
+    Object.defineProperty(proto, "alignColumns", {
+        get: function() {
+            return this._alignColumns;
+        },
+        set: function(s) {
+            this._alignColumns = s;
+        }
+    });
+
+    Object.defineProperty(proto, "isHeading", {
+        get: function() {
+            return this._isHeading;
+        },
+        set: function(t) {
+            this._isHeading = t;
+        }
+    });
+
+    Object.defineProperty(proto, "align", {
+        get: function() {
+            return this._align;
+        },
+        set: function(s) {
+            this._align = s;
+        }
+    });
+
     Object.defineProperty(proto, "onEnter", {
         get: function() {
             return this._onEnter;
@@ -7521,7 +7609,12 @@
         }
     };
 
+    var reWWW = /^www\d{0,3}\./i;
     var normalizeURI = function(uri) {
+        if (reWWW.test(uri)) {
+            uri = 'http://' + uri;
+        }
+
         try {
             return encode_1(uri);
         } catch (err) {
@@ -7616,174 +7709,5008 @@
         };
     }
 
-    /*! http://mths.be/repeat v0.2.0 by @mathias */
-    if (!String.prototype.repeat) {
-    	(function() {
-    		var defineProperty = (function() {
-    			// IE 8 only supports `Object.defineProperty` on DOM elements
-    			try {
-    				var object = {};
-    				var $defineProperty = Object.defineProperty;
-    				var result = $defineProperty(object, object, object) && $defineProperty;
-    			} catch(error) {}
-    			return result;
-    		}());
-    		var repeat = function(count) {
-    			if (this == null) {
-    				throw TypeError();
-    			}
-    			var string = String(this);
-    			// `ToInteger`
-    			var n = count ? Number(count) : 0;
-    			if (n != n) { // better `isNaN`
-    				n = 0;
-    			}
-    			// Account for out-of-bounds indices
-    			if (n < 0 || n == Infinity) {
-    				throw RangeError();
-    			}
-    			var result = '';
-    			while (n) {
-    				if (n % 2 == 1) {
-    					result += string;
-    				}
-    				if (n > 1) {
-    					string += string;
-    				}
-    				n >>= 1;
-    			}
-    			return result;
-    		};
-    		if (defineProperty) {
-    			defineProperty(String.prototype, 'repeat', {
-    				'value': repeat,
-    				'configurable': true,
-    				'writable': true
-    			});
-    		} else {
-    			String.prototype.repeat = repeat;
-    		}
-    	}());
-    }
+    var xregexp = createCommonjsModule(function (module, exports) {
 
-    var normalizeURI$1 = normalizeURI;
-    var unescapeString$1 = unescapeString;
+    Object.defineProperty(exports, "__esModule", {
+        value: true
+    });
+    /*!
+     * XRegExp 4.1.1
+     * <xregexp.com>
+     * Steven Levithan (c) 2007-present MIT License
+     */
 
-    // Constants for character codes:
+    /**
+     * XRegExp provides augmented, extensible regular expressions. You get additional regex syntax and
+     * flags, beyond what browsers support natively. XRegExp is also a regex utility belt with tools to
+     * make your client-side grepping simpler and more powerful, while freeing you from related
+     * cross-browser inconsistencies.
+     */
 
-    var C_NEWLINE = 10;
-    var C_ASTERISK = 42;
-    var C_UNDERSCORE = 95;
-    var C_BACKTICK = 96;
-    var C_OPEN_BRACKET = 91;
-    var C_CLOSE_BRACKET = 93;
-    var C_LESSTHAN = 60;
-    var C_BANG = 33;
-    var C_BACKSLASH$1 = 92;
-    var C_AMPERSAND = 38;
-    var C_OPEN_PAREN = 40;
-    var C_CLOSE_PAREN = 41;
-    var C_COLON = 58;
-    var C_SINGLEQUOTE = 39;
-    var C_DOUBLEQUOTE = 34;
+    // ==--------------------------==
+    // Private stuff
+    // ==--------------------------==
 
-    // Some regexps used in inline parser:
+    // Property name used for extended regex instance data
+    var REGEX_DATA = 'xregexp';
+    // Optional features that can be installed and uninstalled
+    var features = {
+        astral: false,
+        namespacing: false
+    };
+    // Native methods to use and restore ('native' is an ES3 reserved keyword)
+    var nativ = {
+        exec: RegExp.prototype.exec,
+        test: RegExp.prototype.test,
+        match: String.prototype.match,
+        replace: String.prototype.replace,
+        split: String.prototype.split
+    };
+    // Storage for fixed/extended native methods
+    var fixed = {};
+    // Storage for regexes cached by `XRegExp.cache`
+    var regexCache = {};
+    // Storage for pattern details cached by the `XRegExp` constructor
+    var patternCache = {};
+    // Storage for regex syntax tokens added internally or by `XRegExp.addToken`
+    var tokens = [];
+    // Token scopes
+    var defaultScope = 'default';
+    var classScope = 'class';
+    // Regexes that match native regex syntax, including octals
+    var nativeTokens = {
+        // Any native multicharacter token in default scope, or any single character
+        'default': /\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,
+        // Any native multicharacter token in character class scope, or any single character
+        'class': /\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/
+    };
+    // Any backreference or dollar-prefixed character in replacement strings
+    var replacementToken = /\$(?:{([\w$]+)}|<([\w$]+)>|(\d\d?|[\s\S]))/g;
+    // Check for correct `exec` handling of nonparticipating capturing groups
+    var correctExecNpcg = nativ.exec.call(/()??/, '')[1] === undefined;
+    // Check for ES6 `flags` prop support
+    var hasFlagsProp = /x/.flags !== undefined;
+    // Shortcut to `Object.prototype.toString`
+    var toString = {}.toString;
+
+    function hasNativeFlag(flag) {
+        // Can't check based on the presence of properties/getters since browsers might support such
+        // properties even when they don't support the corresponding flag in regex construction (tested
+        // in Chrome 48, where `'unicode' in /x/` is true but trying to construct a regex with flag `u`
+        // throws an error)
+        var isSupported = true;
+        try {
+            // Can't use regex literals for testing even in a `try` because regex literals with
+            // unsupported flags cause a compilation error in IE
+            new RegExp('', flag);
+        } catch (exception) {
+            isSupported = false;
+        }
+        return isSupported;
+    }
+    // Check for ES6 `u` flag support
+    var hasNativeU = hasNativeFlag('u');
+    // Check for ES6 `y` flag support
+    var hasNativeY = hasNativeFlag('y');
+    // Tracker for known flags, including addon flags
+    var registeredFlags = {
+        g: true,
+        i: true,
+        m: true,
+        u: hasNativeU,
+        y: hasNativeY
+    };
 
-    var ESCAPABLE$1 = ESCAPABLE;
-    var ESCAPED_CHAR = "\\\\" + ESCAPABLE$1;
+    /**
+     * Attaches extended data and `XRegExp.prototype` properties to a regex object.
+     *
+     * @private
+     * @param {RegExp} regex Regex to augment.
+     * @param {Array} captureNames Array with capture names, or `null`.
+     * @param {String} xSource XRegExp pattern used to generate `regex`, or `null` if N/A.
+     * @param {String} xFlags XRegExp flags used to generate `regex`, or `null` if N/A.
+     * @param {Boolean} [isInternalOnly=false] Whether the regex will be used only for internal
+     *   operations, and never exposed to users. For internal-only regexes, we can improve perf by
+     *   skipping some operations like attaching `XRegExp.prototype` properties.
+     * @returns {RegExp} Augmented regex.
+     */
+    function augment(regex, captureNames, xSource, xFlags, isInternalOnly) {
+        var p = void 0;
 
-    var ENTITY$1 = ENTITY;
-    var reHtmlTag$1 = reHtmlTag;
+        regex[REGEX_DATA] = {
+            captureNames: captureNames
+        };
 
-    var rePunctuation = new RegExp(
-        /^[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/
-    );
+        if (isInternalOnly) {
+            return regex;
+        }
 
-    var reLinkTitle = new RegExp(
-        '^(?:"(' +
-            ESCAPED_CHAR +
-            '|[^"\\x00])*"' +
-            "|" +
-            "'(" +
-            ESCAPED_CHAR +
-            "|[^'\\x00])*'" +
-            "|" +
-            "\\((" +
-            ESCAPED_CHAR +
-            "|[^()\\x00])*\\))"
-    );
+        // Can't auto-inherit these since the XRegExp constructor returns a nonprimitive value
+        if (regex.__proto__) {
+            regex.__proto__ = XRegExp.prototype;
+        } else {
+            for (p in XRegExp.prototype) {
+                // An `XRegExp.prototype.hasOwnProperty(p)` check wouldn't be worth it here, since this
+                // is performance sensitive, and enumerable `Object.prototype` or `RegExp.prototype`
+                // extensions exist on `regex.prototype` anyway
+                regex[p] = XRegExp.prototype[p];
+            }
+        }
 
-    var reLinkDestinationBraces = /^(?:<(?:[^<>\n\\\x00]|\\.)*>)/;
+        regex[REGEX_DATA].source = xSource;
+        // Emulate the ES6 `flags` prop by ensuring flags are in alphabetical order
+        regex[REGEX_DATA].flags = xFlags ? xFlags.split('').sort().join('') : xFlags;
 
-    var reEscapable = new RegExp("^" + ESCAPABLE$1);
+        return regex;
+    }
 
-    var reEntityHere = new RegExp("^" + ENTITY$1, "i");
+    /**
+     * Removes any duplicate characters from the provided string.
+     *
+     * @private
+     * @param {String} str String to remove duplicate characters from.
+     * @returns {String} String with any duplicate characters removed.
+     */
+    function clipDuplicates(str) {
+        return nativ.replace.call(str, /([\s\S])(?=[\s\S]*\1)/g, '');
+    }
 
-    var reTicks = /`+/;
+    /**
+     * Copies a regex object while preserving extended data and augmenting with `XRegExp.prototype`
+     * properties. The copy has a fresh `lastIndex` property (set to zero). Allows adding and removing
+     * flags g and y while copying the regex.
+     *
+     * @private
+     * @param {RegExp} regex Regex to copy.
+     * @param {Object} [options] Options object with optional properties:
+     *   - `addG` {Boolean} Add flag g while copying the regex.
+     *   - `addY` {Boolean} Add flag y while copying the regex.
+     *   - `removeG` {Boolean} Remove flag g while copying the regex.
+     *   - `removeY` {Boolean} Remove flag y while copying the regex.
+     *   - `isInternalOnly` {Boolean} Whether the copied regex will be used only for internal
+     *     operations, and never exposed to users. For internal-only regexes, we can improve perf by
+     *     skipping some operations like attaching `XRegExp.prototype` properties.
+     *   - `source` {String} Overrides `<regex>.source`, for special cases.
+     * @returns {RegExp} Copy of the provided regex, possibly with modified flags.
+     */
+    function copyRegex(regex, options) {
+        if (!XRegExp.isRegExp(regex)) {
+            throw new TypeError('Type RegExp expected');
+        }
 
-    var reTicksHere = /^`+/;
+        var xData = regex[REGEX_DATA] || {};
+        var flags = getNativeFlags(regex);
+        var flagsToAdd = '';
+        var flagsToRemove = '';
+        var xregexpSource = null;
+        var xregexpFlags = null;
 
-    var reEllipses = /\.\.\./g;
+        options = options || {};
 
-    var reDash = /--+/g;
+        if (options.removeG) {
+            flagsToRemove += 'g';
+        }
+        if (options.removeY) {
+            flagsToRemove += 'y';
+        }
+        if (flagsToRemove) {
+            flags = nativ.replace.call(flags, new RegExp('[' + flagsToRemove + ']+', 'g'), '');
+        }
 
-    var reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
+        if (options.addG) {
+            flagsToAdd += 'g';
+        }
+        if (options.addY) {
+            flagsToAdd += 'y';
+        }
+        if (flagsToAdd) {
+            flags = clipDuplicates(flags + flagsToAdd);
+        }
 
-    var reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\x00-\x20]*>/i;
+        if (!options.isInternalOnly) {
+            if (xData.source !== undefined) {
+                xregexpSource = xData.source;
+            }
+            // null or undefined; don't want to add to `flags` if the previous value was null, since
+            // that indicates we're not tracking original precompilation flags
+            if (xData.flags != null) {
+                // Flags are only added for non-internal regexes by `XRegExp.globalize`. Flags are never
+                // removed for non-internal regexes, so don't need to handle it
+                xregexpFlags = flagsToAdd ? clipDuplicates(xData.flags + flagsToAdd) : xData.flags;
+            }
+        }
 
-    var reSpnl = /^ *(?:\n *)?/;
+        // Augment with `XRegExp.prototype` properties, but use the native `RegExp` constructor to avoid
+        // searching for special tokens. That would be wrong for regexes constructed by `RegExp`, and
+        // unnecessary for regexes constructed by `XRegExp` because the regex has already undergone the
+        // translation to native regex syntax
+        regex = augment(new RegExp(options.source || regex.source, flags), hasNamedCapture(regex) ? xData.captureNames.slice(0) : null, xregexpSource, xregexpFlags, options.isInternalOnly);
 
-    var reWhitespaceChar = /^[ \t\n\x0b\x0c\x0d]/;
+        return regex;
+    }
 
-    var reUnicodeWhitespaceChar = /^\s/;
+    /**
+     * Converts hexadecimal to decimal.
+     *
+     * @private
+     * @param {String} hex
+     * @returns {Number}
+     */
+    function dec(hex) {
+        return parseInt(hex, 16);
+    }
 
-    var reFinalSpace = / *$/;
+    /**
+     * Returns a pattern that can be used in a native RegExp in place of an ignorable token such as an
+     * inline comment or whitespace with flag x. This is used directly as a token handler function
+     * passed to `XRegExp.addToken`.
+     *
+     * @private
+     * @param {String} match Match arg of `XRegExp.addToken` handler
+     * @param {String} scope Scope arg of `XRegExp.addToken` handler
+     * @param {String} flags Flags arg of `XRegExp.addToken` handler
+     * @returns {String} Either '' or '(?:)', depending on which is needed in the context of the match.
+     */
+    function getContextualTokenSeparator(match, scope, flags) {
+        if (
+        // No need to separate tokens if at the beginning or end of a group
+        match.input[match.index - 1] === '(' || match.input[match.index + match[0].length] === ')' ||
+
+        // No need to separate tokens if before or after a `|`
+        match.input[match.index - 1] === '|' || match.input[match.index + match[0].length] === '|' ||
+
+        // No need to separate tokens if at the beginning or end of the pattern
+        match.index < 1 || match.index + match[0].length >= match.input.length ||
+
+        // No need to separate tokens if at the beginning of a noncapturing group or lookahead.
+        // The way this is written relies on:
+        // - The search regex matching only 3-char strings.
+        // - Although `substr` gives chars from the end of the string if given a negative index,
+        //   the resulting substring will be too short to match. Ex: `'abcd'.substr(-1, 3) === 'd'`
+        nativ.test.call(/^\(\?[:=!]/, match.input.substr(match.index - 3, 3)) ||
+
+        // Avoid separating tokens when the following token is a quantifier
+        isQuantifierNext(match.input, match.index + match[0].length, flags)) {
+            return '';
+        }
+        // Keep tokens separated. This avoids e.g. inadvertedly changing `\1 1` or `\1(?#)1` to `\11`.
+        // This also ensures all tokens remain as discrete atoms, e.g. it avoids converting the syntax
+        // error `(? :` into `(?:`.
+        return '(?:)';
+    }
 
-    var reInitialSpace = /^ */;
+    /**
+     * Returns native `RegExp` flags used by a regex object.
+     *
+     * @private
+     * @param {RegExp} regex Regex to check.
+     * @returns {String} Native flags in use.
+     */
+    function getNativeFlags(regex) {
+        return hasFlagsProp ? regex.flags :
+        // Explicitly using `RegExp.prototype.toString` (rather than e.g. `String` or concatenation
+        // with an empty string) allows this to continue working predictably when
+        // `XRegExp.proptotype.toString` is overridden
+        nativ.exec.call(/\/([a-z]*)$/i, RegExp.prototype.toString.call(regex))[1];
+    }
 
-    var reSpaceAtEndOfLine = /^ *(?:\n|$)/;
+    /**
+     * Determines whether a regex has extended instance data used to track capture names.
+     *
+     * @private
+     * @param {RegExp} regex Regex to check.
+     * @returns {Boolean} Whether the regex uses named capture.
+     */
+    function hasNamedCapture(regex) {
+        return !!(regex[REGEX_DATA] && regex[REGEX_DATA].captureNames);
+    }
 
-    var reLinkLabel = /^\[(?:[^\\\[\]]|\\.){0,1000}\]/s;
+    /**
+     * Converts decimal to hexadecimal.
+     *
+     * @private
+     * @param {Number|String} dec
+     * @returns {String}
+     */
+    function hex(dec) {
+        return parseInt(dec, 10).toString(16);
+    }
 
-    // Matches a string of non-special characters.
-    var reMain = /^[^\n`\[\]\\!<&*_'"]+/m;
+    /**
+     * Checks whether the next nonignorable token after the specified position is a quantifier.
+     *
+     * @private
+     * @param {String} pattern Pattern to search within.
+     * @param {Number} pos Index in `pattern` to search at.
+     * @param {String} flags Flags used by the pattern.
+     * @returns {Boolean} Whether the next nonignorable token is a quantifier.
+     */
+    function isQuantifierNext(pattern, pos, flags) {
+        return nativ.test.call(flags.indexOf('x') !== -1 ?
+        // Ignore any leading whitespace, line comments, and inline comments
+        /^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/ :
+        // Ignore any leading inline comments
+        /^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/, pattern.slice(pos));
+    }
 
-    var text = function(s) {
-        var node = new Node("text");
-        node._literal = s;
-        return node;
-    };
+    /**
+     * Determines whether a value is of the specified type, by resolving its internal [[Class]].
+     *
+     * @private
+     * @param {*} value Object to check.
+     * @param {String} type Type to check for, in TitleCase.
+     * @returns {Boolean} Whether the object matches the type.
+     */
+    function isType(value, type) {
+        return toString.call(value) === '[object ' + type + ']';
+    }
 
-    // normalize a reference in reference link (remove []s, trim,
-    // collapse internal space, unicode case fold.
-    // See commonmark/commonmark.js#168.
-    var normalizeReference = function(string) {
-        return string
-            .slice(1, string.length - 1)
-            .trim()
-            .replace(/[ \t\r\n]+/, " ")
-            .toLowerCase()
-            .toUpperCase();
-    };
+    /**
+     * Adds leading zeros if shorter than four characters. Used for fixed-length hexadecimal values.
+     *
+     * @private
+     * @param {String} str
+     * @returns {String}
+     */
+    function pad4(str) {
+        while (str.length < 4) {
+            str = '0' + str;
+        }
+        return str;
+    }
 
-    // INLINE PARSER
+    /**
+     * Checks for flag-related errors, and strips/applies flags in a leading mode modifier. Offloads
+     * the flag preparation logic from the `XRegExp` constructor.
+     *
+     * @private
+     * @param {String} pattern Regex pattern, possibly with a leading mode modifier.
+     * @param {String} flags Any combination of flags.
+     * @returns {Object} Object with properties `pattern` and `flags`.
+     */
+    function prepareFlags(pattern, flags) {
+        var i = void 0;
 
-    // These are methods of an InlineParser object, defined below.
-    // An InlineParser keeps track of a subject (a string to be
-    // parsed) and a position in that subject.
+        // Recent browsers throw on duplicate flags, so copy this behavior for nonnative flags
+        if (clipDuplicates(flags) !== flags) {
+            throw new SyntaxError('Invalid duplicate regex flag ' + flags);
+        }
 
-    // If re matches at current position in the subject, advance
-    // position in subject and return the match; otherwise return null.
-    var match = function(re) {
-        var m = re.exec(this.subject.slice(this.pos));
-        if (m === null) {
+        // Strip and apply a leading mode modifier with any combination of flags except g or y
+        pattern = nativ.replace.call(pattern, /^\(\?([\w$]+)\)/, function ($0, $1) {
+            if (nativ.test.call(/[gy]/, $1)) {
+                throw new SyntaxError('Cannot use flag g or y in mode modifier ' + $0);
+            }
+            // Allow duplicate flags within the mode modifier
+            flags = clipDuplicates(flags + $1);
+            return '';
+        });
+
+        // Throw on unknown native or nonnative flags
+        for (i = 0; i < flags.length; ++i) {
+            if (!registeredFlags[flags[i]]) {
+                throw new SyntaxError('Unknown regex flag ' + flags[i]);
+            }
+        }
+
+        return {
+            pattern: pattern,
+            flags: flags
+        };
+    }
+
+    /**
+     * Prepares an options object from the given value.
+     *
+     * @private
+     * @param {String|Object} value Value to convert to an options object.
+     * @returns {Object} Options object.
+     */
+    function prepareOptions(value) {
+        var options = {};
+
+        if (isType(value, 'String')) {
+            XRegExp.forEach(value, /[^\s,]+/, function (match) {
+                options[match] = true;
+            });
+
+            return options;
+        }
+
+        return value;
+    }
+
+    /**
+     * Registers a flag so it doesn't throw an 'unknown flag' error.
+     *
+     * @private
+     * @param {String} flag Single-character flag to register.
+     */
+    function registerFlag(flag) {
+        if (!/^[\w$]$/.test(flag)) {
+            throw new Error('Flag must be a single character A-Za-z0-9_$');
+        }
+
+        registeredFlags[flag] = true;
+    }
+
+    /**
+     * Runs built-in and custom regex syntax tokens in reverse insertion order at the specified
+     * position, until a match is found.
+     *
+     * @private
+     * @param {String} pattern Original pattern from which an XRegExp object is being built.
+     * @param {String} flags Flags being used to construct the regex.
+     * @param {Number} pos Position to search for tokens within `pattern`.
+     * @param {Number} scope Regex scope to apply: 'default' or 'class'.
+     * @param {Object} context Context object to use for token handler functions.
+     * @returns {Object} Object with properties `matchLength`, `output`, and `reparse`; or `null`.
+     */
+    function runTokens(pattern, flags, pos, scope, context) {
+        var i = tokens.length;
+        var leadChar = pattern[pos];
+        var result = null;
+        var match = void 0;
+        var t = void 0;
+
+        // Run in reverse insertion order
+        while (i--) {
+            t = tokens[i];
+            if (t.leadChar && t.leadChar !== leadChar || t.scope !== scope && t.scope !== 'all' || t.flag && !(flags.indexOf(t.flag) !== -1)) {
+                continue;
+            }
+
+            match = XRegExp.exec(pattern, t.regex, pos, 'sticky');
+            if (match) {
+                result = {
+                    matchLength: match[0].length,
+                    output: t.handler.call(context, match, scope, flags),
+                    reparse: t.reparse
+                };
+                // Finished with token tests
+                break;
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * Enables or disables implicit astral mode opt-in. When enabled, flag A is automatically added to
+     * all new regexes created by XRegExp. This causes an error to be thrown when creating regexes if
+     * the Unicode Base addon is not available, since flag A is registered by that addon.
+     *
+     * @private
+     * @param {Boolean} on `true` to enable; `false` to disable.
+     */
+    function setAstral(on) {
+        features.astral = on;
+    }
+
+    /**
+     * Adds named capture groups to the `groups` property of match arrays. See here for details:
+     * https://github.com/tc39/proposal-regexp-named-groups
+     *
+     * @private
+     * @param {Boolean} on `true` to enable; `false` to disable.
+     */
+    function setNamespacing(on) {
+        features.namespacing = on;
+    }
+
+    /**
+     * Returns the object, or throws an error if it is `null` or `undefined`. This is used to follow
+     * the ES5 abstract operation `ToObject`.
+     *
+     * @private
+     * @param {*} value Object to check and return.
+     * @returns {*} The provided object.
+     */
+    function toObject(value) {
+        // null or undefined
+        if (value == null) {
+            throw new TypeError('Cannot convert null or undefined to object');
+        }
+
+        return value;
+    }
+
+    // ==--------------------------==
+    // Constructor
+    // ==--------------------------==
+
+    /**
+     * Creates an extended regular expression object for matching text with a pattern. Differs from a
+     * native regular expression in that additional syntax and flags are supported. The returned object
+     * is in fact a native `RegExp` and works with all native methods.
+     *
+     * @class XRegExp
+     * @constructor
+     * @param {String|RegExp} pattern Regex pattern string, or an existing regex object to copy.
+     * @param {String} [flags] Any combination of flags.
+     *   Native flags:
+     *     - `g` - global
+     *     - `i` - ignore case
+     *     - `m` - multiline anchors
+     *     - `u` - unicode (ES6)
+     *     - `y` - sticky (Firefox 3+, ES6)
+     *   Additional XRegExp flags:
+     *     - `n` - explicit capture
+     *     - `s` - dot matches all (aka singleline)
+     *     - `x` - free-spacing and line comments (aka extended)
+     *     - `A` - astral (requires the Unicode Base addon)
+     *   Flags cannot be provided when constructing one `RegExp` from another.
+     * @returns {RegExp} Extended regular expression object.
+     * @example
+     *
+     * // With named capture and flag x
+     * XRegExp(`(?<year>  [0-9]{4} ) -?  # year
+     *          (?<month> [0-9]{2} ) -?  # month
+     *          (?<day>   [0-9]{2} )     # day`, 'x');
+     *
+     * // Providing a regex object copies it. Native regexes are recompiled using native (not XRegExp)
+     * // syntax. Copies maintain extended data, are augmented with `XRegExp.prototype` properties, and
+     * // have fresh `lastIndex` properties (set to zero).
+     * XRegExp(/regex/);
+     */
+    function XRegExp(pattern, flags) {
+        if (XRegExp.isRegExp(pattern)) {
+            if (flags !== undefined) {
+                throw new TypeError('Cannot supply flags when copying a RegExp');
+            }
+            return copyRegex(pattern);
+        }
+
+        // Copy the argument behavior of `RegExp`
+        pattern = pattern === undefined ? '' : String(pattern);
+        flags = flags === undefined ? '' : String(flags);
+
+        if (XRegExp.isInstalled('astral') && !(flags.indexOf('A') !== -1)) {
+            // This causes an error to be thrown if the Unicode Base addon is not available
+            flags += 'A';
+        }
+
+        if (!patternCache[pattern]) {
+            patternCache[pattern] = {};
+        }
+
+        if (!patternCache[pattern][flags]) {
+            var context = {
+                hasNamedCapture: false,
+                captureNames: []
+            };
+            var scope = defaultScope;
+            var output = '';
+            var pos = 0;
+            var result = void 0;
+
+            // Check for flag-related errors, and strip/apply flags in a leading mode modifier
+            var applied = prepareFlags(pattern, flags);
+            var appliedPattern = applied.pattern;
+            var appliedFlags = applied.flags;
+
+            // Use XRegExp's tokens to translate the pattern to a native regex pattern.
+            // `appliedPattern.length` may change on each iteration if tokens use `reparse`
+            while (pos < appliedPattern.length) {
+                do {
+                    // Check for custom tokens at the current position
+                    result = runTokens(appliedPattern, appliedFlags, pos, scope, context);
+                    // If the matched token used the `reparse` option, splice its output into the
+                    // pattern before running tokens again at the same position
+                    if (result && result.reparse) {
+                        appliedPattern = appliedPattern.slice(0, pos) + result.output + appliedPattern.slice(pos + result.matchLength);
+                    }
+                } while (result && result.reparse);
+
+                if (result) {
+                    output += result.output;
+                    pos += result.matchLength || 1;
+                } else {
+                    // Get the native token at the current position
+                    var token = XRegExp.exec(appliedPattern, nativeTokens[scope], pos, 'sticky')[0];
+                    output += token;
+                    pos += token.length;
+                    if (token === '[' && scope === defaultScope) {
+                        scope = classScope;
+                    } else if (token === ']' && scope === classScope) {
+                        scope = defaultScope;
+                    }
+                }
+            }
+
+            patternCache[pattern][flags] = {
+                // Use basic cleanup to collapse repeated empty groups like `(?:)(?:)` to `(?:)`. Empty
+                // groups are sometimes inserted during regex transpilation in order to keep tokens
+                // separated. However, more than one empty group in a row is never needed.
+                pattern: nativ.replace.call(output, /(?:\(\?:\))+/g, '(?:)'),
+                // Strip all but native flags
+                flags: nativ.replace.call(appliedFlags, /[^gimuy]+/g, ''),
+                // `context.captureNames` has an item for each capturing group, even if unnamed
+                captures: context.hasNamedCapture ? context.captureNames : null
+            };
+        }
+
+        var generated = patternCache[pattern][flags];
+        return augment(new RegExp(generated.pattern, generated.flags), generated.captures, pattern, flags);
+    }
+
+    // Add `RegExp.prototype` to the prototype chain
+    XRegExp.prototype = /(?:)/;
+
+    // ==--------------------------==
+    // Public properties
+    // ==--------------------------==
+
+    /**
+     * The XRegExp version number as a string containing three dot-separated parts. For example,
+     * '2.0.0-beta-3'.
+     *
+     * @static
+     * @memberOf XRegExp
+     * @type String
+     */
+    XRegExp.version = '4.1.1';
+
+    // ==--------------------------==
+    // Public methods
+    // ==--------------------------==
+
+    // Intentionally undocumented; used in tests and addons
+    XRegExp._clipDuplicates = clipDuplicates;
+    XRegExp._hasNativeFlag = hasNativeFlag;
+    XRegExp._dec = dec;
+    XRegExp._hex = hex;
+    XRegExp._pad4 = pad4;
+
+    /**
+     * Extends XRegExp syntax and allows custom flags. This is used internally and can be used to
+     * create XRegExp addons. If more than one token can match the same string, the last added wins.
+     *
+     * @memberOf XRegExp
+     * @param {RegExp} regex Regex object that matches the new token.
+     * @param {Function} handler Function that returns a new pattern string (using native regex syntax)
+     *   to replace the matched token within all future XRegExp regexes. Has access to persistent
+     *   properties of the regex being built, through `this`. Invoked with three arguments:
+     *   - The match array, with named backreference properties.
+     *   - The regex scope where the match was found: 'default' or 'class'.
+     *   - The flags used by the regex, including any flags in a leading mode modifier.
+     *   The handler function becomes part of the XRegExp construction process, so be careful not to
+     *   construct XRegExps within the function or you will trigger infinite recursion.
+     * @param {Object} [options] Options object with optional properties:
+     *   - `scope` {String} Scope where the token applies: 'default', 'class', or 'all'.
+     *   - `flag` {String} Single-character flag that triggers the token. This also registers the
+     *     flag, which prevents XRegExp from throwing an 'unknown flag' error when the flag is used.
+     *   - `optionalFlags` {String} Any custom flags checked for within the token `handler` that are
+     *     not required to trigger the token. This registers the flags, to prevent XRegExp from
+     *     throwing an 'unknown flag' error when any of the flags are used.
+     *   - `reparse` {Boolean} Whether the `handler` function's output should not be treated as
+     *     final, and instead be reparseable by other tokens (including the current token). Allows
+     *     token chaining or deferring.
+     *   - `leadChar` {String} Single character that occurs at the beginning of any successful match
+     *     of the token (not always applicable). This doesn't change the behavior of the token unless
+     *     you provide an erroneous value. However, providing it can increase the token's performance
+     *     since the token can be skipped at any positions where this character doesn't appear.
+     * @example
+     *
+     * // Basic usage: Add \a for the ALERT control code
+     * XRegExp.addToken(
+     *   /\\a/,
+     *   () => '\\x07',
+     *   {scope: 'all'}
+     * );
+     * XRegExp('\\a[\\a-\\n]+').test('\x07\n\x07'); // -> true
+     *
+     * // Add the U (ungreedy) flag from PCRE and RE2, which reverses greedy and lazy quantifiers.
+     * // Since `scope` is not specified, it uses 'default' (i.e., transformations apply outside of
+     * // character classes only)
+     * XRegExp.addToken(
+     *   /([?*+]|{\d+(?:,\d*)?})(\??)/,
+     *   (match) => `${match[1]}${match[2] ? '' : '?'}`,
+     *   {flag: 'U'}
+     * );
+     * XRegExp('a+', 'U').exec('aaa')[0]; // -> 'a'
+     * XRegExp('a+?', 'U').exec('aaa')[0]; // -> 'aaa'
+     */
+    XRegExp.addToken = function (regex, handler, options) {
+        options = options || {};
+        var optionalFlags = options.optionalFlags;
+        var i = void 0;
+
+        if (options.flag) {
+            registerFlag(options.flag);
+        }
+
+        if (optionalFlags) {
+            optionalFlags = nativ.split.call(optionalFlags, '');
+            for (i = 0; i < optionalFlags.length; ++i) {
+                registerFlag(optionalFlags[i]);
+            }
+        }
+
+        // Add to the private list of syntax tokens
+        tokens.push({
+            regex: copyRegex(regex, {
+                addG: true,
+                addY: hasNativeY,
+                isInternalOnly: true
+            }),
+            handler: handler,
+            scope: options.scope || defaultScope,
+            flag: options.flag,
+            reparse: options.reparse,
+            leadChar: options.leadChar
+        });
+
+        // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and flags
+        // might now produce different results
+        XRegExp.cache.flush('patterns');
+    };
+
+    /**
+     * Caches and returns the result of calling `XRegExp(pattern, flags)`. On any subsequent call with
+     * the same pattern and flag combination, the cached copy of the regex is returned.
+     *
+     * @memberOf XRegExp
+     * @param {String} pattern Regex pattern string.
+     * @param {String} [flags] Any combination of XRegExp flags.
+     * @returns {RegExp} Cached XRegExp object.
+     * @example
+     *
+     * while (match = XRegExp.cache('.', 'gs').exec(str)) {
+     *   // The regex is compiled once only
+     * }
+     */
+    XRegExp.cache = function (pattern, flags) {
+        if (!regexCache[pattern]) {
+            regexCache[pattern] = {};
+        }
+        return regexCache[pattern][flags] || (regexCache[pattern][flags] = XRegExp(pattern, flags));
+    };
+
+    // Intentionally undocumented; used in tests
+    XRegExp.cache.flush = function (cacheName) {
+        if (cacheName === 'patterns') {
+            // Flush the pattern cache used by the `XRegExp` constructor
+            patternCache = {};
+        } else {
+            // Flush the regex cache populated by `XRegExp.cache`
+            regexCache = {};
+        }
+    };
+
+    /**
+     * Escapes any regular expression metacharacters, for use when matching literal strings. The result
+     * can safely be used at any point within a regex that uses any flags.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to escape.
+     * @returns {String} String with regex metacharacters escaped.
+     * @example
+     *
+     * XRegExp.escape('Escaped? <.>');
+     * // -> 'Escaped\?\ <\.>'
+     */
+    XRegExp.escape = function (str) {
+        return nativ.replace.call(toObject(str), /[-\[\]{}()*+?.,\\^$|#\s]/g, '\\$&');
+    };
+
+    /**
+     * Executes a regex search in a specified string. Returns a match array or `null`. If the provided
+     * regex uses named capture, named backreference properties are included on the match array.
+     * Optional `pos` and `sticky` arguments specify the search start position, and whether the match
+     * must start at the specified position only. The `lastIndex` property of the provided regex is not
+     * used, but is updated for compatibility. Also fixes browser bugs compared to the native
+     * `RegExp.prototype.exec` and can be used reliably cross-browser.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {RegExp} regex Regex to search with.
+     * @param {Number} [pos=0] Zero-based index at which to start the search.
+     * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
+     *   only. The string `'sticky'` is accepted as an alternative to `true`.
+     * @returns {Array} Match array with named backreference properties, or `null`.
+     * @example
+     *
+     * // Basic use, with named backreference
+     * let match = XRegExp.exec('U+2620', XRegExp('U\\+(?<hex>[0-9A-F]{4})'));
+     * match.hex; // -> '2620'
+     *
+     * // With pos and sticky, in a loop
+     * let pos = 2, result = [], match;
+     * while (match = XRegExp.exec('<1><2><3><4>5<6>', /<(\d)>/, pos, 'sticky')) {
+     *   result.push(match[1]);
+     *   pos = match.index + match[0].length;
+     * }
+     * // result -> ['2', '3', '4']
+     */
+    XRegExp.exec = function (str, regex, pos, sticky) {
+        var cacheKey = 'g';
+        var addY = false;
+        var fakeY = false;
+        var match = void 0;
+
+        addY = hasNativeY && !!(sticky || regex.sticky && sticky !== false);
+        if (addY) {
+            cacheKey += 'y';
+        } else if (sticky) {
+            // Simulate sticky matching by appending an empty capture to the original regex. The
+            // resulting regex will succeed no matter what at the current index (set with `lastIndex`),
+            // and will not search the rest of the subject string. We'll know that the original regex
+            // has failed if that last capture is `''` rather than `undefined` (i.e., if that last
+            // capture participated in the match).
+            fakeY = true;
+            cacheKey += 'FakeY';
+        }
+
+        regex[REGEX_DATA] = regex[REGEX_DATA] || {};
+
+        // Shares cached copies with `XRegExp.match`/`replace`
+        var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
+            addG: true,
+            addY: addY,
+            source: fakeY ? regex.source + '|()' : undefined,
+            removeY: sticky === false,
+            isInternalOnly: true
+        }));
+
+        pos = pos || 0;
+        r2.lastIndex = pos;
+
+        // Fixed `exec` required for `lastIndex` fix, named backreferences, etc.
+        match = fixed.exec.call(r2, str);
+
+        // Get rid of the capture added by the pseudo-sticky matcher if needed. An empty string means
+        // the original regexp failed (see above).
+        if (fakeY && match && match.pop() === '') {
+            match = null;
+        }
+
+        if (regex.global) {
+            regex.lastIndex = match ? r2.lastIndex : 0;
+        }
+
+        return match;
+    };
+
+    /**
+     * Executes a provided function once per regex match. Searches always start at the beginning of the
+     * string and continue until the end, regardless of the state of the regex's `global` property and
+     * initial `lastIndex`.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {RegExp} regex Regex to search with.
+     * @param {Function} callback Function to execute for each match. Invoked with four arguments:
+     *   - The match array, with named backreference properties.
+     *   - The zero-based match index.
+     *   - The string being traversed.
+     *   - The regex object being used to traverse the string.
+     * @example
+     *
+     * // Extracts every other digit from a string
+     * const evens = [];
+     * XRegExp.forEach('1a2345', /\d/, (match, i) => {
+     *   if (i % 2) evens.push(+match[0]);
+     * });
+     * // evens -> [2, 4]
+     */
+    XRegExp.forEach = function (str, regex, callback) {
+        var pos = 0;
+        var i = -1;
+        var match = void 0;
+
+        while (match = XRegExp.exec(str, regex, pos)) {
+            // Because `regex` is provided to `callback`, the function could use the deprecated/
+            // nonstandard `RegExp.prototype.compile` to mutate the regex. However, since `XRegExp.exec`
+            // doesn't use `lastIndex` to set the search position, this can't lead to an infinite loop,
+            // at least. Actually, because of the way `XRegExp.exec` caches globalized versions of
+            // regexes, mutating the regex will not have any effect on the iteration or matched strings,
+            // which is a nice side effect that brings extra safety.
+            callback(match, ++i, str, regex);
+
+            pos = match.index + (match[0].length || 1);
+        }
+    };
+
+    /**
+     * Copies a regex object and adds flag `g`. The copy maintains extended data, is augmented with
+     * `XRegExp.prototype` properties, and has a fresh `lastIndex` property (set to zero). Native
+     * regexes are not recompiled using XRegExp syntax.
+     *
+     * @memberOf XRegExp
+     * @param {RegExp} regex Regex to globalize.
+     * @returns {RegExp} Copy of the provided regex with flag `g` added.
+     * @example
+     *
+     * const globalCopy = XRegExp.globalize(/regex/);
+     * globalCopy.global; // -> true
+     */
+    XRegExp.globalize = function (regex) {
+        return copyRegex(regex, { addG: true });
+    };
+
+    /**
+     * Installs optional features according to the specified options. Can be undone using
+     * `XRegExp.uninstall`.
+     *
+     * @memberOf XRegExp
+     * @param {Object|String} options Options object or string.
+     * @example
+     *
+     * // With an options object
+     * XRegExp.install({
+     *   // Enables support for astral code points in Unicode addons (implicitly sets flag A)
+     *   astral: true,
+     *
+     *   // Adds named capture groups to the `groups` property of matches
+     *   namespacing: true
+     * });
+     *
+     * // With an options string
+     * XRegExp.install('astral namespacing');
+     */
+    XRegExp.install = function (options) {
+        options = prepareOptions(options);
+
+        if (!features.astral && options.astral) {
+            setAstral(true);
+        }
+
+        if (!features.namespacing && options.namespacing) {
+            setNamespacing(true);
+        }
+    };
+
+    /**
+     * Checks whether an individual optional feature is installed.
+     *
+     * @memberOf XRegExp
+     * @param {String} feature Name of the feature to check. One of:
+     *   - `astral`
+     *   - `namespacing`
+     * @returns {Boolean} Whether the feature is installed.
+     * @example
+     *
+     * XRegExp.isInstalled('astral');
+     */
+    XRegExp.isInstalled = function (feature) {
+        return !!features[feature];
+    };
+
+    /**
+     * Returns `true` if an object is a regex; `false` if it isn't. This works correctly for regexes
+     * created in another frame, when `instanceof` and `constructor` checks would fail.
+     *
+     * @memberOf XRegExp
+     * @param {*} value Object to check.
+     * @returns {Boolean} Whether the object is a `RegExp` object.
+     * @example
+     *
+     * XRegExp.isRegExp('string'); // -> false
+     * XRegExp.isRegExp(/regex/i); // -> true
+     * XRegExp.isRegExp(RegExp('^', 'm')); // -> true
+     * XRegExp.isRegExp(XRegExp('(?s).')); // -> true
+     */
+    XRegExp.isRegExp = function (value) {
+        return toString.call(value) === '[object RegExp]';
+    }; // isType(value, 'RegExp');
+
+    /**
+     * Returns the first matched string, or in global mode, an array containing all matched strings.
+     * This is essentially a more convenient re-implementation of `String.prototype.match` that gives
+     * the result types you actually want (string instead of `exec`-style array in match-first mode,
+     * and an empty array instead of `null` when no matches are found in match-all mode). It also lets
+     * you override flag g and ignore `lastIndex`, and fixes browser bugs.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {RegExp} regex Regex to search with.
+     * @param {String} [scope='one'] Use 'one' to return the first match as a string. Use 'all' to
+     *   return an array of all matched strings. If not explicitly specified and `regex` uses flag g,
+     *   `scope` is 'all'.
+     * @returns {String|Array} In match-first mode: First match as a string, or `null`. In match-all
+     *   mode: Array of all matched strings, or an empty array.
+     * @example
+     *
+     * // Match first
+     * XRegExp.match('abc', /\w/); // -> 'a'
+     * XRegExp.match('abc', /\w/g, 'one'); // -> 'a'
+     * XRegExp.match('abc', /x/g, 'one'); // -> null
+     *
+     * // Match all
+     * XRegExp.match('abc', /\w/g); // -> ['a', 'b', 'c']
+     * XRegExp.match('abc', /\w/, 'all'); // -> ['a', 'b', 'c']
+     * XRegExp.match('abc', /x/, 'all'); // -> []
+     */
+    XRegExp.match = function (str, regex, scope) {
+        var global = regex.global && scope !== 'one' || scope === 'all';
+        var cacheKey = (global ? 'g' : '') + (regex.sticky ? 'y' : '') || 'noGY';
+
+        regex[REGEX_DATA] = regex[REGEX_DATA] || {};
+
+        // Shares cached copies with `XRegExp.exec`/`replace`
+        var r2 = regex[REGEX_DATA][cacheKey] || (regex[REGEX_DATA][cacheKey] = copyRegex(regex, {
+            addG: !!global,
+            removeG: scope === 'one',
+            isInternalOnly: true
+        }));
+
+        var result = nativ.match.call(toObject(str), r2);
+
+        if (regex.global) {
+            regex.lastIndex = scope === 'one' && result ?
+            // Can't use `r2.lastIndex` since `r2` is nonglobal in this case
+            result.index + result[0].length : 0;
+        }
+
+        return global ? result || [] : result && result[0];
+    };
+
+    /**
+     * Retrieves the matches from searching a string using a chain of regexes that successively search
+     * within previous matches. The provided `chain` array can contain regexes and or objects with
+     * `regex` and `backref` properties. When a backreference is specified, the named or numbered
+     * backreference is passed forward to the next regex or returned.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {Array} chain Regexes that each search for matches within preceding results.
+     * @returns {Array} Matches by the last regex in the chain, or an empty array.
+     * @example
+     *
+     * // Basic usage; matches numbers within <b> tags
+     * XRegExp.matchChain('1 <b>2</b> 3 <b>4 a 56</b>', [
+     *   XRegExp('(?is)<b>.*?</b>'),
+     *   /\d+/
+     * ]);
+     * // -> ['2', '4', '56']
+     *
+     * // Passing forward and returning specific backreferences
+     * html = '<a href="http://xregexp.com/api/">XRegExp</a>\
+     *         <a href="http://www.google.com/">Google</a>';
+     * XRegExp.matchChain(html, [
+     *   {regex: /<a href="([^"]+)">/i, backref: 1},
+     *   {regex: XRegExp('(?i)^https?://(?<domain>[^/?#]+)'), backref: 'domain'}
+     * ]);
+     * // -> ['xregexp.com', 'www.google.com']
+     */
+    XRegExp.matchChain = function (str, chain) {
+        return function recurseChain(values, level) {
+            var item = chain[level].regex ? chain[level] : { regex: chain[level] };
+            var matches = [];
+
+            function addMatch(match) {
+                if (item.backref) {
+                    var ERR_UNDEFINED_GROUP = 'Backreference to undefined group: ' + item.backref;
+                    var isNamedBackref = isNaN(item.backref);
+
+                    if (isNamedBackref && XRegExp.isInstalled('namespacing')) {
+                        // `groups` has `null` as prototype, so using `in` instead of `hasOwnProperty`
+                        if (!(item.backref in match.groups)) {
+                            throw new ReferenceError(ERR_UNDEFINED_GROUP);
+                        }
+                    } else if (!match.hasOwnProperty(item.backref)) {
+                        throw new ReferenceError(ERR_UNDEFINED_GROUP);
+                    }
+
+                    var backrefValue = isNamedBackref && XRegExp.isInstalled('namespacing') ? match.groups[item.backref] : match[item.backref];
+
+                    matches.push(backrefValue || '');
+                } else {
+                    matches.push(match[0]);
+                }
+            }
+
+            for (var i = 0; i < values.length; ++i) {
+                XRegExp.forEach(values[i], item.regex, addMatch);
+            }
+
+            return level === chain.length - 1 || !matches.length ? matches : recurseChain(matches, level + 1);
+        }([str], 0);
+    };
+
+    /**
+     * Returns a new string with one or all matches of a pattern replaced. The pattern can be a string
+     * or regex, and the replacement can be a string or a function to be called for each match. To
+     * perform a global search and replace, use the optional `scope` argument or include flag g if using
+     * a regex. Replacement strings can use `${n}` or `$<n>` for named and numbered backreferences.
+     * Replacement functions can use named backreferences via `arguments[0].name`. Also fixes browser
+     * bugs compared to the native `String.prototype.replace` and can be used reliably cross-browser.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {RegExp|String} search Search pattern to be replaced.
+     * @param {String|Function} replacement Replacement string or a function invoked to create it.
+     *   Replacement strings can include special replacement syntax:
+     *     - $$ - Inserts a literal $ character.
+     *     - $&, $0 - Inserts the matched substring.
+     *     - $` - Inserts the string that precedes the matched substring (left context).
+     *     - $' - Inserts the string that follows the matched substring (right context).
+     *     - $n, $nn - Where n/nn are digits referencing an existent capturing group, inserts
+     *       backreference n/nn.
+     *     - ${n}, $<n> - Where n is a name or any number of digits that reference an existent capturing
+     *       group, inserts backreference n.
+     *   Replacement functions are invoked with three or more arguments:
+     *     - The matched substring (corresponds to $& above). Named backreferences are accessible as
+     *       properties of this first argument.
+     *     - 0..n arguments, one for each backreference (corresponding to $1, $2, etc. above).
+     *     - The zero-based index of the match within the total search string.
+     *     - The total string being searched.
+     * @param {String} [scope='one'] Use 'one' to replace the first match only, or 'all'. If not
+     *   explicitly specified and using a regex with flag g, `scope` is 'all'.
+     * @returns {String} New string with one or all matches replaced.
+     * @example
+     *
+     * // Regex search, using named backreferences in replacement string
+     * const name = XRegExp('(?<first>\\w+) (?<last>\\w+)');
+     * XRegExp.replace('John Smith', name, '$<last>, $<first>');
+     * // -> 'Smith, John'
+     *
+     * // Regex search, using named backreferences in replacement function
+     * XRegExp.replace('John Smith', name, (match) => `${match.last}, ${match.first}`);
+     * // -> 'Smith, John'
+     *
+     * // String search, with replace-all
+     * XRegExp.replace('RegExp builds RegExps', 'RegExp', 'XRegExp', 'all');
+     * // -> 'XRegExp builds XRegExps'
+     */
+    XRegExp.replace = function (str, search, replacement, scope) {
+        var isRegex = XRegExp.isRegExp(search);
+        var global = search.global && scope !== 'one' || scope === 'all';
+        var cacheKey = (global ? 'g' : '') + (search.sticky ? 'y' : '') || 'noGY';
+        var s2 = search;
+
+        if (isRegex) {
+            search[REGEX_DATA] = search[REGEX_DATA] || {};
+
+            // Shares cached copies with `XRegExp.exec`/`match`. Since a copy is used, `search`'s
+            // `lastIndex` isn't updated *during* replacement iterations
+            s2 = search[REGEX_DATA][cacheKey] || (search[REGEX_DATA][cacheKey] = copyRegex(search, {
+                addG: !!global,
+                removeG: scope === 'one',
+                isInternalOnly: true
+            }));
+        } else if (global) {
+            s2 = new RegExp(XRegExp.escape(String(search)), 'g');
+        }
+
+        // Fixed `replace` required for named backreferences, etc.
+        var result = fixed.replace.call(toObject(str), s2, replacement);
+
+        if (isRegex && search.global) {
+            // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
+            search.lastIndex = 0;
+        }
+
+        return result;
+    };
+
+    /**
+     * Performs batch processing of string replacements. Used like `XRegExp.replace`, but accepts an
+     * array of replacement details. Later replacements operate on the output of earlier replacements.
+     * Replacement details are accepted as an array with a regex or string to search for, the
+     * replacement string or function, and an optional scope of 'one' or 'all'. Uses the XRegExp
+     * replacement text syntax, which supports named backreference properties via `${name}` or
+     * `$<name>`.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {Array} replacements Array of replacement detail arrays.
+     * @returns {String} New string with all replacements.
+     * @example
+     *
+     * str = XRegExp.replaceEach(str, [
+     *   [XRegExp('(?<name>a)'), 'z${name}'],
+     *   [/b/gi, 'y'],
+     *   [/c/g, 'x', 'one'], // scope 'one' overrides /g
+     *   [/d/, 'w', 'all'],  // scope 'all' overrides lack of /g
+     *   ['e', 'v', 'all'],  // scope 'all' allows replace-all for strings
+     *   [/f/g, ($0) => $0.toUpperCase()]
+     * ]);
+     */
+    XRegExp.replaceEach = function (str, replacements) {
+        var i = void 0;
+        var r = void 0;
+
+        for (i = 0; i < replacements.length; ++i) {
+            r = replacements[i];
+            str = XRegExp.replace(str, r[0], r[1], r[2]);
+        }
+
+        return str;
+    };
+
+    /**
+     * Splits a string into an array of strings using a regex or string separator. Matches of the
+     * separator are not included in the result array. However, if `separator` is a regex that contains
+     * capturing groups, backreferences are spliced into the result each time `separator` is matched.
+     * Fixes browser bugs compared to the native `String.prototype.split` and can be used reliably
+     * cross-browser.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to split.
+     * @param {RegExp|String} separator Regex or string to use for separating the string.
+     * @param {Number} [limit] Maximum number of items to include in the result array.
+     * @returns {Array} Array of substrings.
+     * @example
+     *
+     * // Basic use
+     * XRegExp.split('a b c', ' ');
+     * // -> ['a', 'b', 'c']
+     *
+     * // With limit
+     * XRegExp.split('a b c', ' ', 2);
+     * // -> ['a', 'b']
+     *
+     * // Backreferences in result array
+     * XRegExp.split('..word1..', /([a-z]+)(\d+)/i);
+     * // -> ['..', 'word', '1', '..']
+     */
+    XRegExp.split = function (str, separator, limit) {
+        return fixed.split.call(toObject(str), separator, limit);
+    };
+
+    /**
+     * Executes a regex search in a specified string. Returns `true` or `false`. Optional `pos` and
+     * `sticky` arguments specify the search start position, and whether the match must start at the
+     * specified position only. The `lastIndex` property of the provided regex is not used, but is
+     * updated for compatibility. Also fixes browser bugs compared to the native
+     * `RegExp.prototype.test` and can be used reliably cross-browser.
+     *
+     * @memberOf XRegExp
+     * @param {String} str String to search.
+     * @param {RegExp} regex Regex to search with.
+     * @param {Number} [pos=0] Zero-based index at which to start the search.
+     * @param {Boolean|String} [sticky=false] Whether the match must start at the specified position
+     *   only. The string `'sticky'` is accepted as an alternative to `true`.
+     * @returns {Boolean} Whether the regex matched the provided value.
+     * @example
+     *
+     * // Basic use
+     * XRegExp.test('abc', /c/); // -> true
+     *
+     * // With pos and sticky
+     * XRegExp.test('abc', /c/, 0, 'sticky'); // -> false
+     * XRegExp.test('abc', /c/, 2, 'sticky'); // -> true
+     */
+    // Do this the easy way :-)
+    XRegExp.test = function (str, regex, pos, sticky) {
+        return !!XRegExp.exec(str, regex, pos, sticky);
+    };
+
+    /**
+     * Uninstalls optional features according to the specified options. All optional features start out
+     * uninstalled, so this is used to undo the actions of `XRegExp.install`.
+     *
+     * @memberOf XRegExp
+     * @param {Object|String} options Options object or string.
+     * @example
+     *
+     * // With an options object
+     * XRegExp.uninstall({
+     *   // Disables support for astral code points in Unicode addons
+     *   astral: true,
+     *
+     *   // Don't add named capture groups to the `groups` property of matches
+     *   namespacing: true
+     * });
+     *
+     * // With an options string
+     * XRegExp.uninstall('astral namespacing');
+     */
+    XRegExp.uninstall = function (options) {
+        options = prepareOptions(options);
+
+        if (features.astral && options.astral) {
+            setAstral(false);
+        }
+
+        if (features.namespacing && options.namespacing) {
+            setNamespacing(false);
+        }
+    };
+
+    /**
+     * Returns an XRegExp object that is the union of the given patterns. Patterns can be provided as
+     * regex objects or strings. Metacharacters are escaped in patterns provided as strings.
+     * Backreferences in provided regex objects are automatically renumbered to work correctly within
+     * the larger combined pattern. Native flags used by provided regexes are ignored in favor of the
+     * `flags` argument.
+     *
+     * @memberOf XRegExp
+     * @param {Array} patterns Regexes and strings to combine.
+     * @param {String} [flags] Any combination of XRegExp flags.
+     * @param {Object} [options] Options object with optional properties:
+     *   - `conjunction` {String} Type of conjunction to use: 'or' (default) or 'none'.
+     * @returns {RegExp} Union of the provided regexes and strings.
+     * @example
+     *
+     * XRegExp.union(['a+b*c', /(dogs)\1/, /(cats)\1/], 'i');
+     * // -> /a\+b\*c|(dogs)\1|(cats)\2/i
+     *
+     * XRegExp.union([/man/, /bear/, /pig/], 'i', {conjunction: 'none'});
+     * // -> /manbearpig/i
+     */
+    XRegExp.union = function (patterns, flags, options) {
+        options = options || {};
+        var conjunction = options.conjunction || 'or';
+        var numCaptures = 0;
+        var numPriorCaptures = void 0;
+        var captureNames = void 0;
+
+        function rewrite(match, paren, backref) {
+            var name = captureNames[numCaptures - numPriorCaptures];
+
+            // Capturing group
+            if (paren) {
+                ++numCaptures;
+                // If the current capture has a name, preserve the name
+                if (name) {
+                    return '(?<' + name + '>';
+                }
+                // Backreference
+            } else if (backref) {
+                // Rewrite the backreference
+                return '\\' + (+backref + numPriorCaptures);
+            }
+
+            return match;
+        }
+
+        if (!(isType(patterns, 'Array') && patterns.length)) {
+            throw new TypeError('Must provide a nonempty array of patterns to merge');
+        }
+
+        var parts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
+        var output = [];
+        var pattern = void 0;
+        for (var i = 0; i < patterns.length; ++i) {
+            pattern = patterns[i];
+
+            if (XRegExp.isRegExp(pattern)) {
+                numPriorCaptures = numCaptures;
+                captureNames = pattern[REGEX_DATA] && pattern[REGEX_DATA].captureNames || [];
+
+                // Rewrite backreferences. Passing to XRegExp dies on octals and ensures patterns are
+                // independently valid; helps keep this simple. Named captures are put back
+                output.push(nativ.replace.call(XRegExp(pattern.source).source, parts, rewrite));
+            } else {
+                output.push(XRegExp.escape(pattern));
+            }
+        }
+
+        var separator = conjunction === 'none' ? '' : '|';
+        return XRegExp(output.join(separator), flags);
+    };
+
+    // ==--------------------------==
+    // Fixed/extended native methods
+    // ==--------------------------==
+
+    /**
+     * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
+     * bugs in the native `RegExp.prototype.exec`. Use via `XRegExp.exec`.
+     *
+     * @memberOf RegExp
+     * @param {String} str String to search.
+     * @returns {Array} Match array with named backreference properties, or `null`.
+     */
+    fixed.exec = function (str) {
+        var origLastIndex = this.lastIndex;
+        var match = nativ.exec.apply(this, arguments);
+
+        if (match) {
+            // Fix browsers whose `exec` methods don't return `undefined` for nonparticipating capturing
+            // groups. This fixes IE 5.5-8, but not IE 9's quirks mode or emulation of older IEs. IE 9
+            // in standards mode follows the spec.
+            if (!correctExecNpcg && match.length > 1 && match.indexOf('') !== -1) {
+                var r2 = copyRegex(this, {
+                    removeG: true,
+                    isInternalOnly: true
+                });
+                // Using `str.slice(match.index)` rather than `match[0]` in case lookahead allowed
+                // matching due to characters outside the match
+                nativ.replace.call(String(str).slice(match.index), r2, function () {
+                    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
+                        args[_key] = arguments[_key];
+                    }
+
+                    var len = args.length;
+                    // Skip index 0 and the last 2
+                    for (var i = 1; i < len - 2; ++i) {
+                        if (args[i] === undefined) {
+                            match[i] = undefined;
+                        }
+                    }
+                });
+            }
+
+            // Attach named capture properties
+            var groupsObject = match;
+            if (XRegExp.isInstalled('namespacing')) {
+                // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
+                match.groups = Object.create(null);
+                groupsObject = match.groups;
+            }
+            if (this[REGEX_DATA] && this[REGEX_DATA].captureNames) {
+                // Skip index 0
+                for (var i = 1; i < match.length; ++i) {
+                    var name = this[REGEX_DATA].captureNames[i - 1];
+                    if (name) {
+                        groupsObject[name] = match[i];
+                    }
+                }
+            }
+
+            // Fix browsers that increment `lastIndex` after zero-length matches
+            if (this.global && !match[0].length && this.lastIndex > match.index) {
+                this.lastIndex = match.index;
+            }
+        }
+
+        if (!this.global) {
+            // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
+            this.lastIndex = origLastIndex;
+        }
+
+        return match;
+    };
+
+    /**
+     * Fixes browser bugs in the native `RegExp.prototype.test`.
+     *
+     * @memberOf RegExp
+     * @param {String} str String to search.
+     * @returns {Boolean} Whether the regex matched the provided value.
+     */
+    fixed.test = function (str) {
+        // Do this the easy way :-)
+        return !!fixed.exec.call(this, str);
+    };
+
+    /**
+     * Adds named capture support (with backreferences returned as `result.name`), and fixes browser
+     * bugs in the native `String.prototype.match`.
+     *
+     * @memberOf String
+     * @param {RegExp|*} regex Regex to search with. If not a regex object, it is passed to `RegExp`.
+     * @returns {Array} If `regex` uses flag g, an array of match strings or `null`. Without flag g,
+     *   the result of calling `regex.exec(this)`.
+     */
+    fixed.match = function (regex) {
+        if (!XRegExp.isRegExp(regex)) {
+            // Use the native `RegExp` rather than `XRegExp`
+            regex = new RegExp(regex);
+        } else if (regex.global) {
+            var result = nativ.match.apply(this, arguments);
+            // Fixes IE bug
+            regex.lastIndex = 0;
+
+            return result;
+        }
+
+        return fixed.exec.call(regex, toObject(this));
+    };
+
+    /**
+     * Adds support for `${n}` (or `$<n>`) tokens for named and numbered backreferences in replacement
+     * text, and provides named backreferences to replacement functions as `arguments[0].name`. Also
+     * fixes browser bugs in replacement text syntax when performing a replacement using a nonregex
+     * search value, and the value of a replacement regex's `lastIndex` property during replacement
+     * iterations and upon completion. Note that this doesn't support SpiderMonkey's proprietary third
+     * (`flags`) argument. Use via `XRegExp.replace`.
+     *
+     * @memberOf String
+     * @param {RegExp|String} search Search pattern to be replaced.
+     * @param {String|Function} replacement Replacement string or a function invoked to create it.
+     * @returns {String} New string with one or all matches replaced.
+     */
+    fixed.replace = function (search, replacement) {
+        var isRegex = XRegExp.isRegExp(search);
+        var origLastIndex = void 0;
+        var captureNames = void 0;
+        var result = void 0;
+
+        if (isRegex) {
+            if (search[REGEX_DATA]) {
+                captureNames = search[REGEX_DATA].captureNames;
+            }
+            // Only needed if `search` is nonglobal
+            origLastIndex = search.lastIndex;
+        } else {
+            search += ''; // Type-convert
+        }
+
+        // Don't use `typeof`; some older browsers return 'function' for regex objects
+        if (isType(replacement, 'Function')) {
+            // Stringifying `this` fixes a bug in IE < 9 where the last argument in replacement
+            // functions isn't type-converted to a string
+            result = nativ.replace.call(String(this), search, function () {
+                for (var _len2 = arguments.length, args = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
+                    args[_key2] = arguments[_key2];
+                }
+
+                if (captureNames) {
+                    var groupsObject = void 0;
+
+                    if (XRegExp.isInstalled('namespacing')) {
+                        // https://tc39.github.io/proposal-regexp-named-groups/#sec-regexpbuiltinexec
+                        groupsObject = Object.create(null);
+                        args.push(groupsObject);
+                    } else {
+                        // Change the `args[0]` string primitive to a `String` object that can store
+                        // properties. This really does need to use `String` as a constructor
+                        args[0] = new String(args[0]);
+                        groupsObject = args[0];
+                    }
+
+                    // Store named backreferences
+                    for (var i = 0; i < captureNames.length; ++i) {
+                        if (captureNames[i]) {
+                            groupsObject[captureNames[i]] = args[i + 1];
+                        }
+                    }
+                }
+                // Update `lastIndex` before calling `replacement`. Fixes IE, Chrome, Firefox, Safari
+                // bug (last tested IE 9, Chrome 17, Firefox 11, Safari 5.1)
+                if (isRegex && search.global) {
+                    search.lastIndex = args[args.length - 2] + args[0].length;
+                }
+                // ES6 specs the context for replacement functions as `undefined`
+                return replacement.apply(undefined, args);
+            });
+        } else {
+            // Ensure that the last value of `args` will be a string when given nonstring `this`,
+            // while still throwing on null or undefined context
+            result = nativ.replace.call(this == null ? this : String(this), search, function () {
+                for (var _len3 = arguments.length, args = Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
+                    args[_key3] = arguments[_key3];
+                }
+
+                return nativ.replace.call(String(replacement), replacementToken, replacer);
+
+                function replacer($0, bracketed, angled, dollarToken) {
+                    bracketed = bracketed || angled;
+                    // Named or numbered backreference with curly or angled braces
+                    if (bracketed) {
+                        // XRegExp behavior for `${n}` or `$<n>`:
+                        // 1. Backreference to numbered capture, if `n` is an integer. Use `0` for the
+                        //    entire match. Any number of leading zeros may be used.
+                        // 2. Backreference to named capture `n`, if it exists and is not an integer
+                        //    overridden by numbered capture. In practice, this does not overlap with
+                        //    numbered capture since XRegExp does not allow named capture to use a bare
+                        //    integer as the name.
+                        // 3. If the name or number does not refer to an existing capturing group, it's
+                        //    an error.
+                        var n = +bracketed; // Type-convert; drop leading zeros
+                        if (n <= args.length - 3) {
+                            return args[n] || '';
+                        }
+                        // Groups with the same name is an error, else would need `lastIndexOf`
+                        n = captureNames ? captureNames.indexOf(bracketed) : -1;
+                        if (n < 0) {
+                            throw new SyntaxError('Backreference to undefined group ' + $0);
+                        }
+                        return args[n + 1] || '';
+                    }
+                    // Else, special variable or numbered backreference without curly braces
+                    if (dollarToken === '$') {
+                        // $$
+                        return '$';
+                    }
+                    if (dollarToken === '&' || +dollarToken === 0) {
+                        // $&, $0 (not followed by 1-9), $00
+                        return args[0];
+                    }
+                    if (dollarToken === '`') {
+                        // $` (left context)
+                        return args[args.length - 1].slice(0, args[args.length - 2]);
+                    }
+                    if (dollarToken === "'") {
+                        // $' (right context)
+                        return args[args.length - 1].slice(args[args.length - 2] + args[0].length);
+                    }
+                    // Else, numbered backreference without braces
+                    dollarToken = +dollarToken; // Type-convert; drop leading zero
+                    // XRegExp behavior for `$n` and `$nn`:
+                    // - Backrefs end after 1 or 2 digits. Use `${..}` or `$<..>` for more digits.
+                    // - `$1` is an error if no capturing groups.
+                    // - `$10` is an error if less than 10 capturing groups. Use `${1}0` or `$<1>0`
+                    //   instead.
+                    // - `$01` is `$1` if at least one capturing group, else it's an error.
+                    // - `$0` (not followed by 1-9) and `$00` are the entire match.
+                    // Native behavior, for comparison:
+                    // - Backrefs end after 1 or 2 digits. Cannot reference capturing group 100+.
+                    // - `$1` is a literal `$1` if no capturing groups.
+                    // - `$10` is `$1` followed by a literal `0` if less than 10 capturing groups.
+                    // - `$01` is `$1` if at least one capturing group, else it's a literal `$01`.
+                    // - `$0` is a literal `$0`.
+                    if (!isNaN(dollarToken)) {
+                        if (dollarToken > args.length - 3) {
+                            throw new SyntaxError('Backreference to undefined group ' + $0);
+                        }
+                        return args[dollarToken] || '';
+                    }
+                    // `$` followed by an unsupported char is an error, unlike native JS
+                    throw new SyntaxError('Invalid token ' + $0);
+                }
+            });
+        }
+
+        if (isRegex) {
+            if (search.global) {
+                // Fixes IE, Safari bug (last tested IE 9, Safari 5.1)
+                search.lastIndex = 0;
+            } else {
+                // Fixes IE, Opera bug (last tested IE 9, Opera 11.6)
+                search.lastIndex = origLastIndex;
+            }
+        }
+
+        return result;
+    };
+
+    /**
+     * Fixes browser bugs in the native `String.prototype.split`. Use via `XRegExp.split`.
+     *
+     * @memberOf String
+     * @param {RegExp|String} separator Regex or string to use for separating the string.
+     * @param {Number} [limit] Maximum number of items to include in the result array.
+     * @returns {Array} Array of substrings.
+     */
+    fixed.split = function (separator, limit) {
+        if (!XRegExp.isRegExp(separator)) {
+            // Browsers handle nonregex split correctly, so use the faster native method
+            return nativ.split.apply(this, arguments);
+        }
+
+        var str = String(this);
+        var output = [];
+        var origLastIndex = separator.lastIndex;
+        var lastLastIndex = 0;
+        var lastLength = void 0;
+
+        // Values for `limit`, per the spec:
+        // If undefined: pow(2,32) - 1
+        // If 0, Infinity, or NaN: 0
+        // If positive number: limit = floor(limit); if (limit >= pow(2,32)) limit -= pow(2,32);
+        // If negative number: pow(2,32) - floor(abs(limit))
+        // If other: Type-convert, then use the above rules
+        // This line fails in very strange ways for some values of `limit` in Opera 10.5-10.63, unless
+        // Opera Dragonfly is open (go figure). It works in at least Opera 9.5-10.1 and 11+
+        limit = (limit === undefined ? -1 : limit) >>> 0;
+
+        XRegExp.forEach(str, separator, function (match) {
+            // This condition is not the same as `if (match[0].length)`
+            if (match.index + match[0].length > lastLastIndex) {
+                output.push(str.slice(lastLastIndex, match.index));
+                if (match.length > 1 && match.index < str.length) {
+                    Array.prototype.push.apply(output, match.slice(1));
+                }
+                lastLength = match[0].length;
+                lastLastIndex = match.index + lastLength;
+            }
+        });
+
+        if (lastLastIndex === str.length) {
+            if (!nativ.test.call(separator, '') || lastLength) {
+                output.push('');
+            }
+        } else {
+            output.push(str.slice(lastLastIndex));
+        }
+
+        separator.lastIndex = origLastIndex;
+        return output.length > limit ? output.slice(0, limit) : output;
+    };
+
+    // ==--------------------------==
+    // Built-in syntax/flag tokens
+    // ==--------------------------==
+
+    /*
+     * Letter escapes that natively match literal characters: `\a`, `\A`, etc. These should be
+     * SyntaxErrors but are allowed in web reality. XRegExp makes them errors for cross-browser
+     * consistency and to reserve their syntax, but lets them be superseded by addons.
+     */
+    XRegExp.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/, function (match, scope) {
+        // \B is allowed in default scope only
+        if (match[1] === 'B' && scope === defaultScope) {
+            return match[0];
+        }
+        throw new SyntaxError('Invalid escape ' + match[0]);
+    }, {
+        scope: 'all',
+        leadChar: '\\'
+    });
+
+    /*
+     * Unicode code point escape with curly braces: `\u{N..}`. `N..` is any one or more digit
+     * hexadecimal number from 0-10FFFF, and can include leading zeros. Requires the native ES6 `u` flag
+     * to support code points greater than U+FFFF. Avoids converting code points above U+FFFF to
+     * surrogate pairs (which could be done without flag `u`), since that could lead to broken behavior
+     * if you follow a `\u{N..}` token that references a code point above U+FFFF with a quantifier, or
+     * if you use the same in a character class.
+     */
+    XRegExp.addToken(/\\u{([\dA-Fa-f]+)}/, function (match, scope, flags) {
+        var code = dec(match[1]);
+        if (code > 0x10FFFF) {
+            throw new SyntaxError('Invalid Unicode code point ' + match[0]);
+        }
+        if (code <= 0xFFFF) {
+            // Converting to \uNNNN avoids needing to escape the literal character and keep it
+            // separate from preceding tokens
+            return '\\u' + pad4(hex(code));
+        }
+        // If `code` is between 0xFFFF and 0x10FFFF, require and defer to native handling
+        if (hasNativeU && flags.indexOf('u') !== -1) {
+            return match[0];
+        }
+        throw new SyntaxError('Cannot use Unicode code point above \\u{FFFF} without flag u');
+    }, {
+        scope: 'all',
+        leadChar: '\\'
+    });
+
+    /*
+     * Empty character class: `[]` or `[^]`. This fixes a critical cross-browser syntax inconsistency.
+     * Unless this is standardized (per the ES spec), regex syntax can't be accurately parsed because
+     * character class endings can't be determined.
+     */
+    XRegExp.addToken(/\[(\^?)\]/,
+    // For cross-browser compatibility with ES3, convert [] to \b\B and [^] to [\s\S].
+    // (?!) should work like \b\B, but is unreliable in some versions of Firefox
+    /* eslint-disable no-confusing-arrow */
+    function (match) {
+        return match[1] ? '[\\s\\S]' : '\\b\\B';
+    },
+    /* eslint-enable no-confusing-arrow */
+    { leadChar: '[' });
+
+    /*
+     * Comment pattern: `(?# )`. Inline comments are an alternative to the line comments allowed in
+     * free-spacing mode (flag x).
+     */
+    XRegExp.addToken(/\(\?#[^)]*\)/, getContextualTokenSeparator, { leadChar: '(' });
+
+    /*
+     * Whitespace and line comments, in free-spacing mode (aka extended mode, flag x) only.
+     */
+    XRegExp.addToken(/\s+|#[^\n]*\n?/, getContextualTokenSeparator, { flag: 'x' });
+
+    /*
+     * Dot, in dotall mode (aka singleline mode, flag s) only.
+     */
+    XRegExp.addToken(/\./, function () {
+        return '[\\s\\S]';
+    }, {
+        flag: 's',
+        leadChar: '.'
+    });
+
+    /*
+     * Named backreference: `\k<name>`. Backreference names can use the characters A-Z, a-z, 0-9, _,
+     * and $ only. Also allows numbered backreferences as `\k<n>`.
+     */
+    XRegExp.addToken(/\\k<([\w$]+)>/, function (match) {
+        // Groups with the same name is an error, else would need `lastIndexOf`
+        var index = isNaN(match[1]) ? this.captureNames.indexOf(match[1]) + 1 : +match[1];
+        var endIndex = match.index + match[0].length;
+        if (!index || index > this.captureNames.length) {
+            throw new SyntaxError('Backreference to undefined group ' + match[0]);
+        }
+        // Keep backreferences separate from subsequent literal numbers. This avoids e.g.
+        // inadvertedly changing `(?<n>)\k<n>1` to `()\11`.
+        return '\\' + index + (endIndex === match.input.length || isNaN(match.input[endIndex]) ? '' : '(?:)');
+    }, { leadChar: '\\' });
+
+    /*
+     * Numbered backreference or octal, plus any following digits: `\0`, `\11`, etc. Octals except `\0`
+     * not followed by 0-9 and backreferences to unopened capture groups throw an error. Other matches
+     * are returned unaltered. IE < 9 doesn't support backreferences above `\99` in regex syntax.
+     */
+    XRegExp.addToken(/\\(\d+)/, function (match, scope) {
+        if (!(scope === defaultScope && /^[1-9]/.test(match[1]) && +match[1] <= this.captureNames.length) && match[1] !== '0') {
+            throw new SyntaxError('Cannot use octal escape or backreference to undefined group ' + match[0]);
+        }
+        return match[0];
+    }, {
+        scope: 'all',
+        leadChar: '\\'
+    });
+
+    /*
+     * Named capturing group; match the opening delimiter only: `(?<name>`. Capture names can use the
+     * characters A-Z, a-z, 0-9, _, and $ only. Names can't be integers. Supports Python-style
+     * `(?P<name>` as an alternate syntax to avoid issues in some older versions of Opera which natively
+     * supported the Python-style syntax. Otherwise, XRegExp might treat numbered backreferences to
+     * Python-style named capture as octals.
+     */
+    XRegExp.addToken(/\(\?P?<([\w$]+)>/, function (match) {
+        // Disallow bare integers as names because named backreferences are added to match arrays
+        // and therefore numeric properties may lead to incorrect lookups
+        if (!isNaN(match[1])) {
+            throw new SyntaxError('Cannot use integer as capture name ' + match[0]);
+        }
+        if (!XRegExp.isInstalled('namespacing') && (match[1] === 'length' || match[1] === '__proto__')) {
+            throw new SyntaxError('Cannot use reserved word as capture name ' + match[0]);
+        }
+        if (this.captureNames.indexOf(match[1]) !== -1) {
+            throw new SyntaxError('Cannot use same name for multiple groups ' + match[0]);
+        }
+        this.captureNames.push(match[1]);
+        this.hasNamedCapture = true;
+        return '(';
+    }, { leadChar: '(' });
+
+    /*
+     * Capturing group; match the opening parenthesis only. Required for support of named capturing
+     * groups. Also adds explicit capture mode (flag n).
+     */
+    XRegExp.addToken(/\((?!\?)/, function (match, scope, flags) {
+        if (flags.indexOf('n') !== -1) {
+            return '(?:';
+        }
+        this.captureNames.push(null);
+        return '(';
+    }, {
+        optionalFlags: 'n',
+        leadChar: '('
+    });
+
+    exports.default = XRegExp;
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(xregexp);
+
+    var build = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+        value: true
+    });
+
+    /*!
+     * XRegExp.build 4.1.1
+     * <xregexp.com>
+     * Steven Levithan (c) 2012-present MIT License
+     */
+
+    exports.default = function (XRegExp) {
+        var REGEX_DATA = 'xregexp';
+        var subParts = /(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g;
+        var parts = XRegExp.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/, subParts], 'g', {
+            conjunction: 'or'
+        });
+
+        /**
+         * Strips a leading `^` and trailing unescaped `$`, if both are present.
+         *
+         * @private
+         * @param {String} pattern Pattern to process.
+         * @returns {String} Pattern with edge anchors removed.
+         */
+        function deanchor(pattern) {
+            // Allow any number of empty noncapturing groups before/after anchors, because regexes
+            // built/generated by XRegExp sometimes include them
+            var leadingAnchor = /^(?:\(\?:\))*\^/;
+            var trailingAnchor = /\$(?:\(\?:\))*$/;
+
+            if (leadingAnchor.test(pattern) && trailingAnchor.test(pattern) &&
+            // Ensure that the trailing `$` isn't escaped
+            trailingAnchor.test(pattern.replace(/\\[\s\S]/g, ''))) {
+                return pattern.replace(leadingAnchor, '').replace(trailingAnchor, '');
+            }
+
+            return pattern;
+        }
+
+        /**
+         * Converts the provided value to an XRegExp. Native RegExp flags are not preserved.
+         *
+         * @private
+         * @param {String|RegExp} value Value to convert.
+         * @param {Boolean} [addFlagX] Whether to apply the `x` flag in cases when `value` is not
+         *   already a regex generated by XRegExp
+         * @returns {RegExp} XRegExp object with XRegExp syntax applied.
+         */
+        function asXRegExp(value, addFlagX) {
+            var flags = addFlagX ? 'x' : '';
+            return XRegExp.isRegExp(value) ? value[REGEX_DATA] && value[REGEX_DATA].captureNames ?
+            // Don't recompile, to preserve capture names
+            value :
+            // Recompile as XRegExp
+            XRegExp(value.source, flags) :
+            // Compile string as XRegExp
+            XRegExp(value, flags);
+        }
+
+        function interpolate(substitution) {
+            return substitution instanceof RegExp ? substitution : XRegExp.escape(substitution);
+        }
+
+        function reduceToSubpatternsObject(subpatterns, interpolated, subpatternIndex) {
+            subpatterns['subpattern' + subpatternIndex] = interpolated;
+            return subpatterns;
+        }
+
+        function embedSubpatternAfter(raw, subpatternIndex, rawLiterals) {
+            var hasSubpattern = subpatternIndex < rawLiterals.length - 1;
+            return raw + (hasSubpattern ? '{{subpattern' + subpatternIndex + '}}' : '');
+        }
+
+        /**
+         * Provides tagged template literals that create regexes with XRegExp syntax and flags. The
+         * provided pattern is handled as a raw string, so backslashes don't need to be escaped.
+         *
+         * Interpolation of strings and regexes shares the features of `XRegExp.build`. Interpolated
+         * patterns are treated as atomic units when quantified, interpolated strings have their special
+         * characters escaped, a leading `^` and trailing unescaped `$` are stripped from interpolated
+         * regexes if both are present, and any backreferences within an interpolated regex are
+         * rewritten to work within the overall pattern.
+         *
+         * @memberOf XRegExp
+         * @param {String} [flags] Any combination of XRegExp flags.
+         * @returns {Function} Handler for template literals that construct regexes with XRegExp syntax.
+         * @example
+         *
+         * const h12 = /1[0-2]|0?[1-9]/;
+         * const h24 = /2[0-3]|[01][0-9]/;
+         * const hours = XRegExp.tag('x')`${h12} : | ${h24}`;
+         * const minutes = /^[0-5][0-9]$/;
+         * // Note that explicitly naming the 'minutes' group is required for named backreferences
+         * const time = XRegExp.tag('x')`^ ${hours} (?<minutes>${minutes}) $`;
+         * time.test('10:59'); // -> true
+         * XRegExp.exec('10:59', time).minutes; // -> '59'
+         */
+        XRegExp.tag = function (flags) {
+            return function (literals) {
+                for (var _len = arguments.length, substitutions = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
+                    substitutions[_key - 1] = arguments[_key];
+                }
+
+                var subpatterns = substitutions.map(interpolate).reduce(reduceToSubpatternsObject, {});
+                var pattern = literals.raw.map(embedSubpatternAfter).join('');
+                return XRegExp.build(pattern, subpatterns, flags);
+            };
+        };
+
+        /**
+         * Builds regexes using named subpatterns, for readability and pattern reuse. Backreferences in
+         * the outer pattern and provided subpatterns are automatically renumbered to work correctly.
+         * Native flags used by provided subpatterns are ignored in favor of the `flags` argument.
+         *
+         * @memberOf XRegExp
+         * @param {String} pattern XRegExp pattern using `{{name}}` for embedded subpatterns. Allows
+         *   `({{name}})` as shorthand for `(?<name>{{name}})`. Patterns cannot be embedded within
+         *   character classes.
+         * @param {Object} subs Lookup object for named subpatterns. Values can be strings or regexes. A
+         *   leading `^` and trailing unescaped `$` are stripped from subpatterns, if both are present.
+         * @param {String} [flags] Any combination of XRegExp flags.
+         * @returns {RegExp} Regex with interpolated subpatterns.
+         * @example
+         *
+         * const time = XRegExp.build('(?x)^ {{hours}} ({{minutes}}) $', {
+         *   hours: XRegExp.build('{{h12}} : | {{h24}}', {
+         *     h12: /1[0-2]|0?[1-9]/,
+         *     h24: /2[0-3]|[01][0-9]/
+         *   }, 'x'),
+         *   minutes: /^[0-5][0-9]$/
+         * });
+         * time.test('10:59'); // -> true
+         * XRegExp.exec('10:59', time).minutes; // -> '59'
+         */
+        XRegExp.build = function (pattern, subs, flags) {
+            flags = flags || '';
+            // Used with `asXRegExp` calls for `pattern` and subpatterns in `subs`, to work around how
+            // some browsers convert `RegExp('\n')` to a regex that contains the literal characters `\`
+            // and `n`. See more details at <https://github.com/slevithan/xregexp/pull/163>.
+            var addFlagX = flags.indexOf('x') !== -1;
+            var inlineFlags = /^\(\?([\w$]+)\)/.exec(pattern);
+            // Add flags within a leading mode modifier to the overall pattern's flags
+            if (inlineFlags) {
+                flags = XRegExp._clipDuplicates(flags + inlineFlags[1]);
+            }
+
+            var data = {};
+            for (var p in subs) {
+                if (subs.hasOwnProperty(p)) {
+                    // Passing to XRegExp enables extended syntax and ensures independent validity,
+                    // lest an unescaped `(`, `)`, `[`, or trailing `\` breaks the `(?:)` wrapper. For
+                    // subpatterns provided as native regexes, it dies on octals and adds the property
+                    // used to hold extended regex instance data, for simplicity.
+                    var sub = asXRegExp(subs[p], addFlagX);
+                    data[p] = {
+                        // Deanchoring allows embedding independently useful anchored regexes. If you
+                        // really need to keep your anchors, double them (i.e., `^^...$$`).
+                        pattern: deanchor(sub.source),
+                        names: sub[REGEX_DATA].captureNames || []
+                    };
+                }
+            }
+
+            // Passing to XRegExp dies on octals and ensures the outer pattern is independently valid;
+            // helps keep this simple. Named captures will be put back.
+            var patternAsRegex = asXRegExp(pattern, addFlagX);
+
+            // 'Caps' is short for 'captures'
+            var numCaps = 0;
+            var numPriorCaps = void 0;
+            var numOuterCaps = 0;
+            var outerCapsMap = [0];
+            var outerCapNames = patternAsRegex[REGEX_DATA].captureNames || [];
+            var output = patternAsRegex.source.replace(parts, function ($0, $1, $2, $3, $4) {
+                var subName = $1 || $2;
+                var capName = void 0;
+                var intro = void 0;
+                var localCapIndex = void 0;
+                // Named subpattern
+                if (subName) {
+                    if (!data.hasOwnProperty(subName)) {
+                        throw new ReferenceError('Undefined property ' + $0);
+                    }
+                    // Named subpattern was wrapped in a capturing group
+                    if ($1) {
+                        capName = outerCapNames[numOuterCaps];
+                        outerCapsMap[++numOuterCaps] = ++numCaps;
+                        // If it's a named group, preserve the name. Otherwise, use the subpattern name
+                        // as the capture name
+                        intro = '(?<' + (capName || subName) + '>';
+                    } else {
+                        intro = '(?:';
+                    }
+                    numPriorCaps = numCaps;
+                    var rewrittenSubpattern = data[subName].pattern.replace(subParts, function (match, paren, backref) {
+                        // Capturing group
+                        if (paren) {
+                            capName = data[subName].names[numCaps - numPriorCaps];
+                            ++numCaps;
+                            // If the current capture has a name, preserve the name
+                            if (capName) {
+                                return '(?<' + capName + '>';
+                            }
+                            // Backreference
+                        } else if (backref) {
+                            localCapIndex = +backref - 1;
+                            // Rewrite the backreference
+                            return data[subName].names[localCapIndex] ?
+                            // Need to preserve the backreference name in case using flag `n`
+                            '\\k<' + data[subName].names[localCapIndex] + '>' : '\\' + (+backref + numPriorCaps);
+                        }
+                        return match;
+                    });
+                    return '' + intro + rewrittenSubpattern + ')';
+                }
+                // Capturing group
+                if ($3) {
+                    capName = outerCapNames[numOuterCaps];
+                    outerCapsMap[++numOuterCaps] = ++numCaps;
+                    // If the current capture has a name, preserve the name
+                    if (capName) {
+                        return '(?<' + capName + '>';
+                    }
+                    // Backreference
+                } else if ($4) {
+                    localCapIndex = +$4 - 1;
+                    // Rewrite the backreference
+                    return outerCapNames[localCapIndex] ?
+                    // Need to preserve the backreference name in case using flag `n`
+                    '\\k<' + outerCapNames[localCapIndex] + '>' : '\\' + outerCapsMap[+$4];
+                }
+                return $0;
+            });
+
+            return XRegExp(output, flags);
+        };
+    };
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(build);
+
+    var matchrecursive = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+        value: true
+    });
+
+    /*!
+     * XRegExp.matchRecursive 4.1.1
+     * <xregexp.com>
+     * Steven Levithan (c) 2009-present MIT License
+     */
+
+    exports.default = function (XRegExp) {
+
+        /**
+         * Returns a match detail object composed of the provided values.
+         *
+         * @private
+         */
+        function row(name, value, start, end) {
+            return {
+                name: name,
+                value: value,
+                start: start,
+                end: end
+            };
+        }
+
+        /**
+         * Returns an array of match strings between outermost left and right delimiters, or an array of
+         * objects with detailed match parts and position data. An error is thrown if delimiters are
+         * unbalanced within the data.
+         *
+         * @memberOf XRegExp
+         * @param {String} str String to search.
+         * @param {String} left Left delimiter as an XRegExp pattern.
+         * @param {String} right Right delimiter as an XRegExp pattern.
+         * @param {String} [flags] Any native or XRegExp flags, used for the left and right delimiters.
+         * @param {Object} [options] Lets you specify `valueNames` and `escapeChar` options.
+         * @returns {Array} Array of matches, or an empty array.
+         * @example
+         *
+         * // Basic usage
+         * let str = '(t((e))s)t()(ing)';
+         * XRegExp.matchRecursive(str, '\\(', '\\)', 'g');
+         * // -> ['t((e))s', '', 'ing']
+         *
+         * // Extended information mode with valueNames
+         * str = 'Here is <div> <div>an</div></div> example';
+         * XRegExp.matchRecursive(str, '<div\\s*>', '</div>', 'gi', {
+         *   valueNames: ['between', 'left', 'match', 'right']
+         * });
+         * // -> [
+         * // {name: 'between', value: 'Here is ',       start: 0,  end: 8},
+         * // {name: 'left',    value: '<div>',          start: 8,  end: 13},
+         * // {name: 'match',   value: ' <div>an</div>', start: 13, end: 27},
+         * // {name: 'right',   value: '</div>',         start: 27, end: 33},
+         * // {name: 'between', value: ' example',       start: 33, end: 41}
+         * // ]
+         *
+         * // Omitting unneeded parts with null valueNames, and using escapeChar
+         * str = '...{1}.\\{{function(x,y){return {y:x}}}';
+         * XRegExp.matchRecursive(str, '{', '}', 'g', {
+         *   valueNames: ['literal', null, 'value', null],
+         *   escapeChar: '\\'
+         * });
+         * // -> [
+         * // {name: 'literal', value: '...',  start: 0, end: 3},
+         * // {name: 'value',   value: '1',    start: 4, end: 5},
+         * // {name: 'literal', value: '.\\{', start: 6, end: 9},
+         * // {name: 'value',   value: 'function(x,y){return {y:x}}', start: 10, end: 37}
+         * // ]
+         *
+         * // Sticky mode via flag y
+         * str = '<1><<<2>>><3>4<5>';
+         * XRegExp.matchRecursive(str, '<', '>', 'gy');
+         * // -> ['1', '<<2>>', '3']
+         */
+        XRegExp.matchRecursive = function (str, left, right, flags, options) {
+            flags = flags || '';
+            options = options || {};
+            var global = flags.indexOf('g') !== -1;
+            var sticky = flags.indexOf('y') !== -1;
+            // Flag `y` is controlled internally
+            var basicFlags = flags.replace(/y/g, '');
+            var escapeChar = options.escapeChar;
+            var vN = options.valueNames;
+            var output = [];
+            var openTokens = 0;
+            var delimStart = 0;
+            var delimEnd = 0;
+            var lastOuterEnd = 0;
+            var outerStart = void 0;
+            var innerStart = void 0;
+            var leftMatch = void 0;
+            var rightMatch = void 0;
+            var esc = void 0;
+            left = XRegExp(left, basicFlags);
+            right = XRegExp(right, basicFlags);
+
+            if (escapeChar) {
+                if (escapeChar.length > 1) {
+                    throw new Error('Cannot use more than one escape character');
+                }
+                escapeChar = XRegExp.escape(escapeChar);
+                // Example of concatenated `esc` regex:
+                // `escapeChar`: '%'
+                // `left`: '<'
+                // `right`: '>'
+                // Regex is: /(?:%[\S\s]|(?:(?!<|>)[^%])+)+/
+                esc = new RegExp('(?:' + escapeChar + '[\\S\\s]|(?:(?!' +
+                // Using `XRegExp.union` safely rewrites backreferences in `left` and `right`.
+                // Intentionally not passing `basicFlags` to `XRegExp.union` since any syntax
+                // transformation resulting from those flags was already applied to `left` and
+                // `right` when they were passed through the XRegExp constructor above.
+                XRegExp.union([left, right], '', { conjunction: 'or' }).source + ')[^' + escapeChar + '])+)+',
+                // Flags `gy` not needed here
+                flags.replace(/[^imu]+/g, ''));
+            }
+
+            while (true) {
+                // If using an escape character, advance to the delimiter's next starting position,
+                // skipping any escaped characters in between
+                if (escapeChar) {
+                    delimEnd += (XRegExp.exec(str, esc, delimEnd, 'sticky') || [''])[0].length;
+                }
+                leftMatch = XRegExp.exec(str, left, delimEnd);
+                rightMatch = XRegExp.exec(str, right, delimEnd);
+                // Keep the leftmost match only
+                if (leftMatch && rightMatch) {
+                    if (leftMatch.index <= rightMatch.index) {
+                        rightMatch = null;
+                    } else {
+                        leftMatch = null;
+                    }
+                }
+                // Paths (LM: leftMatch, RM: rightMatch, OT: openTokens):
+                // LM | RM | OT | Result
+                // 1  | 0  | 1  | loop
+                // 1  | 0  | 0  | loop
+                // 0  | 1  | 1  | loop
+                // 0  | 1  | 0  | throw
+                // 0  | 0  | 1  | throw
+                // 0  | 0  | 0  | break
+                // The paths above don't include the sticky mode special case. The loop ends after the
+                // first completed match if not `global`.
+                if (leftMatch || rightMatch) {
+                    delimStart = (leftMatch || rightMatch).index;
+                    delimEnd = delimStart + (leftMatch || rightMatch)[0].length;
+                } else if (!openTokens) {
+                    break;
+                }
+                if (sticky && !openTokens && delimStart > lastOuterEnd) {
+                    break;
+                }
+                if (leftMatch) {
+                    if (!openTokens) {
+                        outerStart = delimStart;
+                        innerStart = delimEnd;
+                    }
+                    ++openTokens;
+                } else if (rightMatch && openTokens) {
+                    if (! --openTokens) {
+                        if (vN) {
+                            if (vN[0] && outerStart > lastOuterEnd) {
+                                output.push(row(vN[0], str.slice(lastOuterEnd, outerStart), lastOuterEnd, outerStart));
+                            }
+                            if (vN[1]) {
+                                output.push(row(vN[1], str.slice(outerStart, innerStart), outerStart, innerStart));
+                            }
+                            if (vN[2]) {
+                                output.push(row(vN[2], str.slice(innerStart, delimStart), innerStart, delimStart));
+                            }
+                            if (vN[3]) {
+                                output.push(row(vN[3], str.slice(delimStart, delimEnd), delimStart, delimEnd));
+                            }
+                        } else {
+                            output.push(str.slice(innerStart, delimStart));
+                        }
+                        lastOuterEnd = delimEnd;
+                        if (!global) {
+                            break;
+                        }
+                    }
+                } else {
+                    throw new Error('Unbalanced delimiter found in string');
+                }
+                // If the delimiter matched an empty string, avoid an infinite loop
+                if (delimStart === delimEnd) {
+                    ++delimEnd;
+                }
+            }
+
+            if (global && !sticky && vN && vN[0] && str.length > lastOuterEnd) {
+                output.push(row(vN[0], str.slice(lastOuterEnd), lastOuterEnd, str.length));
+            }
+
+            return output;
+        };
+    };
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(matchrecursive);
+
+    var unicodeBase = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+        value: true
+    });
+
+    /*!
+     * XRegExp Unicode Base 4.1.1
+     * <xregexp.com>
+     * Steven Levithan (c) 2008-present MIT License
+     */
+
+    exports.default = function (XRegExp) {
+
+        /**
+         * Adds base support for Unicode matching:
+         * - Adds syntax `\p{..}` for matching Unicode tokens. Tokens can be inverted using `\P{..}` or
+         *   `\p{^..}`. Token names ignore case, spaces, hyphens, and underscores. You can omit the
+         *   braces for token names that are a single letter (e.g. `\pL` or `PL`).
+         * - Adds flag A (astral), which enables 21-bit Unicode support.
+         * - Adds the `XRegExp.addUnicodeData` method used by other addons to provide character data.
+         *
+         * Unicode Base relies on externally provided Unicode character data. Official addons are
+         * available to provide data for Unicode categories, scripts, blocks, and properties.
+         *
+         * @requires XRegExp
+         */
+
+        // ==--------------------------==
+        // Private stuff
+        // ==--------------------------==
+
+        // Storage for Unicode data
+        var unicode = {};
+
+        // Reuse utils
+        var dec = XRegExp._dec;
+        var hex = XRegExp._hex;
+        var pad4 = XRegExp._pad4;
+
+        // Generates a token lookup name: lowercase, with hyphens, spaces, and underscores removed
+        function normalize(name) {
+            return name.replace(/[- _]+/g, '').toLowerCase();
+        }
+
+        // Gets the decimal code of a literal code unit, \xHH, \uHHHH, or a backslash-escaped literal
+        function charCode(chr) {
+            var esc = /^\\[xu](.+)/.exec(chr);
+            return esc ? dec(esc[1]) : chr.charCodeAt(chr[0] === '\\' ? 1 : 0);
+        }
+
+        // Inverts a list of ordered BMP characters and ranges
+        function invertBmp(range) {
+            var output = '';
+            var lastEnd = -1;
+
+            XRegExp.forEach(range, /(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/, function (m) {
+                var start = charCode(m[1]);
+                if (start > lastEnd + 1) {
+                    output += '\\u' + pad4(hex(lastEnd + 1));
+                    if (start > lastEnd + 2) {
+                        output += '-\\u' + pad4(hex(start - 1));
+                    }
+                }
+                lastEnd = charCode(m[2] || m[1]);
+            });
+
+            if (lastEnd < 0xFFFF) {
+                output += '\\u' + pad4(hex(lastEnd + 1));
+                if (lastEnd < 0xFFFE) {
+                    output += '-\\uFFFF';
+                }
+            }
+
+            return output;
+        }
+
+        // Generates an inverted BMP range on first use
+        function cacheInvertedBmp(slug) {
+            var prop = 'b!';
+            return unicode[slug][prop] || (unicode[slug][prop] = invertBmp(unicode[slug].bmp));
+        }
+
+        // Combines and optionally negates BMP and astral data
+        function buildAstral(slug, isNegated) {
+            var item = unicode[slug];
+            var combined = '';
+
+            if (item.bmp && !item.isBmpLast) {
+                combined = '[' + item.bmp + ']' + (item.astral ? '|' : '');
+            }
+            if (item.astral) {
+                combined += item.astral;
+            }
+            if (item.isBmpLast && item.bmp) {
+                combined += (item.astral ? '|' : '') + '[' + item.bmp + ']';
+            }
+
+            // Astral Unicode tokens always match a code point, never a code unit
+            return isNegated ? '(?:(?!' + combined + ')(?:[\uD800-\uDBFF][\uDC00-\uDFFF]|[\0-\uFFFF]))' : '(?:' + combined + ')';
+        }
+
+        // Builds a complete astral pattern on first use
+        function cacheAstral(slug, isNegated) {
+            var prop = isNegated ? 'a!' : 'a=';
+            return unicode[slug][prop] || (unicode[slug][prop] = buildAstral(slug, isNegated));
+        }
+
+        // ==--------------------------==
+        // Core functionality
+        // ==--------------------------==
+
+        /*
+         * Add astral mode (flag A) and Unicode token syntax: `\p{..}`, `\P{..}`, `\p{^..}`, `\pC`.
+         */
+        XRegExp.addToken(
+        // Use `*` instead of `+` to avoid capturing `^` as the token name in `\p{^}`
+        /\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/, function (match, scope, flags) {
+            var ERR_DOUBLE_NEG = 'Invalid double negation ';
+            var ERR_UNKNOWN_NAME = 'Unknown Unicode token ';
+            var ERR_UNKNOWN_REF = 'Unicode token missing data ';
+            var ERR_ASTRAL_ONLY = 'Astral mode required for Unicode token ';
+            var ERR_ASTRAL_IN_CLASS = 'Astral mode does not support Unicode tokens within character classes';
+            // Negated via \P{..} or \p{^..}
+            var isNegated = match[1] === 'P' || !!match[2];
+            // Switch from BMP (0-FFFF) to astral (0-10FFFF) mode via flag A
+            var isAstralMode = flags.indexOf('A') !== -1;
+            // Token lookup name. Check `[4]` first to avoid passing `undefined` via `\p{}`
+            var slug = normalize(match[4] || match[3]);
+            // Token data object
+            var item = unicode[slug];
+
+            if (match[1] === 'P' && match[2]) {
+                throw new SyntaxError(ERR_DOUBLE_NEG + match[0]);
+            }
+            if (!unicode.hasOwnProperty(slug)) {
+                throw new SyntaxError(ERR_UNKNOWN_NAME + match[0]);
+            }
+
+            // Switch to the negated form of the referenced Unicode token
+            if (item.inverseOf) {
+                slug = normalize(item.inverseOf);
+                if (!unicode.hasOwnProperty(slug)) {
+                    throw new ReferenceError(ERR_UNKNOWN_REF + match[0] + ' -> ' + item.inverseOf);
+                }
+                item = unicode[slug];
+                isNegated = !isNegated;
+            }
+
+            if (!(item.bmp || isAstralMode)) {
+                throw new SyntaxError(ERR_ASTRAL_ONLY + match[0]);
+            }
+            if (isAstralMode) {
+                if (scope === 'class') {
+                    throw new SyntaxError(ERR_ASTRAL_IN_CLASS);
+                }
+
+                return cacheAstral(slug, isNegated);
+            }
+
+            return scope === 'class' ? isNegated ? cacheInvertedBmp(slug) : item.bmp : (isNegated ? '[^' : '[') + item.bmp + ']';
+        }, {
+            scope: 'all',
+            optionalFlags: 'A',
+            leadChar: '\\'
+        });
+
+        /**
+         * Adds to the list of Unicode tokens that XRegExp regexes can match via `\p` or `\P`.
+         *
+         * @memberOf XRegExp
+         * @param {Array} data Objects with named character ranges. Each object may have properties
+         *   `name`, `alias`, `isBmpLast`, `inverseOf`, `bmp`, and `astral`. All but `name` are
+         *   optional, although one of `bmp` or `astral` is required (unless `inverseOf` is set). If
+         *   `astral` is absent, the `bmp` data is used for BMP and astral modes. If `bmp` is absent,
+         *   the name errors in BMP mode but works in astral mode. If both `bmp` and `astral` are
+         *   provided, the `bmp` data only is used in BMP mode, and the combination of `bmp` and
+         *   `astral` data is used in astral mode. `isBmpLast` is needed when a token matches orphan
+         *   high surrogates *and* uses surrogate pairs to match astral code points. The `bmp` and
+         *   `astral` data should be a combination of literal characters and `\xHH` or `\uHHHH` escape
+         *   sequences, with hyphens to create ranges. Any regex metacharacters in the data should be
+         *   escaped, apart from range-creating hyphens. The `astral` data can additionally use
+         *   character classes and alternation, and should use surrogate pairs to represent astral code
+         *   points. `inverseOf` can be used to avoid duplicating character data if a Unicode token is
+         *   defined as the exact inverse of another token.
+         * @example
+         *
+         * // Basic use
+         * XRegExp.addUnicodeData([{
+         *   name: 'XDigit',
+         *   alias: 'Hexadecimal',
+         *   bmp: '0-9A-Fa-f'
+         * }]);
+         * XRegExp('\\p{XDigit}:\\p{Hexadecimal}+').test('0:3D'); // -> true
+         */
+        XRegExp.addUnicodeData = function (data) {
+            var ERR_NO_NAME = 'Unicode token requires name';
+            var ERR_NO_DATA = 'Unicode token has no character data ';
+            var item = void 0;
+
+            for (var i = 0; i < data.length; ++i) {
+                item = data[i];
+                if (!item.name) {
+                    throw new Error(ERR_NO_NAME);
+                }
+                if (!(item.inverseOf || item.bmp || item.astral)) {
+                    throw new Error(ERR_NO_DATA + item.name);
+                }
+                unicode[normalize(item.name)] = item;
+                if (item.alias) {
+                    unicode[normalize(item.alias)] = item;
+                }
+            }
+
+            // Reset the pattern cache used by the `XRegExp` constructor, since the same pattern and
+            // flags might now produce different results
+            XRegExp.cache.flush('patterns');
+        };
+
+        /**
+         * @ignore
+         *
+         * Return a reference to the internal Unicode definition structure for the given Unicode
+         * Property if the given name is a legal Unicode Property for use in XRegExp `\p` or `\P` regex
+         * constructs.
+         *
+         * @memberOf XRegExp
+         * @param {String} name Name by which the Unicode Property may be recognized (case-insensitive),
+         *   e.g. `'N'` or `'Number'`. The given name is matched against all registered Unicode
+         *   Properties and Property Aliases.
+         * @returns {Object} Reference to definition structure when the name matches a Unicode Property.
+         *
+         * @note
+         * For more info on Unicode Properties, see also http://unicode.org/reports/tr18/#Categories.
+         *
+         * @note
+         * This method is *not* part of the officially documented API and may change or be removed in
+         * the future. It is meant for userland code that wishes to reuse the (large) internal Unicode
+         * structures set up by XRegExp.
+         */
+        XRegExp._getUnicodeProperty = function (name) {
+            var slug = normalize(name);
+            return unicode[slug];
+        };
+    };
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(unicodeBase);
+
+    var blocks = [
+        {
+            'name': 'InAdlam',
+            'astral': '\uD83A[\uDD00-\uDD5F]'
+        },
+        {
+            'name': 'InAegean_Numbers',
+            'astral': '\uD800[\uDD00-\uDD3F]'
+        },
+        {
+            'name': 'InAhom',
+            'astral': '\uD805[\uDF00-\uDF3F]'
+        },
+        {
+            'name': 'InAlchemical_Symbols',
+            'astral': '\uD83D[\uDF00-\uDF7F]'
+        },
+        {
+            'name': 'InAlphabetic_Presentation_Forms',
+            'bmp': '\uFB00-\uFB4F'
+        },
+        {
+            'name': 'InAnatolian_Hieroglyphs',
+            'astral': '\uD811[\uDC00-\uDE7F]'
+        },
+        {
+            'name': 'InAncient_Greek_Musical_Notation',
+            'astral': '\uD834[\uDE00-\uDE4F]'
+        },
+        {
+            'name': 'InAncient_Greek_Numbers',
+            'astral': '\uD800[\uDD40-\uDD8F]'
+        },
+        {
+            'name': 'InAncient_Symbols',
+            'astral': '\uD800[\uDD90-\uDDCF]'
+        },
+        {
+            'name': 'InArabic',
+            'bmp': '\u0600-\u06FF'
+        },
+        {
+            'name': 'InArabic_Extended_A',
+            'bmp': '\u08A0-\u08FF'
+        },
+        {
+            'name': 'InArabic_Mathematical_Alphabetic_Symbols',
+            'astral': '\uD83B[\uDE00-\uDEFF]'
+        },
+        {
+            'name': 'InArabic_Presentation_Forms_A',
+            'bmp': '\uFB50-\uFDFF'
+        },
+        {
+            'name': 'InArabic_Presentation_Forms_B',
+            'bmp': '\uFE70-\uFEFF'
+        },
+        {
+            'name': 'InArabic_Supplement',
+            'bmp': '\u0750-\u077F'
+        },
+        {
+            'name': 'InArmenian',
+            'bmp': '\u0530-\u058F'
+        },
+        {
+            'name': 'InArrows',
+            'bmp': '\u2190-\u21FF'
+        },
+        {
+            'name': 'InAvestan',
+            'astral': '\uD802[\uDF00-\uDF3F]'
+        },
+        {
+            'name': 'InBalinese',
+            'bmp': '\u1B00-\u1B7F'
+        },
+        {
+            'name': 'InBamum',
+            'bmp': '\uA6A0-\uA6FF'
+        },
+        {
+            'name': 'InBamum_Supplement',
+            'astral': '\uD81A[\uDC00-\uDE3F]'
+        },
+        {
+            'name': 'InBasic_Latin',
+            'bmp': '\0-\x7F'
+        },
+        {
+            'name': 'InBassa_Vah',
+            'astral': '\uD81A[\uDED0-\uDEFF]'
+        },
+        {
+            'name': 'InBatak',
+            'bmp': '\u1BC0-\u1BFF'
+        },
+        {
+            'name': 'InBengali',
+            'bmp': '\u0980-\u09FF'
+        },
+        {
+            'name': 'InBhaiksuki',
+            'astral': '\uD807[\uDC00-\uDC6F]'
+        },
+        {
+            'name': 'InBlock_Elements',
+            'bmp': '\u2580-\u259F'
+        },
+        {
+            'name': 'InBopomofo',
+            'bmp': '\u3100-\u312F'
+        },
+        {
+            'name': 'InBopomofo_Extended',
+            'bmp': '\u31A0-\u31BF'
+        },
+        {
+            'name': 'InBox_Drawing',
+            'bmp': '\u2500-\u257F'
+        },
+        {
+            'name': 'InBrahmi',
+            'astral': '\uD804[\uDC00-\uDC7F]'
+        },
+        {
+            'name': 'InBraille_Patterns',
+            'bmp': '\u2800-\u28FF'
+        },
+        {
+            'name': 'InBuginese',
+            'bmp': '\u1A00-\u1A1F'
+        },
+        {
+            'name': 'InBuhid',
+            'bmp': '\u1740-\u175F'
+        },
+        {
+            'name': 'InByzantine_Musical_Symbols',
+            'astral': '\uD834[\uDC00-\uDCFF]'
+        },
+        {
+            'name': 'InCJK_Compatibility',
+            'bmp': '\u3300-\u33FF'
+        },
+        {
+            'name': 'InCJK_Compatibility_Forms',
+            'bmp': '\uFE30-\uFE4F'
+        },
+        {
+            'name': 'InCJK_Compatibility_Ideographs',
+            'bmp': '\uF900-\uFAFF'
+        },
+        {
+            'name': 'InCJK_Compatibility_Ideographs_Supplement',
+            'astral': '\uD87E[\uDC00-\uDE1F]'
+        },
+        {
+            'name': 'InCJK_Radicals_Supplement',
+            'bmp': '\u2E80-\u2EFF'
+        },
+        {
+            'name': 'InCJK_Strokes',
+            'bmp': '\u31C0-\u31EF'
+        },
+        {
+            'name': 'InCJK_Symbols_And_Punctuation',
+            'bmp': '\u3000-\u303F'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs',
+            'bmp': '\u4E00-\u9FFF'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs_Extension_A',
+            'bmp': '\u3400-\u4DBF'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs_Extension_B',
+            'astral': '[\uD840-\uD868][\uDC00-\uDFFF]|\uD869[\uDC00-\uDEDF]'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs_Extension_C',
+            'astral': '\uD869[\uDF00-\uDFFF]|[\uD86A-\uD86C][\uDC00-\uDFFF]|\uD86D[\uDC00-\uDF3F]'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs_Extension_D',
+            'astral': '\uD86D[\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1F]'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs_Extension_E',
+            'astral': '\uD86E[\uDC20-\uDFFF]|[\uD86F-\uD872][\uDC00-\uDFFF]|\uD873[\uDC00-\uDEAF]'
+        },
+        {
+            'name': 'InCJK_Unified_Ideographs_Extension_F',
+            'astral': '\uD873[\uDEB0-\uDFFF]|[\uD874-\uD879][\uDC00-\uDFFF]|\uD87A[\uDC00-\uDFEF]'
+        },
+        {
+            'name': 'InCarian',
+            'astral': '\uD800[\uDEA0-\uDEDF]'
+        },
+        {
+            'name': 'InCaucasian_Albanian',
+            'astral': '\uD801[\uDD30-\uDD6F]'
+        },
+        {
+            'name': 'InChakma',
+            'astral': '\uD804[\uDD00-\uDD4F]'
+        },
+        {
+            'name': 'InCham',
+            'bmp': '\uAA00-\uAA5F'
+        },
+        {
+            'name': 'InCherokee',
+            'bmp': '\u13A0-\u13FF'
+        },
+        {
+            'name': 'InCherokee_Supplement',
+            'bmp': '\uAB70-\uABBF'
+        },
+        {
+            'name': 'InCombining_Diacritical_Marks',
+            'bmp': '\u0300-\u036F'
+        },
+        {
+            'name': 'InCombining_Diacritical_Marks_Extended',
+            'bmp': '\u1AB0-\u1AFF'
+        },
+        {
+            'name': 'InCombining_Diacritical_Marks_For_Symbols',
+            'bmp': '\u20D0-\u20FF'
+        },
+        {
+            'name': 'InCombining_Diacritical_Marks_Supplement',
+            'bmp': '\u1DC0-\u1DFF'
+        },
+        {
+            'name': 'InCombining_Half_Marks',
+            'bmp': '\uFE20-\uFE2F'
+        },
+        {
+            'name': 'InCommon_Indic_Number_Forms',
+            'bmp': '\uA830-\uA83F'
+        },
+        {
+            'name': 'InControl_Pictures',
+            'bmp': '\u2400-\u243F'
+        },
+        {
+            'name': 'InCoptic',
+            'bmp': '\u2C80-\u2CFF'
+        },
+        {
+            'name': 'InCoptic_Epact_Numbers',
+            'astral': '\uD800[\uDEE0-\uDEFF]'
+        },
+        {
+            'name': 'InCounting_Rod_Numerals',
+            'astral': '\uD834[\uDF60-\uDF7F]'
+        },
+        {
+            'name': 'InCuneiform',
+            'astral': '\uD808[\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'InCuneiform_Numbers_And_Punctuation',
+            'astral': '\uD809[\uDC00-\uDC7F]'
+        },
+        {
+            'name': 'InCurrency_Symbols',
+            'bmp': '\u20A0-\u20CF'
+        },
+        {
+            'name': 'InCypriot_Syllabary',
+            'astral': '\uD802[\uDC00-\uDC3F]'
+        },
+        {
+            'name': 'InCyrillic',
+            'bmp': '\u0400-\u04FF'
+        },
+        {
+            'name': 'InCyrillic_Extended_A',
+            'bmp': '\u2DE0-\u2DFF'
+        },
+        {
+            'name': 'InCyrillic_Extended_B',
+            'bmp': '\uA640-\uA69F'
+        },
+        {
+            'name': 'InCyrillic_Extended_C',
+            'bmp': '\u1C80-\u1C8F'
+        },
+        {
+            'name': 'InCyrillic_Supplement',
+            'bmp': '\u0500-\u052F'
+        },
+        {
+            'name': 'InDeseret',
+            'astral': '\uD801[\uDC00-\uDC4F]'
+        },
+        {
+            'name': 'InDevanagari',
+            'bmp': '\u0900-\u097F'
+        },
+        {
+            'name': 'InDevanagari_Extended',
+            'bmp': '\uA8E0-\uA8FF'
+        },
+        {
+            'name': 'InDingbats',
+            'bmp': '\u2700-\u27BF'
+        },
+        {
+            'name': 'InDomino_Tiles',
+            'astral': '\uD83C[\uDC30-\uDC9F]'
+        },
+        {
+            'name': 'InDuployan',
+            'astral': '\uD82F[\uDC00-\uDC9F]'
+        },
+        {
+            'name': 'InEarly_Dynastic_Cuneiform',
+            'astral': '\uD809[\uDC80-\uDD4F]'
+        },
+        {
+            'name': 'InEgyptian_Hieroglyphs',
+            'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2F]'
+        },
+        {
+            'name': 'InElbasan',
+            'astral': '\uD801[\uDD00-\uDD2F]'
+        },
+        {
+            'name': 'InEmoticons',
+            'astral': '\uD83D[\uDE00-\uDE4F]'
+        },
+        {
+            'name': 'InEnclosed_Alphanumeric_Supplement',
+            'astral': '\uD83C[\uDD00-\uDDFF]'
+        },
+        {
+            'name': 'InEnclosed_Alphanumerics',
+            'bmp': '\u2460-\u24FF'
+        },
+        {
+            'name': 'InEnclosed_CJK_Letters_And_Months',
+            'bmp': '\u3200-\u32FF'
+        },
+        {
+            'name': 'InEnclosed_Ideographic_Supplement',
+            'astral': '\uD83C[\uDE00-\uDEFF]'
+        },
+        {
+            'name': 'InEthiopic',
+            'bmp': '\u1200-\u137F'
+        },
+        {
+            'name': 'InEthiopic_Extended',
+            'bmp': '\u2D80-\u2DDF'
+        },
+        {
+            'name': 'InEthiopic_Extended_A',
+            'bmp': '\uAB00-\uAB2F'
+        },
+        {
+            'name': 'InEthiopic_Supplement',
+            'bmp': '\u1380-\u139F'
+        },
+        {
+            'name': 'InGeneral_Punctuation',
+            'bmp': '\u2000-\u206F'
+        },
+        {
+            'name': 'InGeometric_Shapes',
+            'bmp': '\u25A0-\u25FF'
+        },
+        {
+            'name': 'InGeometric_Shapes_Extended',
+            'astral': '\uD83D[\uDF80-\uDFFF]'
+        },
+        {
+            'name': 'InGeorgian',
+            'bmp': '\u10A0-\u10FF'
+        },
+        {
+            'name': 'InGeorgian_Supplement',
+            'bmp': '\u2D00-\u2D2F'
+        },
+        {
+            'name': 'InGlagolitic',
+            'bmp': '\u2C00-\u2C5F'
+        },
+        {
+            'name': 'InGlagolitic_Supplement',
+            'astral': '\uD838[\uDC00-\uDC2F]'
+        },
+        {
+            'name': 'InGothic',
+            'astral': '\uD800[\uDF30-\uDF4F]'
+        },
+        {
+            'name': 'InGrantha',
+            'astral': '\uD804[\uDF00-\uDF7F]'
+        },
+        {
+            'name': 'InGreek_And_Coptic',
+            'bmp': '\u0370-\u03FF'
+        },
+        {
+            'name': 'InGreek_Extended',
+            'bmp': '\u1F00-\u1FFF'
+        },
+        {
+            'name': 'InGujarati',
+            'bmp': '\u0A80-\u0AFF'
+        },
+        {
+            'name': 'InGurmukhi',
+            'bmp': '\u0A00-\u0A7F'
+        },
+        {
+            'name': 'InHalfwidth_And_Fullwidth_Forms',
+            'bmp': '\uFF00-\uFFEF'
+        },
+        {
+            'name': 'InHangul_Compatibility_Jamo',
+            'bmp': '\u3130-\u318F'
+        },
+        {
+            'name': 'InHangul_Jamo',
+            'bmp': '\u1100-\u11FF'
+        },
+        {
+            'name': 'InHangul_Jamo_Extended_A',
+            'bmp': '\uA960-\uA97F'
+        },
+        {
+            'name': 'InHangul_Jamo_Extended_B',
+            'bmp': '\uD7B0-\uD7FF'
+        },
+        {
+            'name': 'InHangul_Syllables',
+            'bmp': '\uAC00-\uD7AF'
+        },
+        {
+            'name': 'InHanunoo',
+            'bmp': '\u1720-\u173F'
+        },
+        {
+            'name': 'InHatran',
+            'astral': '\uD802[\uDCE0-\uDCFF]'
+        },
+        {
+            'name': 'InHebrew',
+            'bmp': '\u0590-\u05FF'
+        },
+        {
+            'name': 'InHigh_Private_Use_Surrogates',
+            'bmp': '\uDB80-\uDBFF'
+        },
+        {
+            'name': 'InHigh_Surrogates',
+            'bmp': '\uD800-\uDB7F'
+        },
+        {
+            'name': 'InHiragana',
+            'bmp': '\u3040-\u309F'
+        },
+        {
+            'name': 'InIPA_Extensions',
+            'bmp': '\u0250-\u02AF'
+        },
+        {
+            'name': 'InIdeographic_Description_Characters',
+            'bmp': '\u2FF0-\u2FFF'
+        },
+        {
+            'name': 'InIdeographic_Symbols_And_Punctuation',
+            'astral': '\uD81B[\uDFE0-\uDFFF]'
+        },
+        {
+            'name': 'InImperial_Aramaic',
+            'astral': '\uD802[\uDC40-\uDC5F]'
+        },
+        {
+            'name': 'InInscriptional_Pahlavi',
+            'astral': '\uD802[\uDF60-\uDF7F]'
+        },
+        {
+            'name': 'InInscriptional_Parthian',
+            'astral': '\uD802[\uDF40-\uDF5F]'
+        },
+        {
+            'name': 'InJavanese',
+            'bmp': '\uA980-\uA9DF'
+        },
+        {
+            'name': 'InKaithi',
+            'astral': '\uD804[\uDC80-\uDCCF]'
+        },
+        {
+            'name': 'InKana_Extended_A',
+            'astral': '\uD82C[\uDD00-\uDD2F]'
+        },
+        {
+            'name': 'InKana_Supplement',
+            'astral': '\uD82C[\uDC00-\uDCFF]'
+        },
+        {
+            'name': 'InKanbun',
+            'bmp': '\u3190-\u319F'
+        },
+        {
+            'name': 'InKangxi_Radicals',
+            'bmp': '\u2F00-\u2FDF'
+        },
+        {
+            'name': 'InKannada',
+            'bmp': '\u0C80-\u0CFF'
+        },
+        {
+            'name': 'InKatakana',
+            'bmp': '\u30A0-\u30FF'
+        },
+        {
+            'name': 'InKatakana_Phonetic_Extensions',
+            'bmp': '\u31F0-\u31FF'
+        },
+        {
+            'name': 'InKayah_Li',
+            'bmp': '\uA900-\uA92F'
+        },
+        {
+            'name': 'InKharoshthi',
+            'astral': '\uD802[\uDE00-\uDE5F]'
+        },
+        {
+            'name': 'InKhmer',
+            'bmp': '\u1780-\u17FF'
+        },
+        {
+            'name': 'InKhmer_Symbols',
+            'bmp': '\u19E0-\u19FF'
+        },
+        {
+            'name': 'InKhojki',
+            'astral': '\uD804[\uDE00-\uDE4F]'
+        },
+        {
+            'name': 'InKhudawadi',
+            'astral': '\uD804[\uDEB0-\uDEFF]'
+        },
+        {
+            'name': 'InLao',
+            'bmp': '\u0E80-\u0EFF'
+        },
+        {
+            'name': 'InLatin_1_Supplement',
+            'bmp': '\x80-\xFF'
+        },
+        {
+            'name': 'InLatin_Extended_A',
+            'bmp': '\u0100-\u017F'
+        },
+        {
+            'name': 'InLatin_Extended_Additional',
+            'bmp': '\u1E00-\u1EFF'
+        },
+        {
+            'name': 'InLatin_Extended_B',
+            'bmp': '\u0180-\u024F'
+        },
+        {
+            'name': 'InLatin_Extended_C',
+            'bmp': '\u2C60-\u2C7F'
+        },
+        {
+            'name': 'InLatin_Extended_D',
+            'bmp': '\uA720-\uA7FF'
+        },
+        {
+            'name': 'InLatin_Extended_E',
+            'bmp': '\uAB30-\uAB6F'
+        },
+        {
+            'name': 'InLepcha',
+            'bmp': '\u1C00-\u1C4F'
+        },
+        {
+            'name': 'InLetterlike_Symbols',
+            'bmp': '\u2100-\u214F'
+        },
+        {
+            'name': 'InLimbu',
+            'bmp': '\u1900-\u194F'
+        },
+        {
+            'name': 'InLinear_A',
+            'astral': '\uD801[\uDE00-\uDF7F]'
+        },
+        {
+            'name': 'InLinear_B_Ideograms',
+            'astral': '\uD800[\uDC80-\uDCFF]'
+        },
+        {
+            'name': 'InLinear_B_Syllabary',
+            'astral': '\uD800[\uDC00-\uDC7F]'
+        },
+        {
+            'name': 'InLisu',
+            'bmp': '\uA4D0-\uA4FF'
+        },
+        {
+            'name': 'InLow_Surrogates',
+            'bmp': '\uDC00-\uDFFF'
+        },
+        {
+            'name': 'InLycian',
+            'astral': '\uD800[\uDE80-\uDE9F]'
+        },
+        {
+            'name': 'InLydian',
+            'astral': '\uD802[\uDD20-\uDD3F]'
+        },
+        {
+            'name': 'InMahajani',
+            'astral': '\uD804[\uDD50-\uDD7F]'
+        },
+        {
+            'name': 'InMahjong_Tiles',
+            'astral': '\uD83C[\uDC00-\uDC2F]'
+        },
+        {
+            'name': 'InMalayalam',
+            'bmp': '\u0D00-\u0D7F'
+        },
+        {
+            'name': 'InMandaic',
+            'bmp': '\u0840-\u085F'
+        },
+        {
+            'name': 'InManichaean',
+            'astral': '\uD802[\uDEC0-\uDEFF]'
+        },
+        {
+            'name': 'InMarchen',
+            'astral': '\uD807[\uDC70-\uDCBF]'
+        },
+        {
+            'name': 'InMasaram_Gondi',
+            'astral': '\uD807[\uDD00-\uDD5F]'
+        },
+        {
+            'name': 'InMathematical_Alphanumeric_Symbols',
+            'astral': '\uD835[\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'InMathematical_Operators',
+            'bmp': '\u2200-\u22FF'
+        },
+        {
+            'name': 'InMeetei_Mayek',
+            'bmp': '\uABC0-\uABFF'
+        },
+        {
+            'name': 'InMeetei_Mayek_Extensions',
+            'bmp': '\uAAE0-\uAAFF'
+        },
+        {
+            'name': 'InMende_Kikakui',
+            'astral': '\uD83A[\uDC00-\uDCDF]'
+        },
+        {
+            'name': 'InMeroitic_Cursive',
+            'astral': '\uD802[\uDDA0-\uDDFF]'
+        },
+        {
+            'name': 'InMeroitic_Hieroglyphs',
+            'astral': '\uD802[\uDD80-\uDD9F]'
+        },
+        {
+            'name': 'InMiao',
+            'astral': '\uD81B[\uDF00-\uDF9F]'
+        },
+        {
+            'name': 'InMiscellaneous_Mathematical_Symbols_A',
+            'bmp': '\u27C0-\u27EF'
+        },
+        {
+            'name': 'InMiscellaneous_Mathematical_Symbols_B',
+            'bmp': '\u2980-\u29FF'
+        },
+        {
+            'name': 'InMiscellaneous_Symbols',
+            'bmp': '\u2600-\u26FF'
+        },
+        {
+            'name': 'InMiscellaneous_Symbols_And_Arrows',
+            'bmp': '\u2B00-\u2BFF'
+        },
+        {
+            'name': 'InMiscellaneous_Symbols_And_Pictographs',
+            'astral': '\uD83C[\uDF00-\uDFFF]|\uD83D[\uDC00-\uDDFF]'
+        },
+        {
+            'name': 'InMiscellaneous_Technical',
+            'bmp': '\u2300-\u23FF'
+        },
+        {
+            'name': 'InModi',
+            'astral': '\uD805[\uDE00-\uDE5F]'
+        },
+        {
+            'name': 'InModifier_Tone_Letters',
+            'bmp': '\uA700-\uA71F'
+        },
+        {
+            'name': 'InMongolian',
+            'bmp': '\u1800-\u18AF'
+        },
+        {
+            'name': 'InMongolian_Supplement',
+            'astral': '\uD805[\uDE60-\uDE7F]'
+        },
+        {
+            'name': 'InMro',
+            'astral': '\uD81A[\uDE40-\uDE6F]'
+        },
+        {
+            'name': 'InMultani',
+            'astral': '\uD804[\uDE80-\uDEAF]'
+        },
+        {
+            'name': 'InMusical_Symbols',
+            'astral': '\uD834[\uDD00-\uDDFF]'
+        },
+        {
+            'name': 'InMyanmar',
+            'bmp': '\u1000-\u109F'
+        },
+        {
+            'name': 'InMyanmar_Extended_A',
+            'bmp': '\uAA60-\uAA7F'
+        },
+        {
+            'name': 'InMyanmar_Extended_B',
+            'bmp': '\uA9E0-\uA9FF'
+        },
+        {
+            'name': 'InNKo',
+            'bmp': '\u07C0-\u07FF'
+        },
+        {
+            'name': 'InNabataean',
+            'astral': '\uD802[\uDC80-\uDCAF]'
+        },
+        {
+            'name': 'InNew_Tai_Lue',
+            'bmp': '\u1980-\u19DF'
+        },
+        {
+            'name': 'InNewa',
+            'astral': '\uD805[\uDC00-\uDC7F]'
+        },
+        {
+            'name': 'InNumber_Forms',
+            'bmp': '\u2150-\u218F'
+        },
+        {
+            'name': 'InNushu',
+            'astral': '\uD82C[\uDD70-\uDEFF]'
+        },
+        {
+            'name': 'InOgham',
+            'bmp': '\u1680-\u169F'
+        },
+        {
+            'name': 'InOl_Chiki',
+            'bmp': '\u1C50-\u1C7F'
+        },
+        {
+            'name': 'InOld_Hungarian',
+            'astral': '\uD803[\uDC80-\uDCFF]'
+        },
+        {
+            'name': 'InOld_Italic',
+            'astral': '\uD800[\uDF00-\uDF2F]'
+        },
+        {
+            'name': 'InOld_North_Arabian',
+            'astral': '\uD802[\uDE80-\uDE9F]'
+        },
+        {
+            'name': 'InOld_Permic',
+            'astral': '\uD800[\uDF50-\uDF7F]'
+        },
+        {
+            'name': 'InOld_Persian',
+            'astral': '\uD800[\uDFA0-\uDFDF]'
+        },
+        {
+            'name': 'InOld_South_Arabian',
+            'astral': '\uD802[\uDE60-\uDE7F]'
+        },
+        {
+            'name': 'InOld_Turkic',
+            'astral': '\uD803[\uDC00-\uDC4F]'
+        },
+        {
+            'name': 'InOptical_Character_Recognition',
+            'bmp': '\u2440-\u245F'
+        },
+        {
+            'name': 'InOriya',
+            'bmp': '\u0B00-\u0B7F'
+        },
+        {
+            'name': 'InOrnamental_Dingbats',
+            'astral': '\uD83D[\uDE50-\uDE7F]'
+        },
+        {
+            'name': 'InOsage',
+            'astral': '\uD801[\uDCB0-\uDCFF]'
+        },
+        {
+            'name': 'InOsmanya',
+            'astral': '\uD801[\uDC80-\uDCAF]'
+        },
+        {
+            'name': 'InPahawh_Hmong',
+            'astral': '\uD81A[\uDF00-\uDF8F]'
+        },
+        {
+            'name': 'InPalmyrene',
+            'astral': '\uD802[\uDC60-\uDC7F]'
+        },
+        {
+            'name': 'InPau_Cin_Hau',
+            'astral': '\uD806[\uDEC0-\uDEFF]'
+        },
+        {
+            'name': 'InPhags_Pa',
+            'bmp': '\uA840-\uA87F'
+        },
+        {
+            'name': 'InPhaistos_Disc',
+            'astral': '\uD800[\uDDD0-\uDDFF]'
+        },
+        {
+            'name': 'InPhoenician',
+            'astral': '\uD802[\uDD00-\uDD1F]'
+        },
+        {
+            'name': 'InPhonetic_Extensions',
+            'bmp': '\u1D00-\u1D7F'
+        },
+        {
+            'name': 'InPhonetic_Extensions_Supplement',
+            'bmp': '\u1D80-\u1DBF'
+        },
+        {
+            'name': 'InPlaying_Cards',
+            'astral': '\uD83C[\uDCA0-\uDCFF]'
+        },
+        {
+            'name': 'InPrivate_Use_Area',
+            'bmp': '\uE000-\uF8FF'
+        },
+        {
+            'name': 'InPsalter_Pahlavi',
+            'astral': '\uD802[\uDF80-\uDFAF]'
+        },
+        {
+            'name': 'InRejang',
+            'bmp': '\uA930-\uA95F'
+        },
+        {
+            'name': 'InRumi_Numeral_Symbols',
+            'astral': '\uD803[\uDE60-\uDE7F]'
+        },
+        {
+            'name': 'InRunic',
+            'bmp': '\u16A0-\u16FF'
+        },
+        {
+            'name': 'InSamaritan',
+            'bmp': '\u0800-\u083F'
+        },
+        {
+            'name': 'InSaurashtra',
+            'bmp': '\uA880-\uA8DF'
+        },
+        {
+            'name': 'InSharada',
+            'astral': '\uD804[\uDD80-\uDDDF]'
+        },
+        {
+            'name': 'InShavian',
+            'astral': '\uD801[\uDC50-\uDC7F]'
+        },
+        {
+            'name': 'InShorthand_Format_Controls',
+            'astral': '\uD82F[\uDCA0-\uDCAF]'
+        },
+        {
+            'name': 'InSiddham',
+            'astral': '\uD805[\uDD80-\uDDFF]'
+        },
+        {
+            'name': 'InSinhala',
+            'bmp': '\u0D80-\u0DFF'
+        },
+        {
+            'name': 'InSinhala_Archaic_Numbers',
+            'astral': '\uD804[\uDDE0-\uDDFF]'
+        },
+        {
+            'name': 'InSmall_Form_Variants',
+            'bmp': '\uFE50-\uFE6F'
+        },
+        {
+            'name': 'InSora_Sompeng',
+            'astral': '\uD804[\uDCD0-\uDCFF]'
+        },
+        {
+            'name': 'InSoyombo',
+            'astral': '\uD806[\uDE50-\uDEAF]'
+        },
+        {
+            'name': 'InSpacing_Modifier_Letters',
+            'bmp': '\u02B0-\u02FF'
+        },
+        {
+            'name': 'InSpecials',
+            'bmp': '\uFFF0-\uFFFF'
+        },
+        {
+            'name': 'InSundanese',
+            'bmp': '\u1B80-\u1BBF'
+        },
+        {
+            'name': 'InSundanese_Supplement',
+            'bmp': '\u1CC0-\u1CCF'
+        },
+        {
+            'name': 'InSuperscripts_And_Subscripts',
+            'bmp': '\u2070-\u209F'
+        },
+        {
+            'name': 'InSupplemental_Arrows_A',
+            'bmp': '\u27F0-\u27FF'
+        },
+        {
+            'name': 'InSupplemental_Arrows_B',
+            'bmp': '\u2900-\u297F'
+        },
+        {
+            'name': 'InSupplemental_Arrows_C',
+            'astral': '\uD83E[\uDC00-\uDCFF]'
+        },
+        {
+            'name': 'InSupplemental_Mathematical_Operators',
+            'bmp': '\u2A00-\u2AFF'
+        },
+        {
+            'name': 'InSupplemental_Punctuation',
+            'bmp': '\u2E00-\u2E7F'
+        },
+        {
+            'name': 'InSupplemental_Symbols_And_Pictographs',
+            'astral': '\uD83E[\uDD00-\uDDFF]'
+        },
+        {
+            'name': 'InSupplementary_Private_Use_Area_A',
+            'astral': '[\uDB80-\uDBBF][\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'InSupplementary_Private_Use_Area_B',
+            'astral': '[\uDBC0-\uDBFF][\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'InSutton_SignWriting',
+            'astral': '\uD836[\uDC00-\uDEAF]'
+        },
+        {
+            'name': 'InSyloti_Nagri',
+            'bmp': '\uA800-\uA82F'
+        },
+        {
+            'name': 'InSyriac',
+            'bmp': '\u0700-\u074F'
+        },
+        {
+            'name': 'InSyriac_Supplement',
+            'bmp': '\u0860-\u086F'
+        },
+        {
+            'name': 'InTagalog',
+            'bmp': '\u1700-\u171F'
+        },
+        {
+            'name': 'InTagbanwa',
+            'bmp': '\u1760-\u177F'
+        },
+        {
+            'name': 'InTags',
+            'astral': '\uDB40[\uDC00-\uDC7F]'
+        },
+        {
+            'name': 'InTai_Le',
+            'bmp': '\u1950-\u197F'
+        },
+        {
+            'name': 'InTai_Tham',
+            'bmp': '\u1A20-\u1AAF'
+        },
+        {
+            'name': 'InTai_Viet',
+            'bmp': '\uAA80-\uAADF'
+        },
+        {
+            'name': 'InTai_Xuan_Jing_Symbols',
+            'astral': '\uD834[\uDF00-\uDF5F]'
+        },
+        {
+            'name': 'InTakri',
+            'astral': '\uD805[\uDE80-\uDECF]'
+        },
+        {
+            'name': 'InTamil',
+            'bmp': '\u0B80-\u0BFF'
+        },
+        {
+            'name': 'InTangut',
+            'astral': '[\uD81C-\uD821][\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'InTangut_Components',
+            'astral': '\uD822[\uDC00-\uDEFF]'
+        },
+        {
+            'name': 'InTelugu',
+            'bmp': '\u0C00-\u0C7F'
+        },
+        {
+            'name': 'InThaana',
+            'bmp': '\u0780-\u07BF'
+        },
+        {
+            'name': 'InThai',
+            'bmp': '\u0E00-\u0E7F'
+        },
+        {
+            'name': 'InTibetan',
+            'bmp': '\u0F00-\u0FFF'
+        },
+        {
+            'name': 'InTifinagh',
+            'bmp': '\u2D30-\u2D7F'
+        },
+        {
+            'name': 'InTirhuta',
+            'astral': '\uD805[\uDC80-\uDCDF]'
+        },
+        {
+            'name': 'InTransport_And_Map_Symbols',
+            'astral': '\uD83D[\uDE80-\uDEFF]'
+        },
+        {
+            'name': 'InUgaritic',
+            'astral': '\uD800[\uDF80-\uDF9F]'
+        },
+        {
+            'name': 'InUnified_Canadian_Aboriginal_Syllabics',
+            'bmp': '\u1400-\u167F'
+        },
+        {
+            'name': 'InUnified_Canadian_Aboriginal_Syllabics_Extended',
+            'bmp': '\u18B0-\u18FF'
+        },
+        {
+            'name': 'InVai',
+            'bmp': '\uA500-\uA63F'
+        },
+        {
+            'name': 'InVariation_Selectors',
+            'bmp': '\uFE00-\uFE0F'
+        },
+        {
+            'name': 'InVariation_Selectors_Supplement',
+            'astral': '\uDB40[\uDD00-\uDDEF]'
+        },
+        {
+            'name': 'InVedic_Extensions',
+            'bmp': '\u1CD0-\u1CFF'
+        },
+        {
+            'name': 'InVertical_Forms',
+            'bmp': '\uFE10-\uFE1F'
+        },
+        {
+            'name': 'InWarang_Citi',
+            'astral': '\uD806[\uDCA0-\uDCFF]'
+        },
+        {
+            'name': 'InYi_Radicals',
+            'bmp': '\uA490-\uA4CF'
+        },
+        {
+            'name': 'InYi_Syllables',
+            'bmp': '\uA000-\uA48F'
+        },
+        {
+            'name': 'InYijing_Hexagram_Symbols',
+            'bmp': '\u4DC0-\u4DFF'
+        },
+        {
+            'name': 'InZanabazar_Square',
+            'astral': '\uD806[\uDE00-\uDE4F]'
+        }
+    ];
+
+    var unicodeBlocks = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+      value: true
+    });
+
+
+
+    var _blocks2 = _interopRequireDefault(blocks);
+
+    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+    exports.default = function (XRegExp) {
+
+      /**
+       * Adds support for all Unicode blocks. Block names use the prefix 'In'. E.g.,
+       * `\p{InBasicLatin}`. Token names are case insensitive, and any spaces, hyphens, and
+       * underscores are ignored.
+       *
+       * Uses Unicode 10.0.0.
+       *
+       * @requires XRegExp, Unicode Base
+       */
+
+      if (!XRegExp.addUnicodeData) {
+        throw new ReferenceError('Unicode Base must be loaded before Unicode Blocks');
+      }
+
+      XRegExp.addUnicodeData(_blocks2.default);
+    }; /*!
+        * XRegExp Unicode Blocks 4.1.1
+        * <xregexp.com>
+        * Steven Levithan (c) 2010-present MIT License
+        * Unicode data by Mathias Bynens <mathiasbynens.be>
+        */
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(unicodeBlocks);
+
+    var categories = [
+        {
+            'name': 'C',
+            'alias': 'Other',
+            'isBmpLast': true,
+            'bmp': '\0-\x1F\x7F-\x9F\xAD\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u0605\u061C\u061D\u06DD\u070E\u070F\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08BE-\u08D3\u08E2\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FE-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180E\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CFA-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u200B-\u200F\u202A-\u202E\u2060-\u206F\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD3-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E4A-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312F\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FEB-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uF8FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD-\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFFB\uFFFE\uFFFF',
+            'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCBD\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDDFF\uDE48-\uDE4F\uDE84\uDE85\uDE9D\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDBFF][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE2-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA0-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDD73-\uDD7A\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED5-\uDEDF\uDEED-\uDEEF\uDEF9-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD0F\uDD3F\uDD4D-\uDD4F\uDD6C-\uDD7F\uDD98-\uDDBF\uDDC1-\uDDCF\uDDE7-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00-\uDCFF\uDDF0-\uDFFF]'
+        },
+        {
+            'name': 'Cc',
+            'alias': 'Control',
+            'bmp': '\0-\x1F\x7F-\x9F'
+        },
+        {
+            'name': 'Cf',
+            'alias': 'Format',
+            'bmp': '\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB',
+            'astral': '\uD804\uDCBD|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]'
+        },
+        {
+            'name': 'Cn',
+            'alias': 'Unassigned',
+            'bmp': '\u0378\u0379\u0380-\u0383\u038B\u038D\u03A2\u0530\u0557\u0558\u0560\u0588\u058B\u058C\u0590\u05C8-\u05CF\u05EB-\u05EF\u05F5-\u05FF\u061D\u070E\u074B\u074C\u07B2-\u07BF\u07FB-\u07FF\u082E\u082F\u083F\u085C\u085D\u085F\u086B-\u089F\u08B5\u08BE-\u08D3\u0984\u098D\u098E\u0991\u0992\u09A9\u09B1\u09B3-\u09B5\u09BA\u09BB\u09C5\u09C6\u09C9\u09CA\u09CF-\u09D6\u09D8-\u09DB\u09DE\u09E4\u09E5\u09FE-\u0A00\u0A04\u0A0B-\u0A0E\u0A11\u0A12\u0A29\u0A31\u0A34\u0A37\u0A3A\u0A3B\u0A3D\u0A43-\u0A46\u0A49\u0A4A\u0A4E-\u0A50\u0A52-\u0A58\u0A5D\u0A5F-\u0A65\u0A76-\u0A80\u0A84\u0A8E\u0A92\u0AA9\u0AB1\u0AB4\u0ABA\u0ABB\u0AC6\u0ACA\u0ACE\u0ACF\u0AD1-\u0ADF\u0AE4\u0AE5\u0AF2-\u0AF8\u0B00\u0B04\u0B0D\u0B0E\u0B11\u0B12\u0B29\u0B31\u0B34\u0B3A\u0B3B\u0B45\u0B46\u0B49\u0B4A\u0B4E-\u0B55\u0B58-\u0B5B\u0B5E\u0B64\u0B65\u0B78-\u0B81\u0B84\u0B8B-\u0B8D\u0B91\u0B96-\u0B98\u0B9B\u0B9D\u0BA0-\u0BA2\u0BA5-\u0BA7\u0BAB-\u0BAD\u0BBA-\u0BBD\u0BC3-\u0BC5\u0BC9\u0BCE\u0BCF\u0BD1-\u0BD6\u0BD8-\u0BE5\u0BFB-\u0BFF\u0C04\u0C0D\u0C11\u0C29\u0C3A-\u0C3C\u0C45\u0C49\u0C4E-\u0C54\u0C57\u0C5B-\u0C5F\u0C64\u0C65\u0C70-\u0C77\u0C84\u0C8D\u0C91\u0CA9\u0CB4\u0CBA\u0CBB\u0CC5\u0CC9\u0CCE-\u0CD4\u0CD7-\u0CDD\u0CDF\u0CE4\u0CE5\u0CF0\u0CF3-\u0CFF\u0D04\u0D0D\u0D11\u0D45\u0D49\u0D50-\u0D53\u0D64\u0D65\u0D80\u0D81\u0D84\u0D97-\u0D99\u0DB2\u0DBC\u0DBE\u0DBF\u0DC7-\u0DC9\u0DCB-\u0DCE\u0DD5\u0DD7\u0DE0-\u0DE5\u0DF0\u0DF1\u0DF5-\u0E00\u0E3B-\u0E3E\u0E5C-\u0E80\u0E83\u0E85\u0E86\u0E89\u0E8B\u0E8C\u0E8E-\u0E93\u0E98\u0EA0\u0EA4\u0EA6\u0EA8\u0EA9\u0EAC\u0EBA\u0EBE\u0EBF\u0EC5\u0EC7\u0ECE\u0ECF\u0EDA\u0EDB\u0EE0-\u0EFF\u0F48\u0F6D-\u0F70\u0F98\u0FBD\u0FCD\u0FDB-\u0FFF\u10C6\u10C8-\u10CC\u10CE\u10CF\u1249\u124E\u124F\u1257\u1259\u125E\u125F\u1289\u128E\u128F\u12B1\u12B6\u12B7\u12BF\u12C1\u12C6\u12C7\u12D7\u1311\u1316\u1317\u135B\u135C\u137D-\u137F\u139A-\u139F\u13F6\u13F7\u13FE\u13FF\u169D-\u169F\u16F9-\u16FF\u170D\u1715-\u171F\u1737-\u173F\u1754-\u175F\u176D\u1771\u1774-\u177F\u17DE\u17DF\u17EA-\u17EF\u17FA-\u17FF\u180F\u181A-\u181F\u1878-\u187F\u18AB-\u18AF\u18F6-\u18FF\u191F\u192C-\u192F\u193C-\u193F\u1941-\u1943\u196E\u196F\u1975-\u197F\u19AC-\u19AF\u19CA-\u19CF\u19DB-\u19DD\u1A1C\u1A1D\u1A5F\u1A7D\u1A7E\u1A8A-\u1A8F\u1A9A-\u1A9F\u1AAE\u1AAF\u1ABF-\u1AFF\u1B4C-\u1B4F\u1B7D-\u1B7F\u1BF4-\u1BFB\u1C38-\u1C3A\u1C4A-\u1C4C\u1C89-\u1CBF\u1CC8-\u1CCF\u1CFA-\u1CFF\u1DFA\u1F16\u1F17\u1F1E\u1F1F\u1F46\u1F47\u1F4E\u1F4F\u1F58\u1F5A\u1F5C\u1F5E\u1F7E\u1F7F\u1FB5\u1FC5\u1FD4\u1FD5\u1FDC\u1FF0\u1FF1\u1FF5\u1FFF\u2065\u2072\u2073\u208F\u209D-\u209F\u20C0-\u20CF\u20F1-\u20FF\u218C-\u218F\u2427-\u243F\u244B-\u245F\u2B74\u2B75\u2B96\u2B97\u2BBA-\u2BBC\u2BC9\u2BD3-\u2BEB\u2BF0-\u2BFF\u2C2F\u2C5F\u2CF4-\u2CF8\u2D26\u2D28-\u2D2C\u2D2E\u2D2F\u2D68-\u2D6E\u2D71-\u2D7E\u2D97-\u2D9F\u2DA7\u2DAF\u2DB7\u2DBF\u2DC7\u2DCF\u2DD7\u2DDF\u2E4A-\u2E7F\u2E9A\u2EF4-\u2EFF\u2FD6-\u2FEF\u2FFC-\u2FFF\u3040\u3097\u3098\u3100-\u3104\u312F\u3130\u318F\u31BB-\u31BF\u31E4-\u31EF\u321F\u32FF\u4DB6-\u4DBF\u9FEB-\u9FFF\uA48D-\uA48F\uA4C7-\uA4CF\uA62C-\uA63F\uA6F8-\uA6FF\uA7AF\uA7B8-\uA7F6\uA82C-\uA82F\uA83A-\uA83F\uA878-\uA87F\uA8C6-\uA8CD\uA8DA-\uA8DF\uA8FE\uA8FF\uA954-\uA95E\uA97D-\uA97F\uA9CE\uA9DA-\uA9DD\uA9FF\uAA37-\uAA3F\uAA4E\uAA4F\uAA5A\uAA5B\uAAC3-\uAADA\uAAF7-\uAB00\uAB07\uAB08\uAB0F\uAB10\uAB17-\uAB1F\uAB27\uAB2F\uAB66-\uAB6F\uABEE\uABEF\uABFA-\uABFF\uD7A4-\uD7AF\uD7C7-\uD7CA\uD7FC-\uD7FF\uFA6E\uFA6F\uFADA-\uFAFF\uFB07-\uFB12\uFB18-\uFB1C\uFB37\uFB3D\uFB3F\uFB42\uFB45\uFBC2-\uFBD2\uFD40-\uFD4F\uFD90\uFD91\uFDC8-\uFDEF\uFDFE\uFDFF\uFE1A-\uFE1F\uFE53\uFE67\uFE6C-\uFE6F\uFE75\uFEFD\uFEFE\uFF00\uFFBF-\uFFC1\uFFC8\uFFC9\uFFD0\uFFD1\uFFD8\uFFD9\uFFDD-\uFFDF\uFFE7\uFFEF-\uFFF8\uFFFE\uFFFF',
+            'astral': '\uD800[\uDC0C\uDC27\uDC3B\uDC3E\uDC4E\uDC4F\uDC5E-\uDC7F\uDCFB-\uDCFF\uDD03-\uDD06\uDD34-\uDD36\uDD8F\uDD9C-\uDD9F\uDDA1-\uDDCF\uDDFE-\uDE7F\uDE9D-\uDE9F\uDED1-\uDEDF\uDEFC-\uDEFF\uDF24-\uDF2C\uDF4B-\uDF4F\uDF7B-\uDF7F\uDF9E\uDFC4-\uDFC7\uDFD6-\uDFFF]|\uD801[\uDC9E\uDC9F\uDCAA-\uDCAF\uDCD4-\uDCD7\uDCFC-\uDCFF\uDD28-\uDD2F\uDD64-\uDD6E\uDD70-\uDDFF\uDF37-\uDF3F\uDF56-\uDF5F\uDF68-\uDFFF]|\uD802[\uDC06\uDC07\uDC09\uDC36\uDC39-\uDC3B\uDC3D\uDC3E\uDC56\uDC9F-\uDCA6\uDCB0-\uDCDF\uDCF3\uDCF6-\uDCFA\uDD1C-\uDD1E\uDD3A-\uDD3E\uDD40-\uDD7F\uDDB8-\uDDBB\uDDD0\uDDD1\uDE04\uDE07-\uDE0B\uDE14\uDE18\uDE34-\uDE37\uDE3B-\uDE3E\uDE48-\uDE4F\uDE59-\uDE5F\uDEA0-\uDEBF\uDEE7-\uDEEA\uDEF7-\uDEFF\uDF36-\uDF38\uDF56\uDF57\uDF73-\uDF77\uDF92-\uDF98\uDF9D-\uDFA8\uDFB0-\uDFFF]|\uD803[\uDC49-\uDC7F\uDCB3-\uDCBF\uDCF3-\uDCF9\uDD00-\uDE5F\uDE7F-\uDFFF]|\uD804[\uDC4E-\uDC51\uDC70-\uDC7E\uDCC2-\uDCCF\uDCE9-\uDCEF\uDCFA-\uDCFF\uDD35\uDD44-\uDD4F\uDD77-\uDD7F\uDDCE\uDDCF\uDDE0\uDDF5-\uDDFF\uDE12\uDE3F-\uDE7F\uDE87\uDE89\uDE8E\uDE9E\uDEAA-\uDEAF\uDEEB-\uDEEF\uDEFA-\uDEFF\uDF04\uDF0D\uDF0E\uDF11\uDF12\uDF29\uDF31\uDF34\uDF3A\uDF3B\uDF45\uDF46\uDF49\uDF4A\uDF4E\uDF4F\uDF51-\uDF56\uDF58-\uDF5C\uDF64\uDF65\uDF6D-\uDF6F\uDF75-\uDFFF]|\uD805[\uDC5A\uDC5C\uDC5E-\uDC7F\uDCC8-\uDCCF\uDCDA-\uDD7F\uDDB6\uDDB7\uDDDE-\uDDFF\uDE45-\uDE4F\uDE5A-\uDE5F\uDE6D-\uDE7F\uDEB8-\uDEBF\uDECA-\uDEFF\uDF1A-\uDF1C\uDF2C-\uDF2F\uDF40-\uDFFF]|\uD806[\uDC00-\uDC9F\uDCF3-\uDCFE\uDD00-\uDDFF\uDE48-\uDE4F\uDE84\uDE85\uDE9D\uDEA3-\uDEBF\uDEF9-\uDFFF]|\uD807[\uDC09\uDC37\uDC46-\uDC4F\uDC6D-\uDC6F\uDC90\uDC91\uDCA8\uDCB7-\uDCFF\uDD07\uDD0A\uDD37-\uDD39\uDD3B\uDD3E\uDD48-\uDD4F\uDD5A-\uDFFF]|\uD808[\uDF9A-\uDFFF]|\uD809[\uDC6F\uDC75-\uDC7F\uDD44-\uDFFF]|[\uD80A\uD80B\uD80E-\uD810\uD812-\uD819\uD823-\uD82B\uD82D\uD82E\uD830-\uD833\uD837\uD839\uD83F\uD87B-\uD87D\uD87F-\uDB3F\uDB41-\uDB7F][\uDC00-\uDFFF]|\uD80D[\uDC2F-\uDFFF]|\uD811[\uDE47-\uDFFF]|\uD81A[\uDE39-\uDE3F\uDE5F\uDE6A-\uDE6D\uDE70-\uDECF\uDEEE\uDEEF\uDEF6-\uDEFF\uDF46-\uDF4F\uDF5A\uDF62\uDF78-\uDF7C\uDF90-\uDFFF]|\uD81B[\uDC00-\uDEFF\uDF45-\uDF4F\uDF7F-\uDF8E\uDFA0-\uDFDF\uDFE2-\uDFFF]|\uD821[\uDFED-\uDFFF]|\uD822[\uDEF3-\uDFFF]|\uD82C[\uDD1F-\uDD6F\uDEFC-\uDFFF]|\uD82F[\uDC6B-\uDC6F\uDC7D-\uDC7F\uDC89-\uDC8F\uDC9A\uDC9B\uDCA4-\uDFFF]|\uD834[\uDCF6-\uDCFF\uDD27\uDD28\uDDE9-\uDDFF\uDE46-\uDEFF\uDF57-\uDF5F\uDF72-\uDFFF]|\uD835[\uDC55\uDC9D\uDCA0\uDCA1\uDCA3\uDCA4\uDCA7\uDCA8\uDCAD\uDCBA\uDCBC\uDCC4\uDD06\uDD0B\uDD0C\uDD15\uDD1D\uDD3A\uDD3F\uDD45\uDD47-\uDD49\uDD51\uDEA6\uDEA7\uDFCC\uDFCD]|\uD836[\uDE8C-\uDE9A\uDEA0\uDEB0-\uDFFF]|\uD838[\uDC07\uDC19\uDC1A\uDC22\uDC25\uDC2B-\uDFFF]|\uD83A[\uDCC5\uDCC6\uDCD7-\uDCFF\uDD4B-\uDD4F\uDD5A-\uDD5D\uDD60-\uDFFF]|\uD83B[\uDC00-\uDDFF\uDE04\uDE20\uDE23\uDE25\uDE26\uDE28\uDE33\uDE38\uDE3A\uDE3C-\uDE41\uDE43-\uDE46\uDE48\uDE4A\uDE4C\uDE50\uDE53\uDE55\uDE56\uDE58\uDE5A\uDE5C\uDE5E\uDE60\uDE63\uDE65\uDE66\uDE6B\uDE73\uDE78\uDE7D\uDE7F\uDE8A\uDE9C-\uDEA0\uDEA4\uDEAA\uDEBC-\uDEEF\uDEF2-\uDFFF]|\uD83C[\uDC2C-\uDC2F\uDC94-\uDC9F\uDCAF\uDCB0\uDCC0\uDCD0\uDCF6-\uDCFF\uDD0D-\uDD0F\uDD2F\uDD6C-\uDD6F\uDDAD-\uDDE5\uDE03-\uDE0F\uDE3C-\uDE3F\uDE49-\uDE4F\uDE52-\uDE5F\uDE66-\uDEFF]|\uD83D[\uDED5-\uDEDF\uDEED-\uDEEF\uDEF9-\uDEFF\uDF74-\uDF7F\uDFD5-\uDFFF]|\uD83E[\uDC0C-\uDC0F\uDC48-\uDC4F\uDC5A-\uDC5F\uDC88-\uDC8F\uDCAE-\uDCFF\uDD0C-\uDD0F\uDD3F\uDD4D-\uDD4F\uDD6C-\uDD7F\uDD98-\uDDBF\uDDC1-\uDDCF\uDDE7-\uDFFF]|\uD869[\uDED7-\uDEFF]|\uD86D[\uDF35-\uDF3F]|\uD86E[\uDC1E\uDC1F]|\uD873[\uDEA2-\uDEAF]|\uD87A[\uDFE1-\uDFFF]|\uD87E[\uDE1E-\uDFFF]|\uDB40[\uDC00\uDC02-\uDC1F\uDC80-\uDCFF\uDDF0-\uDFFF]|[\uDBBF\uDBFF][\uDFFE\uDFFF]'
+        },
+        {
+            'name': 'Co',
+            'alias': 'Private_Use',
+            'bmp': '\uE000-\uF8FF',
+            'astral': '[\uDB80-\uDBBE\uDBC0-\uDBFE][\uDC00-\uDFFF]|[\uDBBF\uDBFF][\uDC00-\uDFFD]'
+        },
+        {
+            'name': 'Cs',
+            'alias': 'Surrogate',
+            'bmp': '\uD800-\uDFFF'
+        },
+        {
+            'name': 'L',
+            'alias': 'Letter',
+            'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05D0-\u05EA\u05F0-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
+            'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
+        },
+        {
+            'name': 'LC',
+            'alias': 'Cased_Letter',
+            'bmp': 'A-Za-z\xB5\xC0-\xD6\xD8-\xF6\xF8-\u01BA\u01BC-\u01BF\u01C4-\u0293\u0295-\u02AF\u0370-\u0373\u0376\u0377\u037B-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0561-\u0587\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2134\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2C7B\u2C7E-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA640-\uA66D\uA680-\uA69B\uA722-\uA76F\uA771-\uA787\uA78B-\uA78E\uA790-\uA7AE\uA7B0-\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF21-\uFF3A\uFF41-\uFF5A',
+            'astral': '\uD801[\uDC00-\uDC4F\uDCB0-\uDCD3\uDCD8-\uDCFB]|\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD806[\uDCA0-\uDCDF]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD83A[\uDD00-\uDD43]'
+        },
+        {
+            'name': 'Ll',
+            'alias': 'Lowercase_Letter',
+            'bmp': 'a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
+            'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
+        },
+        {
+            'name': 'Lm',
+            'alias': 'Modifier_Letter',
+            'bmp': '\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5\u06E6\u07F4\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C\uA69D\uA717-\uA71F\uA770\uA788\uA7F8\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E\uFF9F',
+            'astral': '\uD81A[\uDF40-\uDF43]|\uD81B[\uDF93-\uDF9F\uDFE0\uDFE1]'
+        },
+        {
+            'name': 'Lo',
+            'alias': 'Other_Letter',
+            'bmp': '\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E45\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
+            'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC50-\uDC9D\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDF00-\uDF19]|\uD806[\uDCFF\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE83\uDE86-\uDE89\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD83A[\uDC00-\uDCC4]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
+        },
+        {
+            'name': 'Lt',
+            'alias': 'Titlecase_Letter',
+            'bmp': '\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC'
+        },
+        {
+            'name': 'Lu',
+            'alias': 'Uppercase_Letter',
+            'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A',
+            'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]'
+        },
+        {
+            'name': 'M',
+            'alias': 'Mark',
+            'bmp': '\u0300-\u036F\u0483-\u0489\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0903\u093A-\u093C\u093E-\u094F\u0951-\u0957\u0962\u0963\u0981-\u0983\u09BC\u09BE-\u09C4\u09C7\u09C8\u09CB-\u09CD\u09D7\u09E2\u09E3\u0A01-\u0A03\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81-\u0A83\u0ABC\u0ABE-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01-\u0B03\u0B3C\u0B3E-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B62\u0B63\u0B82\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD7\u0C00-\u0C03\u0C3E-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81-\u0C83\u0CBC\u0CBE-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CE2\u0CE3\u0D00-\u0D03\u0D3B\u0D3C\u0D3E-\u0D44\u0D46-\u0D48\u0D4A-\u0D4D\u0D57\u0D62\u0D63\u0D82\u0D83\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F3E\u0F3F\u0F71-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102B-\u103E\u1056-\u1059\u105E-\u1060\u1062-\u1064\u1067-\u106D\u1071-\u1074\u1082-\u108D\u108F\u109A-\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u192B\u1930-\u193B\u1A17-\u1A1B\u1A55-\u1A5E\u1A60-\u1A7C\u1A7F\u1AB0-\u1ABE\u1B00-\u1B04\u1B34-\u1B44\u1B6B-\u1B73\u1B80-\u1B82\u1BA1-\u1BAD\u1BE6-\u1BF3\u1C24-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE8\u1CED\u1CF2-\u1CF4\u1CF7-\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302F\u3099\u309A\uA66F-\uA672\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA823-\uA827\uA880\uA881\uA8B4-\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA953\uA980-\uA983\uA9B3-\uA9C0\uA9E5\uAA29-\uAA36\uAA43\uAA4C\uAA4D\uAA7B-\uAA7D\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEB-\uAAEF\uAAF5\uAAF6\uABE3-\uABEA\uABEC\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
+            'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC00-\uDC02\uDC38-\uDC46\uDC7F-\uDC82\uDCB0-\uDCBA\uDD00-\uDD02\uDD27-\uDD34\uDD73\uDD80-\uDD82\uDDB3-\uDDC0\uDDCA-\uDDCC\uDE2C-\uDE37\uDE3E\uDEDF-\uDEEA\uDF00-\uDF03\uDF3C\uDF3E-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC35-\uDC46\uDCB0-\uDCC3\uDDAF-\uDDB5\uDDB8-\uDDC0\uDDDC\uDDDD\uDE30-\uDE40\uDEAB-\uDEB7\uDF1D-\uDF2B]|\uD806[\uDE01-\uDE0A\uDE33-\uDE39\uDE3B-\uDE3E\uDE47\uDE51-\uDE5B\uDE8A-\uDE99]|\uD807[\uDC2F-\uDC36\uDC38-\uDC3F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF51-\uDF7E\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD65-\uDD69\uDD6D-\uDD72\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
+        },
+        {
+            'name': 'Mc',
+            'alias': 'Spacing_Mark',
+            'bmp': '\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E\u094F\u0982\u0983\u09BE-\u09C0\u09C7\u09C8\u09CB\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB\u0ACC\u0B02\u0B03\u0B3E\u0B40\u0B47\u0B48\u0B4B\u0B4C\u0B57\u0BBE\u0BBF\u0BC1\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7\u0CC8\u0CCA\u0CCB\u0CD5\u0CD6\u0D02\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2\u0DF3\u0F3E\u0F3F\u0F7F\u102B\u102C\u1031\u1038\u103B\u103C\u1056\u1057\u1062-\u1064\u1067-\u106D\u1083\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7\u17C8\u1923-\u1926\u1929-\u192B\u1930\u1931\u1933-\u1938\u1A19\u1A1A\u1A55\u1A57\u1A61\u1A63\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43\u1B44\u1B82\u1BA1\u1BA6\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2\u1BF3\u1C24-\u1C2B\u1C34\u1C35\u1CE1\u1CF2\u1CF3\u1CF7\u302E\u302F\uA823\uA824\uA827\uA880\uA881\uA8B4-\uA8C3\uA952\uA953\uA983\uA9B4\uA9B5\uA9BA\uA9BB\uA9BD-\uA9C0\uAA2F\uAA30\uAA33\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE\uAAEF\uAAF5\uABE3\uABE4\uABE6\uABE7\uABE9\uABEA\uABEC',
+            'astral': '\uD804[\uDC00\uDC02\uDC82\uDCB0-\uDCB2\uDCB7\uDCB8\uDD2C\uDD82\uDDB3-\uDDB5\uDDBF\uDDC0\uDE2C-\uDE2E\uDE32\uDE33\uDE35\uDEE0-\uDEE2\uDF02\uDF03\uDF3E\uDF3F\uDF41-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF57\uDF62\uDF63]|\uD805[\uDC35-\uDC37\uDC40\uDC41\uDC45\uDCB0-\uDCB2\uDCB9\uDCBB-\uDCBE\uDCC1\uDDAF-\uDDB1\uDDB8-\uDDBB\uDDBE\uDE30-\uDE32\uDE3B\uDE3C\uDE3E\uDEAC\uDEAE\uDEAF\uDEB6\uDF20\uDF21\uDF26]|\uD806[\uDE07\uDE08\uDE39\uDE57\uDE58\uDE97]|\uD807[\uDC2F\uDC3E\uDCA9\uDCB1\uDCB4]|\uD81B[\uDF51-\uDF7E]|\uD834[\uDD65\uDD66\uDD6D-\uDD72]'
+        },
+        {
+            'name': 'Me',
+            'alias': 'Enclosing_Mark',
+            'bmp': '\u0488\u0489\u1ABE\u20DD-\u20E0\u20E2-\u20E4\uA670-\uA672'
+        },
+        {
+            'name': 'Mn',
+            'alias': 'Nonspacing_Mark',
+            'bmp': '\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08D4-\u08E1\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2\u09E3\u0A01\u0A02\u0A3C\u0A41\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A70\u0A71\u0A75\u0A81\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7\u0AC8\u0ACD\u0AE2\u0AE3\u0AFA-\u0AFF\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C62\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC\u0CCD\u0CE2\u0CE3\u0D00\u0D01\u0D3B\u0D3C\u0D41-\u0D44\u0D4D\u0D62\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB\u0EBC\u0EC8-\u0ECD\u0F18\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039\u103A\u103D\u103E\u1058\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752\u1753\u1772\u1773\u17B4\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u1885\u1886\u18A9\u1920-\u1922\u1927\u1928\u1932\u1939-\u193B\u1A17\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80\u1B81\u1BA2-\u1BA5\u1BA8\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099\u309A\uA66F\uA674-\uA67D\uA69E\uA69F\uA6F0\uA6F1\uA802\uA806\uA80B\uA825\uA826\uA8C4\uA8C5\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31\uAA32\uAA35\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7\uAAB8\uAABE\uAABF\uAAC1\uAAEC\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F',
+            'astral': '\uD800[\uDDFD\uDEE0\uDF76-\uDF7A]|\uD802[\uDE01-\uDE03\uDE05\uDE06\uDE0C-\uDE0F\uDE38-\uDE3A\uDE3F\uDEE5\uDEE6]|\uD804[\uDC01\uDC38-\uDC46\uDC7F-\uDC81\uDCB3-\uDCB6\uDCB9\uDCBA\uDD00-\uDD02\uDD27-\uDD2B\uDD2D-\uDD34\uDD73\uDD80\uDD81\uDDB6-\uDDBE\uDDCA-\uDDCC\uDE2F-\uDE31\uDE34\uDE36\uDE37\uDE3E\uDEDF\uDEE3-\uDEEA\uDF00\uDF01\uDF3C\uDF40\uDF66-\uDF6C\uDF70-\uDF74]|\uD805[\uDC38-\uDC3F\uDC42-\uDC44\uDC46\uDCB3-\uDCB8\uDCBA\uDCBF\uDCC0\uDCC2\uDCC3\uDDB2-\uDDB5\uDDBC\uDDBD\uDDBF\uDDC0\uDDDC\uDDDD\uDE33-\uDE3A\uDE3D\uDE3F\uDE40\uDEAB\uDEAD\uDEB0-\uDEB5\uDEB7\uDF1D-\uDF1F\uDF22-\uDF25\uDF27-\uDF2B]|\uD806[\uDE01-\uDE06\uDE09\uDE0A\uDE33-\uDE38\uDE3B-\uDE3E\uDE47\uDE51-\uDE56\uDE59-\uDE5B\uDE8A-\uDE96\uDE98\uDE99]|\uD807[\uDC30-\uDC36\uDC38-\uDC3D\uDC3F\uDC92-\uDCA7\uDCAA-\uDCB0\uDCB2\uDCB3\uDCB5\uDCB6\uDD31-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD45\uDD47]|\uD81A[\uDEF0-\uDEF4\uDF30-\uDF36]|\uD81B[\uDF8F-\uDF92]|\uD82F[\uDC9D\uDC9E]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD\uDE42-\uDE44]|\uD836[\uDE00-\uDE36\uDE3B-\uDE6C\uDE75\uDE84\uDE9B-\uDE9F\uDEA1-\uDEAF]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDCD0-\uDCD6\uDD44-\uDD4A]|\uDB40[\uDD00-\uDDEF]'
+        },
+        {
+            'name': 'N',
+            'alias': 'Number',
+            'bmp': '0-9\xB2\xB3\xB9\xBC-\xBE\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u09F4-\u09F9\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0B72-\u0B77\u0BE6-\u0BF2\u0C66-\u0C6F\u0C78-\u0C7E\u0CE6-\u0CEF\u0D58-\u0D5E\u0D66-\u0D78\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F33\u1040-\u1049\u1090-\u1099\u1369-\u137C\u16EE-\u16F0\u17E0-\u17E9\u17F0-\u17F9\u1810-\u1819\u1946-\u194F\u19D0-\u19DA\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\u2070\u2074-\u2079\u2080-\u2089\u2150-\u2182\u2185-\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3007\u3021-\u3029\u3038-\u303A\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA620-\uA629\uA6E6-\uA6EF\uA830-\uA835\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
+            'astral': '\uD800[\uDD07-\uDD33\uDD40-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23\uDF41\uDF4A\uDFD1-\uDFD5]|\uD801[\uDCA0-\uDCA9]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDDE1-\uDDF4\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF3B]|\uD806[\uDCE0-\uDCF2]|\uD807[\uDC50-\uDC6C\uDD50-\uDD59]|\uD809[\uDC00-\uDC6E]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDCC7-\uDCCF\uDD50-\uDD59]|\uD83C[\uDD00-\uDD0C]'
+        },
+        {
+            'name': 'Nd',
+            'alias': 'Decimal_Number',
+            'bmp': '0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19',
+            'astral': '\uD801[\uDCA0-\uDCA9]|\uD804[\uDC66-\uDC6F\uDCF0-\uDCF9\uDD36-\uDD3F\uDDD0-\uDDD9\uDEF0-\uDEF9]|\uD805[\uDC50-\uDC59\uDCD0-\uDCD9\uDE50-\uDE59\uDEC0-\uDEC9\uDF30-\uDF39]|\uD806[\uDCE0-\uDCE9]|\uD807[\uDC50-\uDC59\uDD50-\uDD59]|\uD81A[\uDE60-\uDE69\uDF50-\uDF59]|\uD835[\uDFCE-\uDFFF]|\uD83A[\uDD50-\uDD59]'
+        },
+        {
+            'name': 'Nl',
+            'alias': 'Letter_Number',
+            'bmp': '\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF',
+            'astral': '\uD800[\uDD40-\uDD74\uDF41\uDF4A\uDFD1-\uDFD5]|\uD809[\uDC00-\uDC6E]'
+        },
+        {
+            'name': 'No',
+            'alias': 'Other_Number',
+            'bmp': '\xB2\xB3\xB9\xBC-\xBE\u09F4-\u09F9\u0B72-\u0B77\u0BF0-\u0BF2\u0C78-\u0C7E\u0D58-\u0D5E\u0D70-\u0D78\u0F2A-\u0F33\u1369-\u137C\u17F0-\u17F9\u19DA\u2070\u2074-\u2079\u2080-\u2089\u2150-\u215F\u2189\u2460-\u249B\u24EA-\u24FF\u2776-\u2793\u2CFD\u3192-\u3195\u3220-\u3229\u3248-\u324F\u3251-\u325F\u3280-\u3289\u32B1-\u32BF\uA830-\uA835',
+            'astral': '\uD800[\uDD07-\uDD33\uDD75-\uDD78\uDD8A\uDD8B\uDEE1-\uDEFB\uDF20-\uDF23]|\uD802[\uDC58-\uDC5F\uDC79-\uDC7F\uDCA7-\uDCAF\uDCFB-\uDCFF\uDD16-\uDD1B\uDDBC\uDDBD\uDDC0-\uDDCF\uDDD2-\uDDFF\uDE40-\uDE47\uDE7D\uDE7E\uDE9D-\uDE9F\uDEEB-\uDEEF\uDF58-\uDF5F\uDF78-\uDF7F\uDFA9-\uDFAF]|\uD803[\uDCFA-\uDCFF\uDE60-\uDE7E]|\uD804[\uDC52-\uDC65\uDDE1-\uDDF4]|\uD805[\uDF3A\uDF3B]|\uD806[\uDCEA-\uDCF2]|\uD807[\uDC5A-\uDC6C]|\uD81A[\uDF5B-\uDF61]|\uD834[\uDF60-\uDF71]|\uD83A[\uDCC7-\uDCCF]|\uD83C[\uDD00-\uDD0C]'
+        },
+        {
+            'name': 'P',
+            'alias': 'Punctuation',
+            'bmp': '!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E49\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65',
+            'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
+        },
+        {
+            'name': 'Pc',
+            'alias': 'Connector_Punctuation',
+            'bmp': '_\u203F\u2040\u2054\uFE33\uFE34\uFE4D-\uFE4F\uFF3F'
+        },
+        {
+            'name': 'Pd',
+            'alias': 'Dash_Punctuation',
+            'bmp': '\\-\u058A\u05BE\u1400\u1806\u2010-\u2015\u2E17\u2E1A\u2E3A\u2E3B\u2E40\u301C\u3030\u30A0\uFE31\uFE32\uFE58\uFE63\uFF0D'
+        },
+        {
+            'name': 'Pe',
+            'alias': 'Close_Punctuation',
+            'bmp': '\\)\\]\\}\u0F3B\u0F3D\u169C\u2046\u207E\u208E\u2309\u230B\u232A\u2769\u276B\u276D\u276F\u2771\u2773\u2775\u27C6\u27E7\u27E9\u27EB\u27ED\u27EF\u2984\u2986\u2988\u298A\u298C\u298E\u2990\u2992\u2994\u2996\u2998\u29D9\u29DB\u29FD\u2E23\u2E25\u2E27\u2E29\u3009\u300B\u300D\u300F\u3011\u3015\u3017\u3019\u301B\u301E\u301F\uFD3E\uFE18\uFE36\uFE38\uFE3A\uFE3C\uFE3E\uFE40\uFE42\uFE44\uFE48\uFE5A\uFE5C\uFE5E\uFF09\uFF3D\uFF5D\uFF60\uFF63'
+        },
+        {
+            'name': 'Pf',
+            'alias': 'Final_Punctuation',
+            'bmp': '\xBB\u2019\u201D\u203A\u2E03\u2E05\u2E0A\u2E0D\u2E1D\u2E21'
+        },
+        {
+            'name': 'Pi',
+            'alias': 'Initial_Punctuation',
+            'bmp': '\xAB\u2018\u201B\u201C\u201F\u2039\u2E02\u2E04\u2E09\u2E0C\u2E1C\u2E20'
+        },
+        {
+            'name': 'Po',
+            'alias': 'Other_Punctuation',
+            'bmp': '!-#%-\'\\*,\\.\\/:;\\?@\\\xA1\xA7\xB6\xB7\xBF\u037E\u0387\u055A-\u055F\u0589\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u166D\u166E\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u1805\u1807-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2016\u2017\u2020-\u2027\u2030-\u2038\u203B-\u203E\u2041-\u2043\u2047-\u2051\u2053\u2055-\u205E\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00\u2E01\u2E06-\u2E08\u2E0B\u2E0E-\u2E16\u2E18\u2E19\u2E1B\u2E1E\u2E1F\u2E2A-\u2E2E\u2E30-\u2E39\u2E3C-\u2E3F\u2E41\u2E43-\u2E49\u3001-\u3003\u303D\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFE10-\uFE16\uFE19\uFE30\uFE45\uFE46\uFE49-\uFE4C\uFE50-\uFE52\uFE54-\uFE57\uFE5F-\uFE61\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF07\uFF0A\uFF0C\uFF0E\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3C\uFF61\uFF64\uFF65',
+            'astral': '\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]'
+        },
+        {
+            'name': 'Ps',
+            'alias': 'Open_Punctuation',
+            'bmp': '\\(\\[\\{\u0F3A\u0F3C\u169B\u201A\u201E\u2045\u207D\u208D\u2308\u230A\u2329\u2768\u276A\u276C\u276E\u2770\u2772\u2774\u27C5\u27E6\u27E8\u27EA\u27EC\u27EE\u2983\u2985\u2987\u2989\u298B\u298D\u298F\u2991\u2993\u2995\u2997\u29D8\u29DA\u29FC\u2E22\u2E24\u2E26\u2E28\u2E42\u3008\u300A\u300C\u300E\u3010\u3014\u3016\u3018\u301A\u301D\uFD3F\uFE17\uFE35\uFE37\uFE39\uFE3B\uFE3D\uFE3F\uFE41\uFE43\uFE47\uFE59\uFE5B\uFE5D\uFF08\uFF3B\uFF5B\uFF5F\uFF62'
+        },
+        {
+            'name': 'S',
+            'alias': 'Symbol',
+            'bmp': '\\$\\+<->\\^`\\|~\xA2-\xA6\xA8\xA9\xAC\xAE-\xB1\xB4\xB8\xD7\xF7\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u03F6\u0482\u058D-\u058F\u0606-\u0608\u060B\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09F2\u09F3\u09FA\u09FB\u0AF1\u0B70\u0BF3-\u0BFA\u0C7F\u0D4F\u0D79\u0E3F\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u17DB\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u2044\u2052\u207A-\u207C\u208A-\u208C\u20A0-\u20BF\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116-\u2118\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u2140-\u2144\u214A-\u214D\u214F\u218A\u218B\u2190-\u2307\u230C-\u2328\u232B-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u2767\u2794-\u27C4\u27C7-\u27E5\u27F0-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD2\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u309B\u309C\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA700-\uA716\uA720\uA721\uA789\uA78A\uA828-\uA82B\uA836-\uA839\uAA77-\uAA79\uAB5B\uFB29\uFBB2-\uFBC1\uFDFC\uFDFD\uFE62\uFE64-\uFE66\uFE69\uFF04\uFF0B\uFF1C-\uFF1E\uFF3E\uFF40\uFF5C\uFF5E\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFFC\uFFFD',
+            'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83B[\uDEF0\uDEF1]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF8\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6]'
+        },
+        {
+            'name': 'Sc',
+            'alias': 'Currency_Symbol',
+            'bmp': '\\$\xA2-\xA5\u058F\u060B\u09F2\u09F3\u09FB\u0AF1\u0BF9\u0E3F\u17DB\u20A0-\u20BF\uA838\uFDFC\uFE69\uFF04\uFFE0\uFFE1\uFFE5\uFFE6'
+        },
+        {
+            'name': 'Sk',
+            'alias': 'Modifier_Symbol',
+            'bmp': '\\^`\xA8\xAF\xB4\xB8\u02C2-\u02C5\u02D2-\u02DF\u02E5-\u02EB\u02ED\u02EF-\u02FF\u0375\u0384\u0385\u1FBD\u1FBF-\u1FC1\u1FCD-\u1FCF\u1FDD-\u1FDF\u1FED-\u1FEF\u1FFD\u1FFE\u309B\u309C\uA700-\uA716\uA720\uA721\uA789\uA78A\uAB5B\uFBB2-\uFBC1\uFF3E\uFF40\uFFE3',
+            'astral': '\uD83C[\uDFFB-\uDFFF]'
+        },
+        {
+            'name': 'Sm',
+            'alias': 'Math_Symbol',
+            'bmp': '\\+<->\\|~\xAC\xB1\xD7\xF7\u03F6\u0606-\u0608\u2044\u2052\u207A-\u207C\u208A-\u208C\u2118\u2140-\u2144\u214B\u2190-\u2194\u219A\u219B\u21A0\u21A3\u21A6\u21AE\u21CE\u21CF\u21D2\u21D4\u21F4-\u22FF\u2320\u2321\u237C\u239B-\u23B3\u23DC-\u23E1\u25B7\u25C1\u25F8-\u25FF\u266F\u27C0-\u27C4\u27C7-\u27E5\u27F0-\u27FF\u2900-\u2982\u2999-\u29D7\u29DC-\u29FB\u29FE-\u2AFF\u2B30-\u2B44\u2B47-\u2B4C\uFB29\uFE62\uFE64-\uFE66\uFF0B\uFF1C-\uFF1E\uFF5C\uFF5E\uFFE2\uFFE9-\uFFEC',
+            'astral': '\uD835[\uDEC1\uDEDB\uDEFB\uDF15\uDF35\uDF4F\uDF6F\uDF89\uDFA9\uDFC3]|\uD83B[\uDEF0\uDEF1]'
+        },
+        {
+            'name': 'So',
+            'alias': 'Other_Symbol',
+            'bmp': '\xA6\xA9\xAE\xB0\u0482\u058D\u058E\u060E\u060F\u06DE\u06E9\u06FD\u06FE\u07F6\u09FA\u0B70\u0BF3-\u0BF8\u0BFA\u0C7F\u0D4F\u0D79\u0F01-\u0F03\u0F13\u0F15-\u0F17\u0F1A-\u0F1F\u0F34\u0F36\u0F38\u0FBE-\u0FC5\u0FC7-\u0FCC\u0FCE\u0FCF\u0FD5-\u0FD8\u109E\u109F\u1390-\u1399\u1940\u19DE-\u19FF\u1B61-\u1B6A\u1B74-\u1B7C\u2100\u2101\u2103-\u2106\u2108\u2109\u2114\u2116\u2117\u211E-\u2123\u2125\u2127\u2129\u212E\u213A\u213B\u214A\u214C\u214D\u214F\u218A\u218B\u2195-\u2199\u219C-\u219F\u21A1\u21A2\u21A4\u21A5\u21A7-\u21AD\u21AF-\u21CD\u21D0\u21D1\u21D3\u21D5-\u21F3\u2300-\u2307\u230C-\u231F\u2322-\u2328\u232B-\u237B\u237D-\u239A\u23B4-\u23DB\u23E2-\u2426\u2440-\u244A\u249C-\u24E9\u2500-\u25B6\u25B8-\u25C0\u25C2-\u25F7\u2600-\u266E\u2670-\u2767\u2794-\u27BF\u2800-\u28FF\u2B00-\u2B2F\u2B45\u2B46\u2B4D-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD2\u2BEC-\u2BEF\u2CE5-\u2CEA\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u2FF0-\u2FFB\u3004\u3012\u3013\u3020\u3036\u3037\u303E\u303F\u3190\u3191\u3196-\u319F\u31C0-\u31E3\u3200-\u321E\u322A-\u3247\u3250\u3260-\u327F\u328A-\u32B0\u32C0-\u32FE\u3300-\u33FF\u4DC0-\u4DFF\uA490-\uA4C6\uA828-\uA82B\uA836\uA837\uA839\uAA77-\uAA79\uFDFD\uFFE4\uFFE8\uFFED\uFFEE\uFFFC\uFFFD',
+            'astral': '\uD800[\uDD37-\uDD3F\uDD79-\uDD89\uDD8C-\uDD8E\uDD90-\uDD9B\uDDA0\uDDD0-\uDDFC]|\uD802[\uDC77\uDC78\uDEC8]|\uD805\uDF3F|\uD81A[\uDF3C-\uDF3F\uDF45]|\uD82F\uDC9C|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD64\uDD6A-\uDD6C\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDE00-\uDE41\uDE45\uDF00-\uDF56]|\uD836[\uDC00-\uDDFF\uDE37-\uDE3A\uDE6D-\uDE74\uDE76-\uDE83\uDE85\uDE86]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFA]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF8\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6]'
+        },
+        {
+            'name': 'Z',
+            'alias': 'Separator',
+            'bmp': ' \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
+        },
+        {
+            'name': 'Zl',
+            'alias': 'Line_Separator',
+            'bmp': '\u2028'
+        },
+        {
+            'name': 'Zp',
+            'alias': 'Paragraph_Separator',
+            'bmp': '\u2029'
+        },
+        {
+            'name': 'Zs',
+            'alias': 'Space_Separator',
+            'bmp': ' \xA0\u1680\u2000-\u200A\u202F\u205F\u3000'
+        }
+    ];
+
+    var unicodeCategories = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+      value: true
+    });
+
+
+
+    var _categories2 = _interopRequireDefault(categories);
+
+    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+    exports.default = function (XRegExp) {
+
+      /**
+       * Adds support for Unicode's general categories. E.g., `\p{Lu}` or `\p{Uppercase Letter}`. See
+       * category descriptions in UAX #44 <http://unicode.org/reports/tr44/#GC_Values_Table>. Token
+       * names are case insensitive, and any spaces, hyphens, and underscores are ignored.
+       *
+       * Uses Unicode 10.0.0.
+       *
+       * @requires XRegExp, Unicode Base
+       */
+
+      if (!XRegExp.addUnicodeData) {
+        throw new ReferenceError('Unicode Base must be loaded before Unicode Categories');
+      }
+
+      XRegExp.addUnicodeData(_categories2.default);
+    }; /*!
+        * XRegExp Unicode Categories 4.1.1
+        * <xregexp.com>
+        * Steven Levithan (c) 2010-present MIT License
+        * Unicode data by Mathias Bynens <mathiasbynens.be>
+        */
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(unicodeCategories);
+
+    var properties = [
+        {
+            'name': 'ASCII',
+            'bmp': '\0-\x7F'
+        },
+        {
+            'name': 'Alphabetic',
+            'bmp': 'A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0345\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0561-\u0587\u05B0-\u05BD\u05BF\u05C1\u05C2\u05C4\u05C5\u05C7\u05D0-\u05EA\u05F0-\u05F2\u0610-\u061A\u0620-\u0657\u0659-\u065F\u066E-\u06D3\u06D5-\u06DC\u06E1-\u06E8\u06ED-\u06EF\u06FA-\u06FC\u06FF\u0710-\u073F\u074D-\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0817\u081A-\u082C\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08DF\u08E3-\u08E9\u08F0-\u093B\u093D-\u094C\u094E-\u0950\u0955-\u0963\u0971-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD-\u09C4\u09C7\u09C8\u09CB\u09CC\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09F0\u09F1\u09FC\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3E-\u0A42\u0A47\u0A48\u0A4B\u0A4C\u0A51\u0A59-\u0A5C\u0A5E\u0A70-\u0A75\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD-\u0AC5\u0AC7-\u0AC9\u0ACB\u0ACC\u0AD0\u0AE0-\u0AE3\u0AF9-\u0AFC\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D-\u0B44\u0B47\u0B48\u0B4B\u0B4C\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B71\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD0\u0BD7\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4C\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCC\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CF1\u0CF2\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D-\u0D44\u0D46-\u0D48\u0D4A-\u0D4C\u0D4E\u0D54-\u0D57\u0D5F-\u0D63\u0D7A-\u0D7F\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DF2\u0DF3\u0E01-\u0E3A\u0E40-\u0E46\u0E4D\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0ECD\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F71-\u0F81\u0F88-\u0F97\u0F99-\u0FBC\u1000-\u1036\u1038\u103B-\u103F\u1050-\u1062\u1065-\u1068\u106E-\u1086\u108E\u109C\u109D\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135F\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16EE-\u16F8\u1700-\u170C\u170E-\u1713\u1720-\u1733\u1740-\u1753\u1760-\u176C\u176E-\u1770\u1772\u1773\u1780-\u17B3\u17B6-\u17C8\u17D7\u17DC\u1820-\u1877\u1880-\u18AA\u18B0-\u18F5\u1900-\u191E\u1920-\u192B\u1930-\u1938\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A1B\u1A20-\u1A5E\u1A61-\u1A74\u1AA7\u1B00-\u1B33\u1B35-\u1B43\u1B45-\u1B4B\u1B80-\u1BA9\u1BAC-\u1BAF\u1BBA-\u1BE5\u1BE7-\u1BF1\u1C00-\u1C35\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1D00-\u1DBF\u1DE7-\u1DF4\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2160-\u2188\u24B6-\u24E9\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2DE0-\u2DFF\u2E2F\u3005-\u3007\u3021-\u3029\u3031-\u3035\u3038-\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312E\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FEA\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA674-\uA67B\uA67F-\uA6EF\uA717-\uA71F\uA722-\uA788\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA827\uA840-\uA873\uA880-\uA8C3\uA8C5\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA92A\uA930-\uA952\uA960-\uA97C\uA980-\uA9B2\uA9B4-\uA9BF\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA36\uAA40-\uAA4D\uAA60-\uAA76\uAA7A\uAA7E-\uAABE\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEF\uAAF2-\uAAF5\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABEA\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC',
+            'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDD40-\uDD74\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF4A\uDF50-\uDF7A\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF\uDFD1-\uDFD5]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2]|\uD804[\uDC00-\uDC45\uDC82-\uDCB8\uDCD0-\uDCE8\uDD00-\uDD32\uDD50-\uDD72\uDD76\uDD80-\uDDBF\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE34\uDE37\uDE3E\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEE8\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D-\uDF44\uDF47\uDF48\uDF4B\uDF4C\uDF50\uDF57\uDF5D-\uDF63]|\uD805[\uDC00-\uDC41\uDC43-\uDC45\uDC47-\uDC4A\uDC80-\uDCC1\uDCC4\uDCC5\uDCC7\uDD80-\uDDB5\uDDB8-\uDDBE\uDDD8-\uDDDD\uDE00-\uDE3E\uDE40\uDE44\uDE80-\uDEB5\uDF00-\uDF19\uDF1D-\uDF2A]|\uD806[\uDCA0-\uDCDF\uDCFF\uDE00-\uDE32\uDE35-\uDE3E\uDE50-\uDE83\uDE86-\uDE97\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC3E\uDC40\uDC72-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD41\uDD43\uDD46\uDD47]|\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF36\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF93-\uDF9F\uDFE0\uDFE1]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]|\uD82C[\uDC00-\uDD1E\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9E]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD47]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
+        },
+        {
+            'name': 'Any',
+            'isBmpLast': true,
+            'bmp': '\0-\uFFFF',
+            'astral': '[\uD800-\uDBFF][\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'Default_Ignorable_Code_Point',
+            'bmp': '\xAD\u034F\u061C\u115F\u1160\u17B4\u17B5\u180B-\u180E\u200B-\u200F\u202A-\u202E\u2060-\u206F\u3164\uFE00-\uFE0F\uFEFF\uFFA0\uFFF0-\uFFF8',
+            'astral': '\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|[\uDB40-\uDB43][\uDC00-\uDFFF]'
+        },
+        {
+            'name': 'Lowercase',
+            'bmp': 'a-z\xAA\xB5\xBA\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02B8\u02C0\u02C1\u02E0-\u02E4\u0345\u0371\u0373\u0377\u037A-\u037D\u0390\u03AC-\u03CE\u03D0\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1C80-\u1C88\u1D00-\u1DBF\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6\u1FC7\u1FD0-\u1FD3\u1FD6\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6\u1FF7\u2071\u207F\u2090-\u209C\u210A\u210E\u210F\u2113\u212F\u2134\u2139\u213C\u213D\u2146-\u2149\u214E\u2170-\u217F\u2184\u24D0-\u24E9\u2C30-\u2C5E\u2C61\u2C65\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73\u2C74\u2C76-\u2C7D\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B-\uA69D\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7F8-\uA7FA\uAB30-\uAB5A\uAB5C-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A',
+            'astral': '\uD801[\uDC28-\uDC4F\uDCD8-\uDCFB]|\uD803[\uDCC0-\uDCF2]|\uD806[\uDCC0-\uDCDF]|\uD835[\uDC1A-\uDC33\uDC4E-\uDC54\uDC56-\uDC67\uDC82-\uDC9B\uDCB6-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDCCF\uDCEA-\uDD03\uDD1E-\uDD37\uDD52-\uDD6B\uDD86-\uDD9F\uDDBA-\uDDD3\uDDEE-\uDE07\uDE22-\uDE3B\uDE56-\uDE6F\uDE8A-\uDEA5\uDEC2-\uDEDA\uDEDC-\uDEE1\uDEFC-\uDF14\uDF16-\uDF1B\uDF36-\uDF4E\uDF50-\uDF55\uDF70-\uDF88\uDF8A-\uDF8F\uDFAA-\uDFC2\uDFC4-\uDFC9\uDFCB]|\uD83A[\uDD22-\uDD43]'
+        },
+        {
+            'name': 'Noncharacter_Code_Point',
+            'bmp': '\uFDD0-\uFDEF\uFFFE\uFFFF',
+            'astral': '[\uD83F\uD87F\uD8BF\uD8FF\uD93F\uD97F\uD9BF\uD9FF\uDA3F\uDA7F\uDABF\uDAFF\uDB3F\uDB7F\uDBBF\uDBFF][\uDFFE\uDFFF]'
+        },
+        {
+            'name': 'Uppercase',
+            'bmp': 'A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178\u0179\u017B\u017D\u0181\u0182\u0184\u0186\u0187\u0189-\u018B\u018E-\u0191\u0193\u0194\u0196-\u0198\u019C\u019D\u019F\u01A0\u01A2\u01A4\u01A6\u01A7\u01A9\u01AC\u01AE\u01AF\u01B1-\u01B3\u01B5\u01B7\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A\u023B\u023D\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E\u213F\u2145\u2160-\u216F\u2183\u24B6-\u24CF\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AE\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A',
+            'astral': '\uD801[\uDC00-\uDC27\uDCB0-\uDCD3]|\uD803[\uDC80-\uDCB2]|\uD806[\uDCA0-\uDCBF]|\uD835[\uDC00-\uDC19\uDC34-\uDC4D\uDC68-\uDC81\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB5\uDCD0-\uDCE9\uDD04\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD38\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD6C-\uDD85\uDDA0-\uDDB9\uDDD4-\uDDED\uDE08-\uDE21\uDE3C-\uDE55\uDE70-\uDE89\uDEA8-\uDEC0\uDEE2-\uDEFA\uDF1C-\uDF34\uDF56-\uDF6E\uDF90-\uDFA8\uDFCA]|\uD83A[\uDD00-\uDD21]|\uD83C[\uDD30-\uDD49\uDD50-\uDD69\uDD70-\uDD89]'
+        },
+        {
+            'name': 'White_Space',
+            'bmp': '\t-\r \x85\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000'
+        }
+    ];
+
+    var unicodeProperties = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+        value: true
+    });
+
+
+
+    var _properties2 = _interopRequireDefault(properties);
+
+    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+    exports.default = function (XRegExp) {
+
+        /**
+         * Adds properties to meet the UTS #18 Level 1 RL1.2 requirements for Unicode regex support. See
+         * <http://unicode.org/reports/tr18/#RL1.2>. Following are definitions of these properties from
+         * UAX #44 <http://unicode.org/reports/tr44/>:
+         *
+         * - Alphabetic
+         *   Characters with the Alphabetic property. Generated from: Lowercase + Uppercase + Lt + Lm +
+         *   Lo + Nl + Other_Alphabetic.
+         *
+         * - Default_Ignorable_Code_Point
+         *   For programmatic determination of default ignorable code points. New characters that should
+         *   be ignored in rendering (unless explicitly supported) will be assigned in these ranges,
+         *   permitting programs to correctly handle the default rendering of such characters when not
+         *   otherwise supported.
+         *
+         * - Lowercase
+         *   Characters with the Lowercase property. Generated from: Ll + Other_Lowercase.
+         *
+         * - Noncharacter_Code_Point
+         *   Code points permanently reserved for internal use.
+         *
+         * - Uppercase
+         *   Characters with the Uppercase property. Generated from: Lu + Other_Uppercase.
+         *
+         * - White_Space
+         *   Spaces, separator characters and other control characters which should be treated by
+         *   programming languages as "white space" for the purpose of parsing elements.
+         *
+         * The properties ASCII, Any, and Assigned are also included but are not defined in UAX #44. UTS
+         * #18 RL1.2 additionally requires support for Unicode scripts and general categories. These are
+         * included in XRegExp's Unicode Categories and Unicode Scripts addons.
+         *
+         * Token names are case insensitive, and any spaces, hyphens, and underscores are ignored.
+         *
+         * Uses Unicode 10.0.0.
+         *
+         * @requires XRegExp, Unicode Base
+         */
+
+        if (!XRegExp.addUnicodeData) {
+            throw new ReferenceError('Unicode Base must be loaded before Unicode Properties');
+        }
+
+        var unicodeData = _properties2.default;
+
+        // Add non-generated data
+        unicodeData.push({
+            name: 'Assigned',
+            // Since this is defined as the inverse of Unicode category Cn (Unassigned), the Unicode
+            // Categories addon is required to use this property
+            inverseOf: 'Cn'
+        });
+
+        XRegExp.addUnicodeData(unicodeData);
+    }; /*!
+        * XRegExp Unicode Properties 4.1.1
+        * <xregexp.com>
+        * Steven Levithan (c) 2012-present MIT License
+        * Unicode data by Mathias Bynens <mathiasbynens.be>
+        */
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(unicodeProperties);
+
+    var scripts = [
+        {
+            'name': 'Adlam',
+            'astral': '\uD83A[\uDD00-\uDD4A\uDD50-\uDD59\uDD5E\uDD5F]'
+        },
+        {
+            'name': 'Ahom',
+            'astral': '\uD805[\uDF00-\uDF19\uDF1D-\uDF2B\uDF30-\uDF3F]'
+        },
+        {
+            'name': 'Anatolian_Hieroglyphs',
+            'astral': '\uD811[\uDC00-\uDE46]'
+        },
+        {
+            'name': 'Arabic',
+            'bmp': '\u0600-\u0604\u0606-\u060B\u060D-\u061A\u061C\u061E\u0620-\u063F\u0641-\u064A\u0656-\u066F\u0671-\u06DC\u06DE-\u06FF\u0750-\u077F\u08A0-\u08B4\u08B6-\u08BD\u08D4-\u08E1\u08E3-\u08FF\uFB50-\uFBC1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFD\uFE70-\uFE74\uFE76-\uFEFC',
+            'astral': '\uD803[\uDE60-\uDE7E]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB\uDEF0\uDEF1]'
+        },
+        {
+            'name': 'Armenian',
+            'bmp': '\u0531-\u0556\u0559-\u055F\u0561-\u0587\u058A\u058D-\u058F\uFB13-\uFB17'
+        },
+        {
+            'name': 'Avestan',
+            'astral': '\uD802[\uDF00-\uDF35\uDF39-\uDF3F]'
+        },
+        {
+            'name': 'Balinese',
+            'bmp': '\u1B00-\u1B4B\u1B50-\u1B7C'
+        },
+        {
+            'name': 'Bamum',
+            'bmp': '\uA6A0-\uA6F7',
+            'astral': '\uD81A[\uDC00-\uDE38]'
+        },
+        {
+            'name': 'Bassa_Vah',
+            'astral': '\uD81A[\uDED0-\uDEED\uDEF0-\uDEF5]'
+        },
+        {
+            'name': 'Batak',
+            'bmp': '\u1BC0-\u1BF3\u1BFC-\u1BFF'
+        },
+        {
+            'name': 'Bengali',
+            'bmp': '\u0980-\u0983\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BC-\u09C4\u09C7\u09C8\u09CB-\u09CE\u09D7\u09DC\u09DD\u09DF-\u09E3\u09E6-\u09FD'
+        },
+        {
+            'name': 'Bhaiksuki',
+            'astral': '\uD807[\uDC00-\uDC08\uDC0A-\uDC36\uDC38-\uDC45\uDC50-\uDC6C]'
+        },
+        {
+            'name': 'Bopomofo',
+            'bmp': '\u02EA\u02EB\u3105-\u312E\u31A0-\u31BA'
+        },
+        {
+            'name': 'Brahmi',
+            'astral': '\uD804[\uDC00-\uDC4D\uDC52-\uDC6F\uDC7F]'
+        },
+        {
+            'name': 'Braille',
+            'bmp': '\u2800-\u28FF'
+        },
+        {
+            'name': 'Buginese',
+            'bmp': '\u1A00-\u1A1B\u1A1E\u1A1F'
+        },
+        {
+            'name': 'Buhid',
+            'bmp': '\u1740-\u1753'
+        },
+        {
+            'name': 'Canadian_Aboriginal',
+            'bmp': '\u1400-\u167F\u18B0-\u18F5'
+        },
+        {
+            'name': 'Carian',
+            'astral': '\uD800[\uDEA0-\uDED0]'
+        },
+        {
+            'name': 'Caucasian_Albanian',
+            'astral': '\uD801[\uDD30-\uDD63\uDD6F]'
+        },
+        {
+            'name': 'Chakma',
+            'astral': '\uD804[\uDD00-\uDD34\uDD36-\uDD43]'
+        },
+        {
+            'name': 'Cham',
+            'bmp': '\uAA00-\uAA36\uAA40-\uAA4D\uAA50-\uAA59\uAA5C-\uAA5F'
+        },
+        {
+            'name': 'Cherokee',
+            'bmp': '\u13A0-\u13F5\u13F8-\u13FD\uAB70-\uABBF'
+        },
+        {
+            'name': 'Common',
+            'bmp': '\0-@\\[-`\\{-\xA9\xAB-\xB9\xBB-\xBF\xD7\xF7\u02B9-\u02DF\u02E5-\u02E9\u02EC-\u02FF\u0374\u037E\u0385\u0387\u0589\u0605\u060C\u061B\u061F\u0640\u06DD\u08E2\u0964\u0965\u0E3F\u0FD5-\u0FD8\u10FB\u16EB-\u16ED\u1735\u1736\u1802\u1803\u1805\u1CD3\u1CE1\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5-\u1CF7\u2000-\u200B\u200E-\u2064\u2066-\u2070\u2074-\u207E\u2080-\u208E\u20A0-\u20BF\u2100-\u2125\u2127-\u2129\u212C-\u2131\u2133-\u214D\u214F-\u215F\u2189-\u218B\u2190-\u2426\u2440-\u244A\u2460-\u27FF\u2900-\u2B73\u2B76-\u2B95\u2B98-\u2BB9\u2BBD-\u2BC8\u2BCA-\u2BD2\u2BEC-\u2BEF\u2E00-\u2E49\u2FF0-\u2FFB\u3000-\u3004\u3006\u3008-\u3020\u3030-\u3037\u303C-\u303F\u309B\u309C\u30A0\u30FB\u30FC\u3190-\u319F\u31C0-\u31E3\u3220-\u325F\u327F-\u32CF\u3358-\u33FF\u4DC0-\u4DFF\uA700-\uA721\uA788-\uA78A\uA830-\uA839\uA92E\uA9CF\uAB5B\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE66\uFE68-\uFE6B\uFEFF\uFF01-\uFF20\uFF3B-\uFF40\uFF5B-\uFF65\uFF70\uFF9E\uFF9F\uFFE0-\uFFE6\uFFE8-\uFFEE\uFFF9-\uFFFD',
+            'astral': '\uD800[\uDD00-\uDD02\uDD07-\uDD33\uDD37-\uDD3F\uDD90-\uDD9B\uDDD0-\uDDFC\uDEE1-\uDEFB]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDC00-\uDCF5\uDD00-\uDD26\uDD29-\uDD66\uDD6A-\uDD7A\uDD83\uDD84\uDD8C-\uDDA9\uDDAE-\uDDE8\uDF00-\uDF56\uDF60-\uDF71]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDFCB\uDFCE-\uDFFF]|\uD83C[\uDC00-\uDC2B\uDC30-\uDC93\uDCA0-\uDCAE\uDCB1-\uDCBF\uDCC1-\uDCCF\uDCD1-\uDCF5\uDD00-\uDD0C\uDD10-\uDD2E\uDD30-\uDD6B\uDD70-\uDDAC\uDDE6-\uDDFF\uDE01\uDE02\uDE10-\uDE3B\uDE40-\uDE48\uDE50\uDE51\uDE60-\uDE65\uDF00-\uDFFF]|\uD83D[\uDC00-\uDED4\uDEE0-\uDEEC\uDEF0-\uDEF8\uDF00-\uDF73\uDF80-\uDFD4]|\uD83E[\uDC00-\uDC0B\uDC10-\uDC47\uDC50-\uDC59\uDC60-\uDC87\uDC90-\uDCAD\uDD00-\uDD0B\uDD10-\uDD3E\uDD40-\uDD4C\uDD50-\uDD6B\uDD80-\uDD97\uDDC0\uDDD0-\uDDE6]|\uDB40[\uDC01\uDC20-\uDC7F]'
+        },
+        {
+            'name': 'Coptic',
+            'bmp': '\u03E2-\u03EF\u2C80-\u2CF3\u2CF9-\u2CFF'
+        },
+        {
+            'name': 'Cuneiform',
+            'astral': '\uD808[\uDC00-\uDF99]|\uD809[\uDC00-\uDC6E\uDC70-\uDC74\uDC80-\uDD43]'
+        },
+        {
+            'name': 'Cypriot',
+            'astral': '\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F]'
+        },
+        {
+            'name': 'Cyrillic',
+            'bmp': '\u0400-\u0484\u0487-\u052F\u1C80-\u1C88\u1D2B\u1D78\u2DE0-\u2DFF\uA640-\uA69F\uFE2E\uFE2F'
+        },
+        {
+            'name': 'Deseret',
+            'astral': '\uD801[\uDC00-\uDC4F]'
+        },
+        {
+            'name': 'Devanagari',
+            'bmp': '\u0900-\u0950\u0953-\u0963\u0966-\u097F\uA8E0-\uA8FD'
+        },
+        {
+            'name': 'Duployan',
+            'astral': '\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99\uDC9C-\uDC9F]'
+        },
+        {
+            'name': 'Egyptian_Hieroglyphs',
+            'astral': '\uD80C[\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]'
+        },
+        {
+            'name': 'Elbasan',
+            'astral': '\uD801[\uDD00-\uDD27]'
+        },
+        {
+            'name': 'Ethiopic',
+            'bmp': '\u1200-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u135D-\u137C\u1380-\u1399\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E'
+        },
+        {
+            'name': 'Georgian',
+            'bmp': '\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u10FF\u2D00-\u2D25\u2D27\u2D2D'
+        },
+        {
+            'name': 'Glagolitic',
+            'bmp': '\u2C00-\u2C2E\u2C30-\u2C5E',
+            'astral': '\uD838[\uDC00-\uDC06\uDC08-\uDC18\uDC1B-\uDC21\uDC23\uDC24\uDC26-\uDC2A]'
+        },
+        {
+            'name': 'Gothic',
+            'astral': '\uD800[\uDF30-\uDF4A]'
+        },
+        {
+            'name': 'Grantha',
+            'astral': '\uD804[\uDF00-\uDF03\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3C-\uDF44\uDF47\uDF48\uDF4B-\uDF4D\uDF50\uDF57\uDF5D-\uDF63\uDF66-\uDF6C\uDF70-\uDF74]'
+        },
+        {
+            'name': 'Greek',
+            'bmp': '\u0370-\u0373\u0375-\u0377\u037A-\u037D\u037F\u0384\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03E1\u03F0-\u03FF\u1D26-\u1D2A\u1D5D-\u1D61\u1D66-\u1D6A\u1DBF\u1F00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FC4\u1FC6-\u1FD3\u1FD6-\u1FDB\u1FDD-\u1FEF\u1FF2-\u1FF4\u1FF6-\u1FFE\u2126\uAB65',
+            'astral': '\uD800[\uDD40-\uDD8E\uDDA0]|\uD834[\uDE00-\uDE45]'
+        },
+        {
+            'name': 'Gujarati',
+            'bmp': '\u0A81-\u0A83\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABC-\u0AC5\u0AC7-\u0AC9\u0ACB-\u0ACD\u0AD0\u0AE0-\u0AE3\u0AE6-\u0AF1\u0AF9-\u0AFF'
+        },
+        {
+            'name': 'Gurmukhi',
+            'bmp': '\u0A01-\u0A03\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A3C\u0A3E-\u0A42\u0A47\u0A48\u0A4B-\u0A4D\u0A51\u0A59-\u0A5C\u0A5E\u0A66-\u0A75'
+        },
+        {
+            'name': 'Han',
+            'bmp': '\u2E80-\u2E99\u2E9B-\u2EF3\u2F00-\u2FD5\u3005\u3007\u3021-\u3029\u3038-\u303B\u3400-\u4DB5\u4E00-\u9FEA\uF900-\uFA6D\uFA70-\uFAD9',
+            'astral': '[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]'
+        },
+        {
+            'name': 'Hangul',
+            'bmp': '\u1100-\u11FF\u302E\u302F\u3131-\u318E\u3200-\u321E\u3260-\u327E\uA960-\uA97C\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC'
+        },
+        {
+            'name': 'Hanunoo',
+            'bmp': '\u1720-\u1734'
+        },
+        {
+            'name': 'Hatran',
+            'astral': '\uD802[\uDCE0-\uDCF2\uDCF4\uDCF5\uDCFB-\uDCFF]'
+        },
+        {
+            'name': 'Hebrew',
+            'bmp': '\u0591-\u05C7\u05D0-\u05EA\u05F0-\u05F4\uFB1D-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFB4F'
+        },
+        {
+            'name': 'Hiragana',
+            'bmp': '\u3041-\u3096\u309D-\u309F',
+            'astral': '\uD82C[\uDC01-\uDD1E]|\uD83C\uDE00'
+        },
+        {
+            'name': 'Imperial_Aramaic',
+            'astral': '\uD802[\uDC40-\uDC55\uDC57-\uDC5F]'
+        },
+        {
+            'name': 'Inherited',
+            'bmp': '\u0300-\u036F\u0485\u0486\u064B-\u0655\u0670\u0951\u0952\u1AB0-\u1ABE\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8\u1CF9\u1DC0-\u1DF9\u1DFB-\u1DFF\u200C\u200D\u20D0-\u20F0\u302A-\u302D\u3099\u309A\uFE00-\uFE0F\uFE20-\uFE2D',
+            'astral': '\uD800[\uDDFD\uDEE0]|\uD834[\uDD67-\uDD69\uDD7B-\uDD82\uDD85-\uDD8B\uDDAA-\uDDAD]|\uDB40[\uDD00-\uDDEF]'
+        },
+        {
+            'name': 'Inscriptional_Pahlavi',
+            'astral': '\uD802[\uDF60-\uDF72\uDF78-\uDF7F]'
+        },
+        {
+            'name': 'Inscriptional_Parthian',
+            'astral': '\uD802[\uDF40-\uDF55\uDF58-\uDF5F]'
+        },
+        {
+            'name': 'Javanese',
+            'bmp': '\uA980-\uA9CD\uA9D0-\uA9D9\uA9DE\uA9DF'
+        },
+        {
+            'name': 'Kaithi',
+            'astral': '\uD804[\uDC80-\uDCC1]'
+        },
+        {
+            'name': 'Kannada',
+            'bmp': '\u0C80-\u0C83\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBC-\u0CC4\u0CC6-\u0CC8\u0CCA-\u0CCD\u0CD5\u0CD6\u0CDE\u0CE0-\u0CE3\u0CE6-\u0CEF\u0CF1\u0CF2'
+        },
+        {
+            'name': 'Katakana',
+            'bmp': '\u30A1-\u30FA\u30FD-\u30FF\u31F0-\u31FF\u32D0-\u32FE\u3300-\u3357\uFF66-\uFF6F\uFF71-\uFF9D',
+            'astral': '\uD82C\uDC00'
+        },
+        {
+            'name': 'Kayah_Li',
+            'bmp': '\uA900-\uA92D\uA92F'
+        },
+        {
+            'name': 'Kharoshthi',
+            'astral': '\uD802[\uDE00-\uDE03\uDE05\uDE06\uDE0C-\uDE13\uDE15-\uDE17\uDE19-\uDE33\uDE38-\uDE3A\uDE3F-\uDE47\uDE50-\uDE58]'
+        },
+        {
+            'name': 'Khmer',
+            'bmp': '\u1780-\u17DD\u17E0-\u17E9\u17F0-\u17F9\u19E0-\u19FF'
+        },
+        {
+            'name': 'Khojki',
+            'astral': '\uD804[\uDE00-\uDE11\uDE13-\uDE3E]'
+        },
+        {
+            'name': 'Khudawadi',
+            'astral': '\uD804[\uDEB0-\uDEEA\uDEF0-\uDEF9]'
+        },
+        {
+            'name': 'Lao',
+            'bmp': '\u0E81\u0E82\u0E84\u0E87\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA\u0EAB\u0EAD-\u0EB9\u0EBB-\u0EBD\u0EC0-\u0EC4\u0EC6\u0EC8-\u0ECD\u0ED0-\u0ED9\u0EDC-\u0EDF'
+        },
+        {
+            'name': 'Latin',
+            'bmp': 'A-Za-z\xAA\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02B8\u02E0-\u02E4\u1D00-\u1D25\u1D2C-\u1D5C\u1D62-\u1D65\u1D6B-\u1D77\u1D79-\u1DBE\u1E00-\u1EFF\u2071\u207F\u2090-\u209C\u212A\u212B\u2132\u214E\u2160-\u2188\u2C60-\u2C7F\uA722-\uA787\uA78B-\uA7AE\uA7B0-\uA7B7\uA7F7-\uA7FF\uAB30-\uAB5A\uAB5C-\uAB64\uFB00-\uFB06\uFF21-\uFF3A\uFF41-\uFF5A'
+        },
+        {
+            'name': 'Lepcha',
+            'bmp': '\u1C00-\u1C37\u1C3B-\u1C49\u1C4D-\u1C4F'
+        },
+        {
+            'name': 'Limbu',
+            'bmp': '\u1900-\u191E\u1920-\u192B\u1930-\u193B\u1940\u1944-\u194F'
+        },
+        {
+            'name': 'Linear_A',
+            'astral': '\uD801[\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]'
+        },
+        {
+            'name': 'Linear_B',
+            'astral': '\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA]'
+        },
+        {
+            'name': 'Lisu',
+            'bmp': '\uA4D0-\uA4FF'
+        },
+        {
+            'name': 'Lycian',
+            'astral': '\uD800[\uDE80-\uDE9C]'
+        },
+        {
+            'name': 'Lydian',
+            'astral': '\uD802[\uDD20-\uDD39\uDD3F]'
+        },
+        {
+            'name': 'Mahajani',
+            'astral': '\uD804[\uDD50-\uDD76]'
+        },
+        {
+            'name': 'Malayalam',
+            'bmp': '\u0D00-\u0D03\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D44\u0D46-\u0D48\u0D4A-\u0D4F\u0D54-\u0D63\u0D66-\u0D7F'
+        },
+        {
+            'name': 'Mandaic',
+            'bmp': '\u0840-\u085B\u085E'
+        },
+        {
+            'name': 'Manichaean',
+            'astral': '\uD802[\uDEC0-\uDEE6\uDEEB-\uDEF6]'
+        },
+        {
+            'name': 'Marchen',
+            'astral': '\uD807[\uDC70-\uDC8F\uDC92-\uDCA7\uDCA9-\uDCB6]'
+        },
+        {
+            'name': 'Masaram_Gondi',
+            'astral': '\uD807[\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD36\uDD3A\uDD3C\uDD3D\uDD3F-\uDD47\uDD50-\uDD59]'
+        },
+        {
+            'name': 'Meetei_Mayek',
+            'bmp': '\uAAE0-\uAAF6\uABC0-\uABED\uABF0-\uABF9'
+        },
+        {
+            'name': 'Mende_Kikakui',
+            'astral': '\uD83A[\uDC00-\uDCC4\uDCC7-\uDCD6]'
+        },
+        {
+            'name': 'Meroitic_Cursive',
+            'astral': '\uD802[\uDDA0-\uDDB7\uDDBC-\uDDCF\uDDD2-\uDDFF]'
+        },
+        {
+            'name': 'Meroitic_Hieroglyphs',
+            'astral': '\uD802[\uDD80-\uDD9F]'
+        },
+        {
+            'name': 'Miao',
+            'astral': '\uD81B[\uDF00-\uDF44\uDF50-\uDF7E\uDF8F-\uDF9F]'
+        },
+        {
+            'name': 'Modi',
+            'astral': '\uD805[\uDE00-\uDE44\uDE50-\uDE59]'
+        },
+        {
+            'name': 'Mongolian',
+            'bmp': '\u1800\u1801\u1804\u1806-\u180E\u1810-\u1819\u1820-\u1877\u1880-\u18AA',
+            'astral': '\uD805[\uDE60-\uDE6C]'
+        },
+        {
+            'name': 'Mro',
+            'astral': '\uD81A[\uDE40-\uDE5E\uDE60-\uDE69\uDE6E\uDE6F]'
+        },
+        {
+            'name': 'Multani',
+            'astral': '\uD804[\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA9]'
+        },
+        {
+            'name': 'Myanmar',
+            'bmp': '\u1000-\u109F\uA9E0-\uA9FE\uAA60-\uAA7F'
+        },
+        {
+            'name': 'Nabataean',
+            'astral': '\uD802[\uDC80-\uDC9E\uDCA7-\uDCAF]'
+        },
+        {
+            'name': 'New_Tai_Lue',
+            'bmp': '\u1980-\u19AB\u19B0-\u19C9\u19D0-\u19DA\u19DE\u19DF'
+        },
+        {
+            'name': 'Newa',
+            'astral': '\uD805[\uDC00-\uDC59\uDC5B\uDC5D]'
+        },
+        {
+            'name': 'Nko',
+            'bmp': '\u07C0-\u07FA'
+        },
+        {
+            'name': 'Nushu',
+            'astral': '\uD81B\uDFE1|\uD82C[\uDD70-\uDEFB]'
+        },
+        {
+            'name': 'Ogham',
+            'bmp': '\u1680-\u169C'
+        },
+        {
+            'name': 'Ol_Chiki',
+            'bmp': '\u1C50-\u1C7F'
+        },
+        {
+            'name': 'Old_Hungarian',
+            'astral': '\uD803[\uDC80-\uDCB2\uDCC0-\uDCF2\uDCFA-\uDCFF]'
+        },
+        {
+            'name': 'Old_Italic',
+            'astral': '\uD800[\uDF00-\uDF23\uDF2D-\uDF2F]'
+        },
+        {
+            'name': 'Old_North_Arabian',
+            'astral': '\uD802[\uDE80-\uDE9F]'
+        },
+        {
+            'name': 'Old_Permic',
+            'astral': '\uD800[\uDF50-\uDF7A]'
+        },
+        {
+            'name': 'Old_Persian',
+            'astral': '\uD800[\uDFA0-\uDFC3\uDFC8-\uDFD5]'
+        },
+        {
+            'name': 'Old_South_Arabian',
+            'astral': '\uD802[\uDE60-\uDE7F]'
+        },
+        {
+            'name': 'Old_Turkic',
+            'astral': '\uD803[\uDC00-\uDC48]'
+        },
+        {
+            'name': 'Oriya',
+            'bmp': '\u0B01-\u0B03\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3C-\u0B44\u0B47\u0B48\u0B4B-\u0B4D\u0B56\u0B57\u0B5C\u0B5D\u0B5F-\u0B63\u0B66-\u0B77'
+        },
+        {
+            'name': 'Osage',
+            'astral': '\uD801[\uDCB0-\uDCD3\uDCD8-\uDCFB]'
+        },
+        {
+            'name': 'Osmanya',
+            'astral': '\uD801[\uDC80-\uDC9D\uDCA0-\uDCA9]'
+        },
+        {
+            'name': 'Pahawh_Hmong',
+            'astral': '\uD81A[\uDF00-\uDF45\uDF50-\uDF59\uDF5B-\uDF61\uDF63-\uDF77\uDF7D-\uDF8F]'
+        },
+        {
+            'name': 'Palmyrene',
+            'astral': '\uD802[\uDC60-\uDC7F]'
+        },
+        {
+            'name': 'Pau_Cin_Hau',
+            'astral': '\uD806[\uDEC0-\uDEF8]'
+        },
+        {
+            'name': 'Phags_Pa',
+            'bmp': '\uA840-\uA877'
+        },
+        {
+            'name': 'Phoenician',
+            'astral': '\uD802[\uDD00-\uDD1B\uDD1F]'
+        },
+        {
+            'name': 'Psalter_Pahlavi',
+            'astral': '\uD802[\uDF80-\uDF91\uDF99-\uDF9C\uDFA9-\uDFAF]'
+        },
+        {
+            'name': 'Rejang',
+            'bmp': '\uA930-\uA953\uA95F'
+        },
+        {
+            'name': 'Runic',
+            'bmp': '\u16A0-\u16EA\u16EE-\u16F8'
+        },
+        {
+            'name': 'Samaritan',
+            'bmp': '\u0800-\u082D\u0830-\u083E'
+        },
+        {
+            'name': 'Saurashtra',
+            'bmp': '\uA880-\uA8C5\uA8CE-\uA8D9'
+        },
+        {
+            'name': 'Sharada',
+            'astral': '\uD804[\uDD80-\uDDCD\uDDD0-\uDDDF]'
+        },
+        {
+            'name': 'Shavian',
+            'astral': '\uD801[\uDC50-\uDC7F]'
+        },
+        {
+            'name': 'Siddham',
+            'astral': '\uD805[\uDD80-\uDDB5\uDDB8-\uDDDD]'
+        },
+        {
+            'name': 'SignWriting',
+            'astral': '\uD836[\uDC00-\uDE8B\uDE9B-\uDE9F\uDEA1-\uDEAF]'
+        },
+        {
+            'name': 'Sinhala',
+            'bmp': '\u0D82\u0D83\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0DCA\u0DCF-\u0DD4\u0DD6\u0DD8-\u0DDF\u0DE6-\u0DEF\u0DF2-\u0DF4',
+            'astral': '\uD804[\uDDE1-\uDDF4]'
+        },
+        {
+            'name': 'Sora_Sompeng',
+            'astral': '\uD804[\uDCD0-\uDCE8\uDCF0-\uDCF9]'
+        },
+        {
+            'name': 'Soyombo',
+            'astral': '\uD806[\uDE50-\uDE83\uDE86-\uDE9C\uDE9E-\uDEA2]'
+        },
+        {
+            'name': 'Sundanese',
+            'bmp': '\u1B80-\u1BBF\u1CC0-\u1CC7'
+        },
+        {
+            'name': 'Syloti_Nagri',
+            'bmp': '\uA800-\uA82B'
+        },
+        {
+            'name': 'Syriac',
+            'bmp': '\u0700-\u070D\u070F-\u074A\u074D-\u074F\u0860-\u086A'
+        },
+        {
+            'name': 'Tagalog',
+            'bmp': '\u1700-\u170C\u170E-\u1714'
+        },
+        {
+            'name': 'Tagbanwa',
+            'bmp': '\u1760-\u176C\u176E-\u1770\u1772\u1773'
+        },
+        {
+            'name': 'Tai_Le',
+            'bmp': '\u1950-\u196D\u1970-\u1974'
+        },
+        {
+            'name': 'Tai_Tham',
+            'bmp': '\u1A20-\u1A5E\u1A60-\u1A7C\u1A7F-\u1A89\u1A90-\u1A99\u1AA0-\u1AAD'
+        },
+        {
+            'name': 'Tai_Viet',
+            'bmp': '\uAA80-\uAAC2\uAADB-\uAADF'
+        },
+        {
+            'name': 'Takri',
+            'astral': '\uD805[\uDE80-\uDEB7\uDEC0-\uDEC9]'
+        },
+        {
+            'name': 'Tamil',
+            'bmp': '\u0B82\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BBE-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCD\u0BD0\u0BD7\u0BE6-\u0BFA'
+        },
+        {
+            'name': 'Tangut',
+            'astral': '\uD81B\uDFE0|[\uD81C-\uD820][\uDC00-\uDFFF]|\uD821[\uDC00-\uDFEC]|\uD822[\uDC00-\uDEF2]'
+        },
+        {
+            'name': 'Telugu',
+            'bmp': '\u0C00-\u0C03\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D-\u0C44\u0C46-\u0C48\u0C4A-\u0C4D\u0C55\u0C56\u0C58-\u0C5A\u0C60-\u0C63\u0C66-\u0C6F\u0C78-\u0C7F'
+        },
+        {
+            'name': 'Thaana',
+            'bmp': '\u0780-\u07B1'
+        },
+        {
+            'name': 'Thai',
+            'bmp': '\u0E01-\u0E3A\u0E40-\u0E5B'
+        },
+        {
+            'name': 'Tibetan',
+            'bmp': '\u0F00-\u0F47\u0F49-\u0F6C\u0F71-\u0F97\u0F99-\u0FBC\u0FBE-\u0FCC\u0FCE-\u0FD4\u0FD9\u0FDA'
+        },
+        {
+            'name': 'Tifinagh',
+            'bmp': '\u2D30-\u2D67\u2D6F\u2D70\u2D7F'
+        },
+        {
+            'name': 'Tirhuta',
+            'astral': '\uD805[\uDC80-\uDCC7\uDCD0-\uDCD9]'
+        },
+        {
+            'name': 'Ugaritic',
+            'astral': '\uD800[\uDF80-\uDF9D\uDF9F]'
+        },
+        {
+            'name': 'Vai',
+            'bmp': '\uA500-\uA62B'
+        },
+        {
+            'name': 'Warang_Citi',
+            'astral': '\uD806[\uDCA0-\uDCF2\uDCFF]'
+        },
+        {
+            'name': 'Yi',
+            'bmp': '\uA000-\uA48C\uA490-\uA4C6'
+        },
+        {
+            'name': 'Zanabazar_Square',
+            'astral': '\uD806[\uDE00-\uDE47]'
+        }
+    ];
+
+    var unicodeScripts = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+      value: true
+    });
+
+
+
+    var _scripts2 = _interopRequireDefault(scripts);
+
+    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+    exports.default = function (XRegExp) {
+
+      /**
+       * Adds support for all Unicode scripts. E.g., `\p{Latin}`. Token names are case insensitive,
+       * and any spaces, hyphens, and underscores are ignored.
+       *
+       * Uses Unicode 10.0.0.
+       *
+       * @requires XRegExp, Unicode Base
+       */
+
+      if (!XRegExp.addUnicodeData) {
+        throw new ReferenceError('Unicode Base must be loaded before Unicode Scripts');
+      }
+
+      XRegExp.addUnicodeData(_scripts2.default);
+    }; /*!
+        * XRegExp Unicode Scripts 4.1.1
+        * <xregexp.com>
+        * Steven Levithan (c) 2010-present MIT License
+        * Unicode data by Mathias Bynens <mathiasbynens.be>
+        */
+
+    module.exports = exports['default'];
+    });
+
+    unwrapExports(unicodeScripts);
+
+    var lib$1 = createCommonjsModule(function (module, exports) {
+
+    Object.defineProperty(exports, "__esModule", {
+      value: true
+    });
+
+
+
+    var _xregexp2 = _interopRequireDefault(xregexp);
+
+
+
+    var _build2 = _interopRequireDefault(build);
+
+
+
+    var _matchrecursive2 = _interopRequireDefault(matchrecursive);
+
+
+
+    var _unicodeBase2 = _interopRequireDefault(unicodeBase);
+
+
+
+    var _unicodeBlocks2 = _interopRequireDefault(unicodeBlocks);
+
+
+
+    var _unicodeCategories2 = _interopRequireDefault(unicodeCategories);
+
+
+
+    var _unicodeProperties2 = _interopRequireDefault(unicodeProperties);
+
+
+
+    var _unicodeScripts2 = _interopRequireDefault(unicodeScripts);
+
+    function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
+
+    (0, _build2.default)(_xregexp2.default);
+    (0, _matchrecursive2.default)(_xregexp2.default);
+    (0, _unicodeBase2.default)(_xregexp2.default);
+    (0, _unicodeBlocks2.default)(_xregexp2.default);
+    (0, _unicodeCategories2.default)(_xregexp2.default);
+    (0, _unicodeProperties2.default)(_xregexp2.default);
+    (0, _unicodeScripts2.default)(_xregexp2.default);
+
+    exports.default = _xregexp2.default;
+    module.exports = exports['default'];
+    });
+
+    var XRegExp = unwrapExports(lib$1);
+
+    /*! http://mths.be/repeat v0.2.0 by @mathias */
+    if (!String.prototype.repeat) {
+    	(function() {
+    		var defineProperty = (function() {
+    			// IE 8 only supports `Object.defineProperty` on DOM elements
+    			try {
+    				var object = {};
+    				var $defineProperty = Object.defineProperty;
+    				var result = $defineProperty(object, object, object) && $defineProperty;
+    			} catch(error) {}
+    			return result;
+    		}());
+    		var repeat = function(count) {
+    			if (this == null) {
+    				throw TypeError();
+    			}
+    			var string = String(this);
+    			// `ToInteger`
+    			var n = count ? Number(count) : 0;
+    			if (n != n) { // better `isNaN`
+    				n = 0;
+    			}
+    			// Account for out-of-bounds indices
+    			if (n < 0 || n == Infinity) {
+    				throw RangeError();
+    			}
+    			var result = '';
+    			while (n) {
+    				if (n % 2 == 1) {
+    					result += string;
+    				}
+    				if (n > 1) {
+    					string += string;
+    				}
+    				n >>= 1;
+    			}
+    			return result;
+    		};
+    		if (defineProperty) {
+    			defineProperty(String.prototype, 'repeat', {
+    				'value': repeat,
+    				'configurable': true,
+    				'writable': true
+    			});
+    		} else {
+    			String.prototype.repeat = repeat;
+    		}
+    	}());
+    }
+
+    var normalizeURI$1 = normalizeURI;
+    var unescapeString$1 = unescapeString;
+
+    // Constants for character codes:
+
+    var C_NEWLINE = 10;
+    var C_ASTERISK = 42;
+    var C_UNDERSCORE = 95;
+    var C_BACKTICK = 96;
+    var C_OPEN_BRACKET = 91;
+    var C_CLOSE_BRACKET = 93;
+    var C_LESSTHAN = 60;
+    var C_BANG = 33;
+    var C_BACKSLASH$1 = 92;
+    var C_AMPERSAND = 38;
+    var C_OPEN_PAREN = 40;
+    var C_CLOSE_PAREN = 41;
+    var C_COLON = 58;
+    var C_SINGLEQUOTE = 39;
+    var C_DOUBLEQUOTE = 34;
+    var C_AT_SIGN = 64;
+    var C_SEMICOLON = 59;
+    var C_UPPER_X = 88;
+    var C_LOWER_X = 120;
+    var C_TILDE = 126;
+    var C_NUMBER_SIGN = 35;
+    var C_DOLLAR_SIGN = 36;
+
+    // Some regexps used in inline parser:
+
+    var ESCAPABLE$1 = ESCAPABLE;
+    var ESCAPED_CHAR = "\\\\" + ESCAPABLE$1;
+
+    var ENTITY$1 = ENTITY;
+    var reHtmlTag$1 = reHtmlTag;
+
+    var rePunctuation = new RegExp(
+        /^[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/
+    );
+
+    var reLinkSize = new RegExp('^=([0-9]*)x([0-9]*)');
+
+    var reLinkTitle = new RegExp(
+        '^(?:"(' +
+            ESCAPED_CHAR +
+            '|[^"\\x00])*"' +
+            "|" +
+            "'(" +
+            ESCAPED_CHAR +
+            "|[^'\\x00])*'" +
+            "|" +
+            "\\((" +
+            ESCAPED_CHAR +
+            "|[^()\\x00])*\\))"
+    );
+
+    var reLinkDestinationBraces = /^(?:<(?:[^<>\n\\\x00]|\\.)*>)/;
+
+    var reEscapable = new RegExp("^" + ESCAPABLE$1);
+
+    var reEntityHere = new RegExp("^" + ENTITY$1, "i");
+
+    var reTicks = /`+/;
+
+    var reTicksHere = /^`+/;
+
+    var reEllipses = /\.\.\./g;
+
+    var reDash = /--+/g;
+
+    var reEmailAutolink = /^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/;
+
+    var reAutolink = /^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\x00-\x20]*>/i;
+
+    var reSpnl = /^ *(?:\n *)?/;
+
+    var reWhitespaceChar = /^[ \t\n\x0b\x0c\x0d]/;
+
+    var reUnicodeWhitespaceChar = /^\s/;
+
+    var reFinalSpace = / *$/;
+
+    var reInitialSpace = /^ */;
+
+    var reSpaceAtEndOfLine = /^ *(?:\n|$)/;
+
+    var reNonWord = /^\W+$/;
+
+    var reLinkLabel = /^\[(?:[^\\\[\]]|\\.){0,1000}\]/s;
+
+    var reDelimChar = /^[*_~]/;
+
+    var reDelimCharAll = /^[\W]/;
+
+    // Adapted from https://github.com/gregjacobs/Autolinker.js
+    var emailAlphaNumericChars = "\\p{L}\\p{Nd}";
+    var emailSpecialCharacters = '!#$%&\'*+\\-\\/=?^_`{|}~';
+    var emailRestrictedSpecialCharacters = "\\s(),:;<>@\\[\\]";
+    var emailValidCharacters = emailAlphaNumericChars + emailSpecialCharacters;
+    var emailValidRestrictedCharacters = emailValidCharacters + emailRestrictedSpecialCharacters;
+
+    // Matches a proper email address
+    var emailStartPattern = "(?:[" + emailValidCharacters + "](?:[" + emailValidCharacters + ']|\\.(?!\\.|@))*|\\"[' + emailValidRestrictedCharacters + '.]+\\")@';
+
+    var reDelimChar = /^[*_~]/;
+
+    var reDelimCharAll = /^[\W]/;
+
+    // Adapted from https://github.com/gregjacobs/Autolinker.js
+    var emailAlphaNumericChars = "\\p{L}\\p{Nd}";
+    var emailSpecialCharacters = '!#$%&\'*+\\-\\/=?^_`{|}~';
+    var emailRestrictedSpecialCharacters = "\\s(),:;<>@\\[\\]";
+    var emailValidCharacters = emailAlphaNumericChars + emailSpecialCharacters;
+    var emailValidRestrictedCharacters = emailValidCharacters + emailRestrictedSpecialCharacters;
+
+    // Matches a proper email address
+    var emailStartPattern = "(?:[" + emailValidCharacters + "](?:[" + emailValidCharacters + ']|\\.(?!\\.|@))*|\\"[' + emailValidRestrictedCharacters + '.]+\\")@';
+
+    // Matches a string of non-special characters.
+    var reMain = XRegExp.cache('^[\\s\\S]+?(?=[\\n`\\[\\]\\\\!<&*_\'"@:;xX~#$]|[a-z][a-z0-9.+-]{1,31}:|www\\d{0,3}\\.|[' + emailValidCharacters + ".]{1,64}@|$)");
+
+    var text = function(s) {
+        var node = new Node("text");
+        node._literal = s;
+        return node;
+    };
+
+    // normalize a reference in reference link (remove []s, trim,
+    // collapse internal space, unicode case fold.
+    // See commonmark/commonmark.js#168.
+    var normalizeReference = function(string) {
+        return string
+            .slice(1, string.length - 1)
+            .trim()
+            .replace(/[ \t\r\n]+/, " ")
+            .toLowerCase()
+            .toUpperCase();
+    };
+
+    // INLINE PARSER
+
+    // These are methods of an InlineParser object, defined below.
+    // An InlineParser keeps track of a subject (a string to be
+    // parsed) and a position in that subject.
+
+    // If re matches at current position in the subject, advance
+    // position in subject and return the match; otherwise return null.
+    var match = function(re) {
+        var m = this.matchRegex(re);
+        if (m === null) {
             return null;
         } else {
-            this.pos += m.index + m[0].length;
             return m[0];
         }
     };
 
+    var matchRegex = function(re) {
+        var m = re.exec(this.subject.slice(this.pos));
+        if (m === null) {
+            return null;
+        } else {
+            this.pos += m.index + m[0].length;
+            return m;
+        }
+    };
+
+    var tryMatch = function(re) {
+        var m = re.exec(this.subject.slice(this.pos));
+        if (m === null) {
+            return null;
+        } else {
+            return m;
+        }
+    };
+
+    var acceptMatch = function(m) {
+        this.pos += m.index + m[0].length;
+    };
+
     // Returns the code for the character at the current subject position, or -1
     // there are no more characters.
     var peek = function() {
@@ -7831,6 +12758,11 @@
                 } else {
                     node._literal = contents;
                 }
+
+                if (block.type === "table_cell") {
+                    node._literal = node._literal.replace(/\\\|/g, "|");
+                }
+
                 block.appendChild(node);
                 return true;
             }
@@ -7925,7 +12857,8 @@
             }
         }
 
-        if (numdelims === 0) {
+        if (numdelims === 0 || (cc === C_TILDE && numdelims < 2)) {
+            this.pos -= numdelims;
             return null;
         }
 
@@ -7954,7 +12887,7 @@
         if (cc === C_UNDERSCORE) {
             can_open = left_flanking && (!right_flanking || before_is_punctuation);
             can_close = right_flanking && (!left_flanking || after_is_punctuation);
-        } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {
+        } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE || cc === C_TILDE) {
             can_open = left_flanking && !right_flanking;
             can_close = right_flanking;
         } else {
@@ -7965,7 +12898,7 @@
         return { numdelims: numdelims, can_open: can_open, can_close: can_close };
     };
 
-    // Handle a delimiter marker for emphasis or a quote.
+    // Handle a delimiter marker for emphasis, quotes, or deleted text.
     var handleDelim = function(cc, block) {
         var res = this.scanDelims(cc);
         if (!res) {
@@ -8080,7 +13013,7 @@
                         (closer.can_open || opener.can_close) &&
                         closer.origdelims % 3 !== 0 &&
                         (opener.origdelims + closer.origdelims) % 3 === 0;
-                    if (opener.cc === closer.cc && opener.can_open && !odd_match) {
+                    if (opener.cc === closer.cc && opener.can_open && (!odd_match || opener.cc === C_TILDE)) {
                         opener_found = true;
                         break;
                     }
@@ -8140,6 +13073,40 @@
                             closer = tempstack;
                         }
                     }
+
+                } else if (closercc === C_TILDE) {
+                    if (!opener_found) {
+                        closer = closer.next;
+                    } else {
+                        opener_inl = opener.node;
+                        closer_inl = closer.node;
+
+                        // build contents for new del element
+                        var emph = new Node("del");
+
+                        tmp = opener_inl._next;
+                        while (tmp && tmp !== closer_inl) {
+                            next = tmp._next;
+                            tmp.unlink();
+                            emph.appendChild(tmp);
+                            tmp = next;
+                        }
+
+                        opener_inl.insertAfter(emph);
+
+                        // remove elts between opener and closer in delimiters stack
+                        removeDelimitersBetween(opener, closer);
+
+                        // remove the opening and closing delimiters
+                        opener_inl.unlink();
+                        this.removeDelimiter(opener);
+
+                        closer_inl.unlink();
+                        tempstack = closer.next;
+                        this.removeDelimiter(closer);
+                        closer = tempstack;
+                    }
+
                 } else if (closercc === C_SINGLEQUOTE) {
                     closer.node._literal = "\u2019";
                     if (opener_found) {
@@ -8172,6 +13139,29 @@
         }
     };
 
+    var parseLinkSize = function() {
+        var size_matches = this.match(reLinkSize);
+
+        if (size_matches === null) {
+            return null;
+        } else {
+            var detailed = size_matches.match(reLinkSize);
+            var width = detailed[1];
+            var height = detailed[2];
+            var size = {};
+
+            if (width) {
+                size.width = parseInt(width);
+            }
+
+            if (height) {
+                size.height = parseInt(height);
+            }
+
+            return size;
+        }
+    };
+
     // Attempt to parse link title (sans quotes), returning the string
     // or null if no match.
     var parseLinkTitle = function() {
@@ -8285,6 +13275,7 @@
         var startpos;
         var is_image;
         var dest;
+        var size;
         var title;
         var matched = false;
         var reflabel;
@@ -8324,6 +13315,8 @@
                 this.spnl() &&
                 (dest = this.parseLinkDestination()) !== null &&
                 this.spnl() &&
+                (size = this.parseLinkSize() || true) &&
+                this.spnl() &&
                 // make sure there's a space before the title:
                 ((reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) &&
                     (title = this.parseLinkTitle())) ||
@@ -8369,6 +13362,7 @@
             var node = new Node(is_image ? "image" : "link");
             node._destination = dest;
             node._title = title || "";
+            node._size = size;
 
             var tmp, next;
             tmp = opener.node._next;
@@ -8407,35 +13401,291 @@
         }
     };
 
-    var addBracket = function(node, index, image) {
-        if (this.brackets !== null) {
-            this.brackets.bracketAfter = true;
+    var addBracket = function(node, index, image) {
+        if (this.brackets !== null) {
+            this.brackets.bracketAfter = true;
+        }
+        this.brackets = {
+            node: node,
+            previous: this.brackets,
+            previousDelimiter: this.delimiters,
+            index: index,
+            image: image,
+            active: true
+        };
+    };
+
+    var removeBracket = function() {
+        this.brackets = this.brackets.previous;
+    };
+
+    // Attempt to parse an entity.
+    var parseEntity = function(block) {
+        var m;
+        if ((m = this.match(reEntityHere))) {
+            block.appendChild(text(lib_9(m)));
+            return true;
+        } else {
+            return false;
+        }
+    };
+
+    // Attempt to parse a url
+    var reUrl = XRegExp.cache('^(?:[A-Za-z][A-Za-z\\d-.+]*:(?:\\/{1,3}|[\\pL\\d%])|www\\d{0,3}[.]|[\\pL\\d.\\-]+[.]\\pL{2,4}\\/)(?:\\[[\\da-f:]+\\]|[^\\s`!()\\[\\]{;:\'",<>?«»“”‘’*_]|[*_]+(?=[^_*\\s])|[`!\\[\\]{;:\'",<>?«»“”‘’](?=[^\\s()<>])|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+', 'i');
+    var parseUrl = function(block) {
+        if (this.brackets) {
+            // Don't perform autolinking while inside an explicit link
+            return false;
+        }
+
+        var m;
+        if ((m = this.tryMatch(reUrl))) {
+            // Only link urls after non-word, non-formatting characters
+            if (this.pos !== 0 && this.subject[this.pos - 1] !== "_" && !reNonWord.test(this.subject[this.pos - 1])) {
+                return false;
+            }
+
+            // Step back to remove trailing punctuation like how GitHub does
+            // https://github.com/github/cmark/blob/master/extensions/autolink.c#L58
+            var url = m[0];
+            while ((/[?!.,,:*_~'"]$/).test(url)) {
+                url = url.substring(0, url.length - 1);
+            }
+
+            if (this.options.urlFilter && !this.options.urlFilter(url)) {
+                return false;
+            }
+
+            this.pos += m.index + url.length;
+
+            var node = new Node("link");
+            node._destination = normalizeURI$1(url);
+            node._title = "";
+            node.appendChild(text(url));
+            block.appendChild(node);
+
+            return true;
+        } else {
+            return false;
+        }
+    };
+
+    // Attempt to parse an at mention
+    var reAtMention = /^@([a-z][a-z0-9._-]*)/i;
+    var parseAtMention = function(block) {
+        if (this.brackets) {
+            // Don't perform autolinking while inside an explicit link
+            return false;
+        }
+
+        var m;
+        if ((m = this.tryMatch(reAtMention))) {
+            // Only allow at mentions after non-word characters
+            if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+                this.acceptMatch(m);
+
+                // It's up to the renderer to determine what part of this is actually a username
+                var node = new Node("at_mention");
+                node._mentionName = m[1];
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    };
+
+    // Attempt to parse a channel link
+    var reChannelLink = /^~([a-z0-9_-]+)/i;
+    var parseChannelLink = function(block) {
+        if (this.brackets) {
+            // Don't perform autolinking while inside an explicit link
+            return false;
+        }
+
+        var m;
+        if ((m = this.tryMatch(reChannelLink))) {
+            // Only allow channel links after non-word characters
+            if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+                this.acceptMatch(m);
+
+                // It's up to the renderer to determine if this is actually a channel link
+                var node = new Node("channel_link");
+                node._channelName = m[1];
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    };
+
+    // Attempt to parse a named emoji
+    var reEmoji = /^:([a-z0-9_\-+]+):\B/i;
+    var parseEmoji = function(block) {
+        var m;
+        if ((m = this.tryMatch(reEmoji))) {
+            // Only allow emojis after non-word characters
+            if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+                this.acceptMatch(m);
+
+                // It's up to the renderer to determine if this is a real emoji
+                var node = new Node("emoji");
+                node._literal = m[0];
+                node._emojiName = m[1];
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    };
+
+    // Attempt to parse an emoticon (eg. :D, <3)
+    var reEmoticon = /^(?:(:-?\))|(;-?\))|(:o)|(:-o)|(:-?])|(:-?d)|(x-d)|(:-?p)|(:-?[[@])|(:-?\()|(:[`'’]-?\()|(:-?\/)|(:-?s)|(:-?\|)|(:-?\$)|(:-x)|(<3|&lt;3)|(<\/3|&lt;\/3))(?=$|\W)/i;
+    var EMOTICONS = [
+        "slightly_smiling_face",
+        "wink",
+        "open_mouth",
+        "scream",
+        "smirk",
+        "smile",
+        "stuck_out_tongue_closed_eyes",
+        "stuck_out_tongue",
+        "rage",
+        "slightly_frowning_face",
+        "cry",
+        "confused",
+        "confounded",
+        "neutral_face",
+        "flushed",
+        "mask",
+        "heart",
+        "broken_heart"
+    ];
+    var parseEmoticon = function(block) {
+        var m;
+        if ((m = this.tryMatch(reEmoticon))) {
+            // Only allow emoticons after whitespace or a delimiter
+            if (this.pos === 0 || reWhitespaceChar.test(this.subject[this.pos - 1]) || reDelimCharAll.test(this.subject[this.pos - 1])) {
+                this.acceptMatch(m);
+
+                var node = new Node("emoji");
+                node._literal = m[0];
+
+                // Capture groups in the regex correspond to entries in EMOTICONS
+                for (var i = 0; i < EMOTICONS.length; i++) {
+                    if (m[i + 1]) {
+                        node._emojiName = EMOTICONS[i];
+                    }
+                }
+
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    };
+
+    var reEmail = XRegExp.cache("^" + emailStartPattern + "[\\pL\\d.\\-]+[.]\\pL{2,4}(?=$|[^\\p{L}])");
+    var parseEmail = function(block) {
+        if (this.brackets) {
+            // Don't perform autolinking while inside an explicit link
+            return false;
+        }
+
+        var m;
+        if ((m = this.tryMatch(reEmail))) {
+            // Only allow at mentions after non-word characters
+            if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+                this.acceptMatch(m);
+
+                var dest = m[0];
+
+                var node = new Node("link");
+                node._destination = normalizeURI$1("mailto:" + dest);
+                node._title = "";
+
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
+        } else {
+            return false;
+        }
+    };
+
+    var reHashtag = XRegExp.cache("^#(\\pL[\\pL\\d\\-_.]*[\\pL\\d])");
+    var parseHashtag = function(block) {
+        if (this.brackets) {
+            // Don't perform autolinking while inside an explicit link
+            return false;
         }
-        this.brackets = {
-            node: node,
-            previous: this.brackets,
-            previousDelimiter: this.delimiters,
-            index: index,
-            image: image,
-            active: true
-        };
-    };
-
-    var removeBracket = function() {
-        this.brackets = this.brackets.previous;
-    };
 
-    // Attempt to parse an entity.
-    var parseEntity = function(block) {
         var m;
-        if ((m = this.match(reEntityHere))) {
-            block.appendChild(text(lib_9(m)));
-            return true;
+        if ((m = this.tryMatch(reHashtag, true))) {
+            // Only allow hashtags after a non-word character or a delimiter and only allow hashtags that are long enough
+            if (
+                (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1]) || reDelimChar.test(this.subject[this.pos - 1])) &&
+                m[1].length >= this.options.minimumHashtagLength
+            ) {
+                this.acceptMatch(m);
+
+                var node = new Node("hashtag");
+                node._hashtag = m[1];
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
         } else {
             return false;
         }
     };
 
+    var reInlineLatex = /^\$([^\$\n]+)\$(?!\w)/;
+    var parseInlineLatex = function(block) {
+
+        if (this.brackets) {
+            // Don't perform autolinking while inside an explicit link
+            return false;
+        }
+
+        var m;
+        if ((m = this.tryMatch(reInlineLatex, true))) {
+            //Only allow for inline latex if the dollarsign was present after a non-word character
+            if (
+                (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1]) || reDelimChar.test(this.subject[this.pos - 1]))
+            ) {
+                this.acceptMatch(m);
+
+                var node = new Node("latex_inline");
+                node._latexCode = m[1].trim();
+                node.appendChild(text(m[0]));
+                block.appendChild(node);
+                return true;
+            } else {
+                return false;
+            }
+        }
+    };
+
     // Parse a run of ordinary characters, or a single character with
     // a special meaning in markdown, as a plain string.
     var parseString = function(block) {
@@ -8619,18 +13869,46 @@
                 res = this.parseCloseBracket(block);
                 break;
             case C_LESSTHAN:
-                res = this.parseAutolink(block) || this.parseHtmlTag(block);
+                res = this.parseAutolink(block) || this.parseHtmlTag(block) || this.parseEmoticon(block);
                 break;
             case C_AMPERSAND:
-                res = this.parseEntity(block);
+                res = this.parseEmoticon(block) || this.parseEntity(block);
                 break;
-            default:
-                res = this.parseString(block);
+            case C_AT_SIGN:
+                res = this.parseAtMention(block);
+                break;
+            case C_TILDE:
+                res = this.handleDelim(c, block) || this.parseChannelLink(block);
+                break;
+            case C_COLON:
+                res = this.parseEmoji(block) || this.parseEmoticon(block);
+                break;
+            case C_SEMICOLON:
+                res = this.parseEmoticon(block);
                 break;
+            case C_UPPER_X:
+            case C_LOWER_X:
+                res = this.parseEmoticon(block);
+                break;
+            case C_NUMBER_SIGN:
+                res = this.parseHashtag(block);
+                break;
+            case C_DOLLAR_SIGN:
+                res = this.parseInlineLatex(block);
+                break;
+        }
+
+        if (!res) {
+            res = this.parseEmail(block);
         }
+
         if (!res) {
-            this.pos += 1;
-            block.appendChild(text(fromCodePoint(c)));
+            res = this.parseUrl(block);
+        }
+
+        // parseString always captures at least a single character
+        if (!res) {
+            res = this.parseString(block);
         }
 
         return true;
@@ -8657,6 +13935,9 @@
             pos: 0,
             refmap: {},
             match: match,
+            matchRegex: matchRegex,
+            tryMatch: tryMatch,
+            acceptMatch: acceptMatch,
             peek: peek,
             spnl: spnl,
             parseBackticks: parseBackticks,
@@ -8665,6 +13946,7 @@
             parseHtmlTag: parseHtmlTag,
             scanDelims: scanDelims,
             handleDelim: handleDelim,
+            parseLinkSize: parseLinkSize,
             parseLinkTitle: parseLinkTitle,
             parseLinkDestination: parseLinkDestination,
             parseLinkLabel: parseLinkLabel,
@@ -8674,6 +13956,14 @@
             addBracket: addBracket,
             removeBracket: removeBracket,
             parseEntity: parseEntity,
+            parseUrl: parseUrl,
+            parseAtMention: parseAtMention,
+            parseChannelLink: parseChannelLink,
+            parseEmoji: parseEmoji,
+            parseEmoticon: parseEmoticon,
+            parseEmail: parseEmail,
+            parseHashtag: parseHashtag,
+            parseInlineLatex: parseInlineLatex,
             parseString: parseString,
             parseNewline: parseNewline,
             parseReference: parseReference,
@@ -8716,7 +14006,9 @@
 
     var reThematicBreak = /^(?:\*[ \t]*){3,}$|^(?:_[ \t]*){3,}$|^(?:-[ \t]*){3,}$/;
 
-    var reMaybeSpecial = /^[#`~*+_=<>0-9-]/;
+    var reMaybeSpecial = /^[#`~*+_=<>0-9-|]/;
+
+    var reMaybeDelimiterRow = /[|\-]/;
 
     var reNonSpace = /[^ \t\f\v\r\n]/;
 
@@ -8734,6 +14026,12 @@
 
     var reLineEnding = /\r\n|\n|\r/;
 
+    var reTableDelimiter = /^[ \t]{0,3}((?:\|[ \t]*)?:?-+:?[ \t]*(?:\|(?:[ \t]*:?-+:?[ \t]*)?)*\|?)$/;
+
+    var reTableRow = /^(\|?)(?:(?:\\\||[^|])*\|?)+$/;
+
+    var reTablePipeSpaceEnding = /\|\s+$/;
+
     // Returns true if string contains only space characters.
     var isBlank = function(s) {
         return !reNonSpace.test(s);
@@ -8751,6 +14049,10 @@
         }
     };
 
+    var trimSpacesAfterPipe = function(ln) {
+        return ln.replace(reTablePipeSpaceEnding,"|");
+    };
+
     // DOC PARSER
 
     // These are methods of a Parser object, defined below.
@@ -8907,7 +14209,7 @@
     // at a certain line and offset (e.g. whether a block quote
     // contains a `>`.  It returns 0 for matched, 1 for not matched,
     // and 2 for "we've dealt with this line completely, go to next."
-    var blocks = {
+    var blocks$1 = {
         document: {
             continue: function() {
                 return 0;
@@ -9112,6 +14414,84 @@
             },
             acceptsLines: true
         },
+        table: {
+            continue: function(parser) {
+                if (parser.blank) {
+                    // next line is blank so the table has ended
+                    return 1;
+                } else if (parser.indented) {
+                    // next line is indented so its part of a list or code block
+                    return 1;
+                }
+
+                return 0;
+            },
+            finalize: function(parser, block) {
+                var numberOfColumns = block.alignColumns.length;
+
+                for (var row = block.firstChild; row; row = row.next) {
+                    var i = 0;
+                    for (var cell = row.firstChild; cell; cell = cell.next) {
+                        // copy column alignment to each cell
+                        cell.align = block.alignColumns[i];
+
+                        i += 1;
+
+                        // if there's more columns in a row than the header row, GitHub cuts them off
+                        if (i + 1 > numberOfColumns) {
+                            cell._next = null;
+                            row._lastChild = cell;
+                            break;
+                        }
+                    }
+
+                    // GitHub adds extra empty cells to make sure all rows are equal width
+                    while (i < numberOfColumns) {
+                        var cell = new Node("table_cell");
+
+                        cell._string_content = "";
+                        cell.isHeading = row.isHeading;
+                        cell.align = block.alignColumns[i];
+
+                        row.appendChild(cell);
+                        i += 1;
+                    }
+                }
+            },
+            canContain: function(t) { return (t === "table_row"); },
+            acceptsLines: false
+        },
+        table_row: {
+            continue: function(parser) {
+                if (parser.blank) {
+                    return 2;
+                }
+
+                return 1;
+            },
+            finalize: function(parser, block) {
+                // mark the header row since it'll have special treatment when rendering
+                if (block === block.parent.firstChild) {
+                    block.isHeading = true;
+
+                    for (var cell = block.firstChild; cell; cell = cell.next) {
+                        cell.isHeading = true;
+                    }
+                }
+            },
+            canContain: function(t) { return (t === "table_cell"); },
+            acceptsLines: false
+        },
+        table_cell: {
+            continue: function() {
+                return 1;
+            },
+            finalize: function() {
+                return;
+            },
+            canContain: function() { return false; },
+            acceptsLines: false
+        },
         paragraph: {
             continue: function(parser) {
                 return parser.blank ? 1 : 0;
@@ -9352,9 +14732,127 @@
             } else {
                 return 0;
             }
+        },
+
+        // table
+        function(parser, container) {
+            if (container.type !== "document") {
+                return 0;
+            }
+
+            if (parser.indented) {
+                return 0;
+            }
+
+            if (!parser.nextLine) {
+                // tables require at least two rows (header and delimiter)
+                return 0;
+            }
+
+            // check for a delimiter first since it's stricter than the header row
+            const nextLine = trimSpacesAfterPipe(parser.nextLine);
+            var delimiterMatch = reTableDelimiter.exec(nextLine);
+            if (!delimiterMatch || delimiterMatch[0].indexOf("|") === -1) {
+                return 0;
+            }
+
+            const currentLine = trimSpacesAfterPipe(parser.currentLine);
+            var headerMatch = reTableRow.exec(currentLine.slice(parser.nextNonspace));
+            if (!headerMatch) {
+                return 0;
+            }
+
+            var delimiterCells = parseTableCells(delimiterMatch[1]);
+            var headerCells = parseTableCells(headerMatch[0]);
+
+            if (delimiterCells.length !== headerCells.length) {
+                // the first two rows must be the same length for this to be considered a table
+                return 0;
+            }
+
+            parser.closeUnmatchedBlocks();
+
+            parser.advanceNextNonspace();
+            parser.addChild("table", parser.offset);
+
+            // store the alignments of the columns and then skip the delimiter line since we've
+            // gotten what we need from it
+            parser.tip.alignColumns = delimiterCells.map(getCellAlignment);
+
+            parser.skipNextLine();
+
+            return 1;
+        },
+
+        // table_row
+        function(parser, container) {
+            if (container.type !== "table") {
+                return 0;
+            }
+
+            if (parser.blank) {
+                return 2;
+            }
+
+            var rowMatch = reTableRow.exec(parser.currentLine.slice(parser.nextNonspace));
+            if (!rowMatch) {
+                return 0;
+            }
+
+            parser.closeUnmatchedBlocks();
+            parser.advanceNextNonspace();
+
+            parser.addChild("table_row", parser.offset);
+
+            // advance past leading | if one exists
+            parser.advanceOffset(rowMatch[1].length, false);
+
+            // parse the row into cells
+            var cells = parseTableCells(rowMatch[0]);
+            var length = cells.length;
+            for (var i = 0; i < length; i++) {
+                parser.addChild("table_cell", parser.offset);
+
+                parser.tip._string_content = cells[i].trim();
+
+                parser.advanceOffset(cells[i].length + 1);
+            }
+
+            return 2;
         }
     ];
 
+    var parseTableCells = function(row) {
+        // remove starting pipe to make life easier
+        row = row.replace(/^\|/, "");
+
+        var reTableCell = /\||((?:\\\||[^|])+)\|?/g;
+
+        var match;
+        var cells = [];
+        while (match = reTableCell.exec(row)) {
+            cells.push(match[1] || "");
+        }
+
+        return cells;
+    };
+
+    var getCellAlignment = function(cell) {
+        cell = cell.trim();
+
+        if (cell.charAt(0) === ":") {
+            if (cell.charAt(cell.length - 1) === ":") {
+                return "center";
+            } else {
+                return "left";
+            }
+        } else if (cell.endsWith(":")) {
+            return "right";
+        } else {
+            return "";
+        }
+    };
+
     var advanceOffset = function(count, columns) {
         var currentLine = this.currentLine;
         var charsToTab, charsToAdvance;
@@ -9416,7 +14914,7 @@
     // Analyze a line of text and update the document appropriately.
     // We parse markdown text by calling this on each line of input,
     // then finalizing the document.
-    var incorporateLine = function(ln) {
+    var incorporateLine = function(ln, nextLn) {
         var all_matched = true;
         var t;
 
@@ -9434,6 +14932,7 @@
         }
 
         this.currentLine = ln;
+        this.nextLine = nextLn;
 
         // For each containing block, try to parse the associated line start.
         // Bail out on failure: container will point to the last matching block.
@@ -9465,7 +14964,7 @@
         this.lastMatchedContainer = container;
 
         var matchedLeaf =
-            container.type !== "paragraph" && blocks[container.type].acceptsLines;
+            container.type !== "paragraph" && blocks$1[container.type].acceptsLines;
         var starts = this.blockStarts;
         var startsLen = starts.length;
         // Unless last matched container is a code block, try new container starts,
@@ -9475,8 +14974,10 @@
 
             // this is a little performance optimization:
             if (
-                !this.indented &&
-                !reMaybeSpecial.test(ln.slice(this.nextNonspace))
+                !this.indented && // starts indented code blocks
+                !reMaybeSpecial.test(ln.slice(this.nextNonspace)) && // starts lists, block quotes, etc
+                (container.type !== "table" && container.type !== "table_row") && // start table rows
+                (nextLn && !reMaybeDelimiterRow.test(nextLn.slice(this.nextNonspace))) // starts tables
             ) {
                 this.advanceNextNonspace();
                 break;
@@ -9508,7 +15009,11 @@
         // appropriate container.
 
         // First check for a lazy paragraph continuation:
-        if (!this.allClosed && !this.blank && this.tip.type === "paragraph") {
+        if (
+            !this.allClosed && !this.blank &&
+            this.tip.type === "paragraph" &&
+            !(this.tip._parent.type === "item" && this.indent === 0)
+        ) {
             // lazy paragraph continuation
             this.addLine();
         } else {
@@ -9567,6 +15072,10 @@
         this.lastLineLength = ln.length;
     };
 
+    var skipNextLine = function() {
+        this.shouldSkipNextLine = true;
+    };
+
     // Finalize a block.  Close it and do any necessary postprocessing,
     // e.g. creating string_content from strings, setting the 'tight'
     // or 'loose' status of a list, and parsing the beginnings
@@ -9592,7 +15101,7 @@
         while ((event = walker.next())) {
             node = event.node;
             t = node.type;
-            if (!event.entering && (t === "paragraph" || t === "heading")) {
+            if (!event.entering && (t === "paragraph" || t === "heading" || t === "table_cell")) {
                 this.inlineParser.parse(node);
             }
         }
@@ -9617,6 +15126,7 @@
         this.column = 0;
         this.lastMatchedContainer = this.doc;
         this.currentLine = "";
+        this.shouldSkipNextLine = false;
         if (this.options.time) {
             console.time("preparing input");
         }
@@ -9633,7 +15143,11 @@
             console.time("block parsing");
         }
         for (var i = 0; i < len; i++) {
-            this.incorporateLine(lines[i]);
+            if (this.shouldSkipNextLine) {
+                this.shouldSkipNextLine = false;
+                continue;
+            }
+            this.incorporateLine(lines[i], lines[i + 1]);
         }
         while (this.tip) {
             this.finalize(this.tip, len);
@@ -9653,9 +15167,15 @@
 
     // The Parser object.
     function Parser(options) {
+        options = options || {};
+
+        if (options.minimumHashtagLength == null) {
+            options.minimumHashtagLength = 3;
+        }
+
         return {
             doc: new Document(),
-            blocks: blocks,
+            blocks: blocks$1,
             blockStarts: blockStarts,
             tip: this.doc,
             oldtip: this.doc,
@@ -9680,11 +15200,12 @@
             addLine: addLine,
             addChild: addChild,
             incorporateLine: incorporateLine,
+            skipNextLine: skipNextLine,
             finalize: finalize,
             processInlines: processInlines,
             closeUnmatchedBlocks: closeUnmatchedBlocks,
             parse: parse,
-            options: options || {}
+            options: options
         };
     }
 
@@ -9833,6 +15354,63 @@
         }
     }
 
+    function at_mention(node, entering) {
+        if (entering) {
+            var attrs = this.attrs(node);
+
+            if (node.mentionName) {
+                attrs.push(["data-mention-name", this.esc(node.mentionName)]);
+            }
+
+            this.tag("span", attrs);
+        } else {
+            this.tag("/span");
+        }
+    }
+
+    function channel_link(node, entering) {
+        if (entering) {
+            var attrs = this.attrs(node);
+
+            if (node.channelName) {
+                attrs.push(["data-channel-name", this.esc(node.channelName)]);
+            }
+
+            this.tag("span", attrs);
+        } else {
+            this.tag("/span");
+        }
+    }
+
+    function emoji(node, entering) {
+        if (entering) {
+            var attrs = this.attrs(node);
+
+            if (node.emojiName) {
+                attrs.push(["data-emoji-name", this.esc(node.emojiName)]);
+                attrs.push(["data-literal", this.esc(node.literal)]);
+            }
+
+            this.tag("span", attrs);
+        } else {
+            this.tag("/span");
+        }
+    }
+
+    function hashtag(node, entering) {
+        if (entering) {
+            var attrs = this.attrs(node);
+
+            if (node.hashtag) {
+                attrs.push(["data-hashtag", this.esc(node.hashtag)]);
+            }
+
+            this.tag("span", attrs);
+        } else {
+            this.tag("/span");
+        }
+    }
+
     function image$1(node, entering) {
         if (entering) {
             if (this.disableTags === 0) {
@@ -9849,6 +15427,15 @@
                 if (node.title) {
                     this.lit('" title="' + this.esc(node.title));
                 }
+                if (node.size) {
+                  if (node.size.width) {
+                    this.lit('" width="' + node.size.width);
+                  }
+
+                  if (node.size.height) {
+                    this.lit('" height="' + node.size.height);
+                  }
+                }
                 this.lit('" />');
             }
         }
@@ -9862,6 +15449,10 @@
         this.tag(entering ? "strong" : "/strong");
     }
 
+    function del(node, entering) {
+      this.tag(entering ? "del" : "/del");
+    }
+
     function paragraph(node, entering) {
         var grandparent = node.parent.parent,
             attrs = this.attrs(node);
@@ -9961,6 +15552,63 @@
         }
     }
 
+    function table(node, entering) {
+        var attrs = this.attrs(node);
+        if (entering) {
+            this.cr();
+            this.tag("table", attrs);
+            this.cr();
+        } else {
+            this.tag("/table");
+            this.cr();
+        }
+    }
+
+    function table_row(node, entering) {
+        var attrs = this.attrs(node);
+        if (entering) {
+            if (node === node.parent.firstChild) {
+                this.cr();
+                this.tag("thead");
+                this.cr();
+            } else if (node === node.parent.firstChild.next) {
+                this.cr();
+                this.tag("tbody");
+                this.cr();
+            }
+
+            this.cr();
+            this.tag("tr", attrs);
+            this.cr();
+        } else {
+            this.tag("/tr");
+
+            if (node === node.parent.firstChild) {
+                this.cr(); // we're not consistent about how these tags are laid out because this is what GitHub does
+                this.tag("/thead");
+            } else if (node === node.parent.lastChild) {
+                this.tag("/tbody");
+            }
+        }
+    }
+
+    function table_cell(node, entering) {
+        var attrs = this.attrs(node);
+
+        var tag = node.isHeading ? "th" : "td";
+
+        if (node.align) {
+            attrs.push(["align", node.align]);
+        }
+
+        if (entering) {
+            this.tag(tag, attrs);
+        } else {
+            this.tag("/" + tag);
+            this.cr();
+        }
+    }
+
     function html_inline(node) {
         if (this.options.safe) {
             this.lit("<!-- raw HTML omitted -->");
@@ -10032,9 +15680,14 @@
     HtmlRenderer.prototype.softbreak = softbreak;
     HtmlRenderer.prototype.linebreak = linebreak;
     HtmlRenderer.prototype.link = link;
+    HtmlRenderer.prototype.at_mention = at_mention;
+    HtmlRenderer.prototype.channel_link = channel_link;
+    HtmlRenderer.prototype.emoji = emoji;
+    HtmlRenderer.prototype.hashtag = hashtag;
     HtmlRenderer.prototype.image = image$1;
     HtmlRenderer.prototype.emph = emph;
     HtmlRenderer.prototype.strong = strong;
+    HtmlRenderer.prototype.del = del;
     HtmlRenderer.prototype.paragraph = paragraph;
     HtmlRenderer.prototype.heading = heading;
     HtmlRenderer.prototype.code = code;
@@ -10043,6 +15696,9 @@
     HtmlRenderer.prototype.block_quote = block_quote;
     HtmlRenderer.prototype.list = list;
     HtmlRenderer.prototype.item = item;
+    HtmlRenderer.prototype.table = table;
+    HtmlRenderer.prototype.table_row = table_row;
+    HtmlRenderer.prototype.table_cell = table_cell;
     HtmlRenderer.prototype.custom_inline = custom_inline;
     HtmlRenderer.prototype.custom_block = custom_block;
 
@@ -10152,6 +15808,13 @@
                         attrs.push(["destination", node.destination]);
                         attrs.push(["title", node.title]);
                         break;
+                    case "at_mention":
+                        attrs.push(["mention-name", node.mentionName]);
+                        break;
+                    case "emoji":
+                        attrs.push(["emoji-name", node.emojiName]);
+                        attrs.push(["literal", node.literal]);
+                        break;
                     case "custom_inline":
                     case "custom_block":
                         attrs.push(["on_enter", node.onEnter]);
diff --git a/node_modules/commonmark/dist/commonmark.min.js b/node_modules/commonmark/dist/commonmark.min.js
index 56ca829..8597c2b 100644
--- a/node_modules/commonmark/dist/commonmark.min.js
+++ b/node_modules/commonmark/dist/commonmark.min.js
@@ -1 +1 @@
-!function(e,r){"object"==typeof exports&&"undefined"!=typeof module?r(exports):"function"==typeof define&&define.amd?define(["exports"],r):r((e=e||self).commonmark={})}(this,function(e){"use strict";function i(e){switch(e._type){case"document":case"block_quote":case"list":case"item":case"paragraph":case"heading":case"emph":case"strong":case"link":case"image":case"custom_inline":case"custom_block":return!0;default:return!1}}function r(e,r){this.current=e,this.entering=!0===r}function t(){var e=this.current,r=this.entering;if(null===e)return null;var t=i(e);return r&&t?e._firstChild?(this.current=e._firstChild,this.entering=!0):this.entering=!1:e===this.root?this.current=null:null===e._next?(this.current=e._parent,this.entering=!1):(this.current=e._next,this.entering=!0),{entering:r,node:e}}function n(e){return{current:e,root:e,entering:!0,next:t,resumeAt:r}}function b(e,r){this._type=e,this._parent=null,this._firstChild=null,this._lastChild=null,this._prev=null,this._next=null,this._sourcepos=r,this._lastLineBlank=!1,this._lastLineChecked=!1,this._open=!0,this._string_content=null,this._literal=null,this._listData={},this._info=null,this._destination=null,this._title=null,this._isFenced=!1,this._fenceChar=null,this._fenceLength=0,this._fenceOffset=null,this._level=null,this._onEnter=null,this._onExit=null}var a=b.prototype;Object.defineProperty(a,"isContainer",{get:function(){return i(this)}}),Object.defineProperty(a,"type",{get:function(){return this._type}}),Object.defineProperty(a,"firstChild",{get:function(){return this._firstChild}}),Object.defineProperty(a,"lastChild",{get:function(){return this._lastChild}}),Object.defineProperty(a,"next",{get:function(){return this._next}}),Object.defineProperty(a,"prev",{get:function(){return this._prev}}),Object.defineProperty(a,"parent",{get:function(){return this._parent}}),Object.defineProperty(a,"sourcepos",{get:function(){return this._sourcepos}}),Object.defineProperty(a,"literal",{get:function(){return this._literal},set:function(e){this._literal=e}}),Object.defineProperty(a,"destination",{get:function(){return this._destination},set:function(e){this._destination=e}}),Object.defineProperty(a,"title",{get:function(){return this._title},set:function(e){this._title=e}}),Object.defineProperty(a,"info",{get:function(){return this._info},set:function(e){this._info=e}}),Object.defineProperty(a,"level",{get:function(){return this._level},set:function(e){this._level=e}}),Object.defineProperty(a,"listType",{get:function(){return this._listData.type},set:function(e){this._listData.type=e}}),Object.defineProperty(a,"listTight",{get:function(){return this._listData.tight},set:function(e){this._listData.tight=e}}),Object.defineProperty(a,"listStart",{get:function(){return this._listData.start},set:function(e){this._listData.start=e}}),Object.defineProperty(a,"listDelimiter",{get:function(){return this._listData.delimiter},set:function(e){this._listData.delimiter=e}}),Object.defineProperty(a,"onEnter",{get:function(){return this._onEnter},set:function(e){this._onEnter=e}}),Object.defineProperty(a,"onExit",{get:function(){return this._onExit},set:function(e){this._onExit=e}}),b.prototype.appendChild=function(e){e.unlink(),(e._parent=this)._lastChild?(this._lastChild._next=e)._prev=this._lastChild:this._firstChild=e,this._lastChild=e},b.prototype.prependChild=function(e){e.unlink(),(e._parent=this)._firstChild?((this._firstChild._prev=e)._next=this._firstChild,this._firstChild=e):(this._firstChild=e,this._lastChild=e)},b.prototype.unlink=function(){this._prev?this._prev._next=this._next:this._parent&&(this._parent._firstChild=this._next),this._next?this._next._prev=this._prev:this._parent&&(this._parent._lastChild=this._prev),this._parent=null,this._next=null,this._prev=null},b.prototype.insertAfter=function(e){e.unlink(),e._next=this._next,e._next&&(e._next._prev=e),((e._prev=this)._next=e)._parent=this._parent,e._next||(e._parent._lastChild=e)},b.prototype.insertBefore=function(e){e.unlink(),e._prev=this._prev,e._prev&&(e._prev._next=e),((e._next=this)._prev=e)._parent=this._parent,e._prev||(e._parent._firstChild=e)},b.prototype.walker=function(){return new n(this)};var c={};function u(e,r,t){var i,n,a,s,o,l="";for("string"!=typeof r&&(t=r,r=u.defaultChars),void 0===t&&(t=!0),o=function(e){var r,t,i=c[e];if(i)return i;for(i=c[e]=[],r=0;r<128;r++)t=String.fromCharCode(r),/^[0-9a-z]$/i.test(t)?i.push(t):i.push("%"+("0"+r.toString(16).toUpperCase()).slice(-2));for(r=0;r<e.length;r++)i[e.charCodeAt(r)]=e[r];return i}(r),i=0,n=e.length;i<n;i++)a=e.charCodeAt(i),t&&37===a&&i+2<n&&/^[0-9a-f]{2}$/i.test(e.slice(i+1,i+3))?(l+=e.slice(i,i+3),i+=2):a<128?l+=o[a]:55296<=a&&a<=57343?55296<=a&&a<=56319&&i+1<n&&56320<=(s=e.charCodeAt(i+1))&&s<=57343?(l+=encodeURIComponent(e[i]+e[i+1]),i++):l+="%EF%BF%BD":l+=encodeURIComponent(e[i]);return l}u.defaultChars=";/?:@&=+$,-_.!~*'()#",u.componentChars="-_.!~*'()";var s=u,p="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function o(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function l(e,r){return e(r={exports:{}},r.exports),r.exports}function h(e){return e&&e.default||e}var d=Object.freeze({__proto__:null,Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌",default:{Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"}}),f=Object.freeze({__proto__:null,Aacute:"Á",aacute:"á",Acirc:"Â",acirc:"â",acute:"´",AElig:"Æ",aelig:"æ",Agrave:"À",agrave:"à",amp:"&",AMP:"&",Aring:"Å",aring:"å",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",brvbar:"¦",Ccedil:"Ç",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",Eacute:"É",eacute:"é",Ecirc:"Ê",ecirc:"ê",Egrave:"È",egrave:"è",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",Iacute:"Í",iacute:"í",Icirc:"Î",icirc:"î",iexcl:"¡",Igrave:"Ì",igrave:"ì",iquest:"¿",Iuml:"Ï",iuml:"ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",Ntilde:"Ñ",ntilde:"ñ",Oacute:"Ó",oacute:"ó",Ocirc:"Ô",ocirc:"ô",Ograve:"Ò",ograve:"ò",ordf:"ª",ordm:"º",Oslash:"Ø",oslash:"ø",Otilde:"Õ",otilde:"õ",Ouml:"Ö",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",THORN:"Þ",thorn:"þ",times:"×",Uacute:"Ú",uacute:"ú",Ucirc:"Û",ucirc:"û",Ugrave:"Ù",ugrave:"ù",uml:"¨",Uuml:"Ü",uuml:"ü",Yacute:"Ý",yacute:"ý",yen:"¥",yuml:"ÿ",default:{Aacute:"Á",aacute:"á",Acirc:"Â",acirc:"â",acute:"´",AElig:"Æ",aelig:"æ",Agrave:"À",agrave:"à",amp:"&",AMP:"&",Aring:"Å",aring:"å",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",brvbar:"¦",Ccedil:"Ç",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",Eacute:"É",eacute:"é",Ecirc:"Ê",ecirc:"ê",Egrave:"È",egrave:"è",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",Iacute:"Í",iacute:"í",Icirc:"Î",icirc:"î",iexcl:"¡",Igrave:"Ì",igrave:"ì",iquest:"¿",Iuml:"Ï",iuml:"ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",Ntilde:"Ñ",ntilde:"ñ",Oacute:"Ó",oacute:"ó",Ocirc:"Ô",ocirc:"ô",Ograve:"Ò",ograve:"ò",ordf:"ª",ordm:"º",Oslash:"Ø",oslash:"ø",Otilde:"Õ",otilde:"õ",Ouml:"Ö",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",THORN:"Þ",thorn:"þ",times:"×",Uacute:"Ú",uacute:"ú",Ucirc:"Û",ucirc:"û",Ugrave:"Ù",ugrave:"ù",uml:"¨",Uuml:"Ü",uuml:"ü",Yacute:"Ý",yacute:"ý",yen:"¥",yuml:"ÿ"}}),g=Object.freeze({__proto__:null,amp:"&",apos:"'",gt:">",lt:"<",quot:'"',default:{amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}}),m=h(Object.freeze({__proto__:null,default:{0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}})),v=l(function(e,r){var t=p&&p.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0});var i=t(m);r.default=function(e){if(55296<=e&&e<=57343||1114111<e)return"�";var r="";return 65535<(e=e in i.default?i.default[e]:e)&&(e-=65536,r+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),r+=String.fromCharCode(e)}});o(v);var q=h(d),y=h(f),w=h(g),k=l(function(e,r){var t=p&&p.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.decodeHTML=r.decodeHTMLStrict=r.decodeXML=void 0;var o=t(q),l=t(y),i=t(w),n=t(v);function a(e){var r=Object.keys(e).join("|"),t=u(e);r+="|#[xX][\\da-fA-F]+|#\\d+";var i=new RegExp("&(?:"+r+");","g");return function(e){return String(e).replace(i,t)}}r.decodeXML=a(i.default),r.decodeHTMLStrict=a(o.default);function c(e,r){return e<r?1:-1}function u(t){return function(e){if("#"!==e.charAt(1))return t[e.slice(1,-1)];var r=e.charAt(2);return"X"===r||"x"===r?n.default(parseInt(e.substr(3),16)):n.default(parseInt(e.substr(2),10))}}r.decodeHTML=function(){for(var e=Object.keys(l.default).sort(c),r=Object.keys(o.default).sort(c),t=0,i=0;t<r.length;t++)e[i]===r[t]?(r[t]+=";?",i++):r[t]+=";";var n=new RegExp("&(?:"+r.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),a=u(o.default);function s(e){return";"!==e.substr(-1)&&(e+=";"),a(e)}return function(e){return String(e).replace(n,s)}}()});o(k);k.decodeHTML,k.decodeHTMLStrict,k.decodeXML;var D=l(function(e,r){var t=p&&p.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(r,"__esModule",{value:!0}),r.escape=r.encodeHTML=r.encodeXML=void 0;var i=a(t(w).default),n=s(i);r.encodeXML=c(i,n);n=a(t(q).default),t=s(n);function a(t){return Object.keys(t).sort().reduce(function(e,r){return e[t[r]]="&"+r+";",e},{})}function s(e){for(var r=[],t=[],i=0,n=Object.keys(e);i<n.length;i++){var a=n[i];1===a.length?r.push("\\"+a):t.push(a)}r.sort();for(var s=0;s<r.length-1;s++){for(var o=s;o<r.length-1&&r[o].charCodeAt(1)+1===r[o+1].charCodeAt(1);)o+=1;var l=1+o-s;l<3||r.splice(s,l,r[s]+"-"+r[o])}return t.unshift("["+r.join("")+"]"),new RegExp(t.join("|"),"g")}r.encodeHTML=c(n,t);var o=/(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;function l(e){return"&#x"+e.codePointAt(0).toString(16).toUpperCase()+";"}function c(r,t){return function(e){return e.replace(t,function(e){return r[e]}).replace(o,l)}}var u=s(i);r.escape=function(e){return e.replace(u,l).replace(o,l)}});o(D);D.escape,D.encodeHTML,D.encodeXML;var L=l(function(e,r){Object.defineProperty(r,"__esModule",{value:!0}),r.encode=r.decodeStrict=r.decode=void 0,r.decode=function(e,r){return(!r||r<=0?k.decodeXML:k.decodeHTML)(e)},r.decodeStrict=function(e,r){return(!r||r<=0?k.decodeXML:k.decodeHTMLStrict)(e)},r.encode=function(e,r){return(!r||r<=0?D.encodeXML:D.encodeHTML)(e)};var t=D;Object.defineProperty(r,"encodeXML",{enumerable:!0,get:function(){return t.encodeXML}}),Object.defineProperty(r,"encodeHTML",{enumerable:!0,get:function(){return t.encodeHTML}}),Object.defineProperty(r,"escape",{enumerable:!0,get:function(){return t.escape}}),Object.defineProperty(r,"encodeHTML4",{enumerable:!0,get:function(){return t.encodeHTML}}),Object.defineProperty(r,"encodeHTML5",{enumerable:!0,get:function(){return t.encodeHTML}});var i=k;Object.defineProperty(r,"decodeXML",{enumerable:!0,get:function(){return i.decodeXML}}),Object.defineProperty(r,"decodeHTML",{enumerable:!0,get:function(){return i.decodeHTML}}),Object.defineProperty(r,"decodeHTMLStrict",{enumerable:!0,get:function(){return i.decodeHTMLStrict}}),Object.defineProperty(r,"decodeHTML4",{enumerable:!0,get:function(){return i.decodeHTML}}),Object.defineProperty(r,"decodeHTML5",{enumerable:!0,get:function(){return i.decodeHTML}}),Object.defineProperty(r,"decodeHTML4Strict",{enumerable:!0,get:function(){return i.decodeHTMLStrict}}),Object.defineProperty(r,"decodeHTML5Strict",{enumerable:!0,get:function(){return i.decodeHTMLStrict}}),Object.defineProperty(r,"decodeXMLStrict",{enumerable:!0,get:function(){return i.decodeXML}})});o(L);L.encode,L.decodeStrict,L.decode,L.encodeXML,L.encodeHTML,L.encodeHTML4,L.encodeHTML5,L.decodeXML;function x(e){return 92===e.charCodeAt(0)?e.charAt(1):N(e)}function _(e){return F.test(e)?e.replace(R,x):e}function E(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";default:return e}}function A(e){return B.test(e)?e.replace(B,E):e}var C,T,S,N=L.decodeHTML,a=(L.decodeHTMLStrict,L.decodeHTML4,L.decodeHTML5,L.decodeHTML4Strict,L.decodeHTML5Strict,L.decodeXMLStrict,"&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});"),d="[A-Za-z][A-Za-z0-9-]*",f="<"+d+"(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*/?>",g="</"+d+"\\s*[>]",L=new RegExp("^(?:<[A-Za-z][A-Za-z0-9-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*/?>|</[A-Za-z][A-Za-z0-9-]*\\s*[>]|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|[<][?][\\s\\S]*?[?][>]|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),F=/[\\&]/,d="[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]",R=new RegExp("\\\\"+d+"|"+a,"gi"),B=new RegExp('[&<>"]',"g");function O(e){return S(e)}function U(e){if(null==this)throw TypeError();var r=String(this),t=e?Number(e):0;if((t=t!=t?0:t)<0||t==1/0)throw RangeError();for(var i="";t;)t%2==1&&(i+=r),1<t&&(r+=r),t>>=1;return i}S=String.fromCodePoint?function(e){try{return String.fromCodePoint(e)}catch(e){if(e instanceof RangeError)return String.fromCharCode(65533);throw e}}:(C=String.fromCharCode,T=Math.floor,function(){var e=[],r=-1,t=arguments.length;if(!t)return"";for(var i="";++r<t;){var n=Number(arguments[r]);if(!isFinite(n)||n<0||1114111<n||T(n)!==n)return String.fromCharCode(65533);n<=65535?e.push(n):(n-=65536,e.push(55296+(n>>10),n%1024+56320)),(r+1===t||16384<e.length)&&(i+=C.apply(null,e),e.length=0)}return i}),String.prototype.repeat||((M=function(){try{var e={},r=Object.defineProperty,t=r(e,e,e)&&r}catch(e){}return t}())?M(String.prototype,"repeat",{value:U,configurable:!0,writable:!0}):String.prototype.repeat=U);function H(e){var r=new b("text");return r._literal=e,r}function V(e){return e.slice(1,e.length-1).trim().replace(/[ \t\r\n]+/," ").toLowerCase().toUpperCase()}var P=function(r){try{return s(r)}catch(e){return r}},j=_,M=d,d="\\\\"+M,z=L,G=new RegExp(/^[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/),I=new RegExp('^(?:"('+d+'|[^"\\x00])*"|\'('+d+"|[^'\\x00])*'|\\(("+d+"|[^()\\x00])*\\))"),Z=/^(?:<(?:[^<>\n\\\x00]|\\.)*>)/,X=new RegExp("^"+M),Y=new RegExp("^&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});","i"),J=/`+/,$=/^`+/,Q=/\.\.\./g,K=/--+/g,W=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,ee=/^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\x00-\x20]*>/i,re=/^ *(?:\n *)?/,te=/^[ \t\n\x0b\x0c\x0d]/,ie=/^\s/,ne=/ *$/,ae=/^ */,se=/^ *(?:\n|$)/,oe=/^\[(?:[^\\\[\]]|\\.){0,1000}\]/s,le=/^[^\n`\[\]\\!<&*_'"]+/m,ce=function(e){e=e.exec(this.subject.slice(this.pos));return null===e?null:(this.pos+=e.index+e[0].length,e[0])},ue=function(){return this.pos<this.subject.length?this.subject.charCodeAt(this.pos):-1},pe=function(){return this.match(re),!0},he=function(e){var r=this.match($);if(null===r)return!1;for(var t,i,n=this.pos;null!==(i=this.match(J));)if(i===r)return t=new b("code"),0<(i=this.subject.slice(n,this.pos-r.length).replace(/\n/gm," ")).length&&null!==i.match(/[^ ]/)&&" "==i[0]&&" "==i[i.length-1]?t._literal=i.slice(1,i.length-1):t._literal=i,e.appendChild(t),!0;return this.pos=n,e.appendChild(H(r)),!0},de=function(e){var r,t=this.subject;return this.pos+=1,10===this.peek()?(this.pos+=1,r=new b("linebreak"),e.appendChild(r)):X.test(t.charAt(this.pos))?(e.appendChild(H(t.charAt(this.pos))),this.pos+=1):e.appendChild(H("\\")),!0},fe=function(e){var r,t,i;return(r=this.match(W))?(t=r.slice(1,r.length-1),(i=new b("link"))._destination=P("mailto:"+t),i._title="",i.appendChild(H(t)),e.appendChild(i),!0):!!(r=this.match(ee))&&(t=r.slice(1,r.length-1),(i=new b("link"))._destination=P(t),i._title="",i.appendChild(H(t)),e.appendChild(i),!0)},ge=function(e){var r=this.match(z);if(null===r)return!1;var t=new b("html_inline");return t._literal=r,e.appendChild(t),!0},me=function(e){var r,t,i,n,a,s,o=0,l=this.pos;if(39===e||34===e)o++,this.pos++;else for(;this.peek()===e;)o++,this.pos++;return 0===o?null:(r=0===l?"\n":this.subject.charAt(l-1),s=-1===(a=this.peek())?"\n":O(a),i=ie.test(s),n=G.test(s),a=ie.test(r),s=G.test(r),r=!i&&(!n||a||s),i=!a&&(!s||i||n),i=95===e?(t=r&&(!i||s),i&&(!r||n)):(t=39===e||34===e?r&&!i:r,i),this.pos=l,{numdelims:o,can_open:t,can_close:i})},be=function(e,r){var t=this.scanDelims(e);if(!t)return!1;var i=t.numdelims,n=this.pos;this.pos+=i;n=39===e?"’":34===e?"“":this.subject.slice(n,this.pos),n=H(n);return r.appendChild(n),(t.can_open||t.can_close)&&(this.options.smart||39!==e&&34!==e)&&(this.delimiters={cc:e,numdelims:i,origdelims:i,node:n,previous:this.delimiters,next:null,can_open:t.can_open,can_close:t.can_close},null!==this.delimiters.previous&&(this.delimiters.previous.next=this.delimiters)),!0},ve=function(e){null!==e.previous&&(e.previous.next=e.next),null===e.next?this.delimiters=e.previous:e.next.previous=e.previous},qe=function(e){for(var r,t,i,n,a,s,o,l,c,u,p,h=[],d=0;d<8;d++)h[d]=e;for(t=this.delimiters;null!==t&&t.previous!==e;)t=t.previous;for(;null!==t;){var f=t.cc;if(t.can_close){switch(r=t.previous,o=!1,f){case 39:l=0;break;case 34:l=1;break;case 95:l=2;break;case 42:l=3+(t.can_open?3:0)+t.origdelims%3}for(;null!==r&&r!==e&&r!==h[l];){if(c=(t.can_open||r.can_close)&&t.origdelims%3!=0&&(r.origdelims+t.origdelims)%3==0,r.cc===t.cc&&r.can_open&&!c){o=!0;break}r=r.previous}if(i=t,42===f||95===f)if(o){u=2<=t.numdelims&&2<=r.numdelims?2:1,a=r.node,n=t.node,r.numdelims-=u,t.numdelims-=u,a._literal=a._literal.slice(0,a._literal.length-u),n._literal=n._literal.slice(0,n._literal.length-u);for(var g=new b(1==u?"emph":"strong"),m=a._next;m&&m!==n;)s=m._next,m.unlink(),g.appendChild(m),m=s;a.insertAfter(g),p=t,(u=r).next!==p&&((u.next=p).previous=u),0===r.numdelims&&(a.unlink(),this.removeDelimiter(r)),0===t.numdelims&&(n.unlink(),a=t.next,this.removeDelimiter(t),t=a)}else t=t.next;else 39===f?(t.node._literal="’",o&&(r.node._literal="‘"),t=t.next):34===f&&(t.node._literal="”",o&&(r.node.literal="“"),t=t.next);o||(h[l]=i.previous,i.can_open||this.removeDelimiter(i))}else t=t.next}for(;null!==this.delimiters&&this.delimiters!==e;)this.removeDelimiter(this.delimiters)},ye=function(){var e=this.match(I);return null===e?null:j(e.substr(1,e.length-2))},we=function(){var e=this.match(Z);if(null!==e)return P(j(e.substr(1,e.length-2)));if(60===this.peek())return null;for(var r,t=this.pos,i=0;-1!==(r=this.peek());)if(92===r&&X.test(this.subject.charAt(this.pos+1)))this.pos+=1,-1!==this.peek()&&(this.pos+=1);else if(40===r)this.pos+=1,i+=1;else if(41===r){if(i<1)break;this.pos+=1,--i}else{if(null!==te.exec(O(r)))break;this.pos+=1}return this.pos===t&&41!==r||0!==i?null:(e=this.subject.substr(t,this.pos-t),P(j(e)))},ke=function(){var e=this.match(oe);return null===e||1001<e.length?0:e.length},De=function(e){var r=this.pos;this.pos+=1;var t=H("[");return e.appendChild(t),this.addBracket(t,r,!1),!0},Le=function(e){var r,t=this.pos;return this.pos+=1,91===this.peek()?(this.pos+=1,r=H("!["),e.appendChild(r),this.addBracket(r,t+1,!0)):e.appendChild(H("!")),!0},xe=function(e){var r,t,i,n,a=!1;if(this.pos+=1,r=this.pos,null===(n=this.brackets))return e.appendChild(H("]")),!0;if(!n.active)return e.appendChild(H("]")),this.removeBracket(),!0;var s,o,l,c=n.image,u=this.pos;if(40===this.peek()&&(this.pos++,this.spnl()&&null!==(t=this.parseLinkDestination())&&this.spnl()&&(te.test(this.subject.charAt(this.pos-1))&&(i=this.parseLinkTitle()),1)&&this.spnl()&&41===this.peek()?(this.pos+=1,a=!0):this.pos=u),a||(s=this.pos,2<(o=this.parseLinkLabel())?l=this.subject.slice(s,s+o):n.bracketAfter||(l=this.subject.slice(n.index,r)),0===o&&(this.pos=u),!l||(l=this.refmap[V(l)])&&(t=l.destination,i=l.title,a=!0)),a){var p,h,d=new b(c?"image":"link");for(d._destination=t,d._title=i||"",p=n.node._next;p;)h=p._next,p.unlink(),d.appendChild(p),p=h;if(e.appendChild(d),this.processEmphasis(n.previousDelimiter),this.removeBracket(),n.node.unlink(),!c)for(n=this.brackets;null!==n;)n.image||(n.active=!1),n=n.previous;return!0}return this.removeBracket(),this.pos=r,e.appendChild(H("]")),!0},_e=function(e,r,t){null!==this.brackets&&(this.brackets.bracketAfter=!0),this.brackets={node:e,previous:this.brackets,previousDelimiter:this.delimiters,index:r,image:t,active:!0}},Ee=function(){this.brackets=this.brackets.previous},Ae=function(e){var r;return!!(r=this.match(Y))&&(e.appendChild(H(N(r))),!0)},Ce=function(e){var r;return!!(r=this.match(le))&&(this.options.smart?e.appendChild(H(r.replace(Q,"…").replace(K,function(e){var r=0,t=0;return e.length%3==0?t=e.length/3:e.length%2==0?r=e.length/2:t=e.length%3==2?(r=1,(e.length-2)/3):(r=2,(e.length-4)/3),"—".repeat(t)+"–".repeat(r)}))):e.appendChild(H(r)),!0)},Te=function(e){this.pos+=1;var r,t=e._lastChild;return t&&"text"===t.type&&" "===t._literal[t._literal.length-1]?(r=" "===t._literal[t._literal.length-2],t._literal=t._literal.replace(ne,""),e.appendChild(new b(r?"linebreak":"softbreak"))):e.appendChild(new b("softbreak")),this.match(ae),!0},Se=function(e,r){var t,i;this.subject=e,this.pos=0;var n=this.pos;if(0===(a=this.parseLinkLabel()))return 0;if(s=this.subject.substr(0,a),58!==this.peek())return this.pos=n,0;if(this.pos++,this.spnl(),null===(t=this.parseLinkDestination()))return this.pos=n,0;e=this.pos;this.spnl(),null===(i=this.pos!==e?this.parseLinkTitle():i)&&(i="",this.pos=e);var a=!0;if(!(a=null===this.match(se)?""!==i&&(i="",this.pos=e,null!==this.match(se)):a))return this.pos=n,0;var s=V(s);return""===s?(this.pos=n,0):(r[s]||(r[s]={destination:t,title:i}),this.pos-n)},Ne=function(e){var r=!1,t=this.peek();if(-1===t)return!1;switch(t){case 10:r=this.parseNewline(e);break;case 92:r=this.parseBackslash(e);break;case 96:r=this.parseBackticks(e);break;case 42:case 95:r=this.handleDelim(t,e);break;case 39:case 34:r=this.options.smart&&this.handleDelim(t,e);break;case 91:r=this.parseOpenBracket(e);break;case 33:r=this.parseBang(e);break;case 93:r=this.parseCloseBracket(e);break;case 60:r=this.parseAutolink(e)||this.parseHtmlTag(e);break;case 38:r=this.parseEntity(e);break;default:r=this.parseString(e)}return r||(this.pos+=1,e.appendChild(H(O(t)))),!0},Fe=function(e){for(this.subject=e._string_content.trim(),this.pos=0,this.delimiters=null,this.brackets=null;this.parseInline(e););e._string_content=null,this.processEmphasis(null)};function Re(e){return{subject:"",delimiters:null,brackets:null,pos:0,refmap:{},match:ce,peek:ue,spnl:pe,parseBackticks:he,parseBackslash:de,parseAutolink:fe,parseHtmlTag:ge,scanDelims:me,handleDelim:be,parseLinkTitle:ye,parseLinkDestination:we,parseLinkLabel:ke,parseOpenBracket:De,parseBang:Le,parseCloseBracket:xe,addBracket:_e,removeBracket:Ee,parseEntity:Ae,parseString:Ce,parseNewline:Te,parseReference:Se,parseInline:Ne,processEmphasis:qe,removeDelimiter:ve,options:e||{},parse:Fe}}function Be(e){return 32===e||9===e}function Oe(e,r){return r<e.length?e.charCodeAt(r):-1}function Ue(e){for(;e;){if(e._lastLineBlank)return 1;var r=e.type;if(e._lastLineChecked||"list"!==r&&"item"!==r){e._lastLineChecked=!0;break}e._lastLineChecked=!0,e=e._lastChild}}function He(){var e;this.partiallyConsumedTab&&(this.offset+=1,e=4-this.column%4,this.tip._string_content+=" ".repeat(e)),this.tip._string_content+=this.currentLine.slice(this.offset)+"\n"}function Ve(e,r){for(;!this.blocks[this.tip.type].canContain(e);)this.finalize(this.tip,this.lineNumber-1);return(r=new b(e,[[this.lineNumber,r+1],[0,0]]))._string_content="",this.tip.appendChild(r),this.tip=r}function Pe(){if(!this.allClosed){for(;this.oldtip!==this.lastMatchedContainer;){var e=this.oldtip._parent;this.finalize(this.oldtip,this.lineNumber-1),this.oldtip=e}this.allClosed=!0}}function je(e,r){for(var t,i,n,a=this.currentLine;0<e&&(n=a[this.offset]);)"\t"===n?(t=4-this.column%4,r?(this.partiallyConsumedTab=e<t,this.column+=i=e<t?e:t,this.offset+=this.partiallyConsumedTab?0:1,e-=i):(this.partiallyConsumedTab=!1,this.column+=t,this.offset+=1,--e)):(this.partiallyConsumedTab=!1,this.offset+=1,this.column+=1,--e)}function Me(){this.offset=this.nextNonspace,this.column=this.nextNonspaceColumn,this.partiallyConsumedTab=!1}function ze(){for(var e,r=this.currentLine,t=this.offset,i=this.column;""!==(e=r.charAt(t));)if(" "===e)t++,i++;else{if("\t"!==e)break;t++,i+=4-i%4}this.blank="\n"===e||"\r"===e||""===e,this.nextNonspace=t,this.nextNonspaceColumn=i,this.indent=this.nextNonspaceColumn-this.column,this.indented=4<=this.indent}function Ge(e){var r,t=!0,i=this.doc;for(this.oldtip=this.tip,this.offset=0,this.column=0,this.blank=!1,this.partiallyConsumedTab=!1,this.lineNumber+=1,-1!==e.indexOf("\0")&&(e=e.replace(/\0/g,"�")),this.currentLine=e;(r=i._lastChild)&&r._open;){switch(i=r,this.findNextNonspace(),this.blocks[i.type].continue(this,i)){case 0:break;case 1:t=!1;break;case 2:return;default:throw"continue returned illegal value, must be 0, 1, or 2"}if(!t){i=i._parent;break}}this.allClosed=i===this.oldtip;for(var n="paragraph"!==(this.lastMatchedContainer=i).type&&or[i.type].acceptsLines,a=this.blockStarts,s=a.length;!n;){if(this.findNextNonspace(),!this.indented&&!Ke.test(e.slice(this.nextNonspace))){this.advanceNextNonspace();break}for(var o=0;o<s;){var l=a[o](this,i);if(1===l){i=this.tip;break}if(2===l){i=this.tip,n=!0;break}o++}if(o===s){this.advanceNextNonspace();break}}if(this.allClosed||this.blank||"paragraph"!==this.tip.type){this.closeUnmatchedBlocks(),this.blank&&i.lastChild&&(i.lastChild._lastLineBlank=!0);for(var c=i.type,u=this.blank&&!("block_quote"===c||"code_block"===c&&i._isFenced||"item"===c&&!i._firstChild&&i.sourcepos[0][0]===this.lineNumber),p=i;p;)p._lastLineBlank=u,p=p._parent;this.blocks[c].acceptsLines?(this.addLine(),"html_block"===c&&1<=i._htmlBlockType&&i._htmlBlockType<=5&&$e[i._htmlBlockType].test(this.currentLine.slice(this.offset))&&(this.lastLineLength=e.length,this.finalize(i,this.lineNumber))):this.offset<e.length&&!this.blank&&(i=this.addChild("paragraph",this.offset),this.advanceNextNonspace(),this.addLine())}else this.addLine();this.lastLineLength=e.length}function Ie(e,r){var t=e._parent;e._open=!1,e.sourcepos[1]=[r,this.lastLineLength],this.blocks[e.type].finalize(this,e),this.tip=t}function Ze(e){var r,t,i,n=e.walker();for(this.inlineParser.refmap=this.refmap,this.inlineParser.options=this.options;t=n.next();)i=(r=t.node).type,t.entering||"paragraph"!==i&&"heading"!==i||this.inlineParser.parse(r)}function Xe(){return new b("document",[[1,1],[0,0]])}function Ye(e){this.doc=new Xe,this.tip=this.doc,this.refmap={},this.lineNumber=0,this.lastLineLength=0,this.offset=0,this.column=0,this.lastMatchedContainer=this.doc,this.currentLine="",this.options.time&&console.time("preparing input");var r=e.split(sr),t=r.length;10===e.charCodeAt(e.length-1)&&--t,this.options.time&&console.timeEnd("preparing input"),this.options.time&&console.time("block parsing");for(var i=0;i<t;i++)this.incorporateLine(r[i]);for(;this.tip;)this.finalize(this.tip,t);return this.options.time&&console.timeEnd("block parsing"),this.options.time&&console.time("inline parsing"),this.processInlines(this.doc),this.options.time&&console.timeEnd("inline parsing"),this.doc}var Je=[/./,/^<(?:script|pre|textarea|style)(?:\s|>|$)/i,/^<!--/,/^<[?]/,/^<![A-Z]/,/^<!\[CDATA\[/,/^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|[/]?[>]|$)/i,new RegExp("^(?:"+f+"|"+g+")\\s*$","i")],$e=[/./,/<\/(?:script|pre|textarea|style)>/i,/-->/,/\?>/,/>/,/\]\]>/],Qe=/^(?:\*[ \t]*){3,}$|^(?:_[ \t]*){3,}$|^(?:-[ \t]*){3,}$/,Ke=/^[#`~*+_=<>0-9-]/,We=/[^ \t\f\v\r\n]/,er=/^[*+-]/,rr=/^(\d{1,9})([.)])/,tr=/^#{1,6}(?:[ \t]+|$)/,ir=/^`{3,}(?!.*`)|^~{3,}/,nr=/^(?:`{3,}|~{3,})(?= *$)/,ar=/^(?:=+|-+)[ \t]*$/,sr=/\r\n|\n|\r/,or={document:{continue:function(){return 0},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},list:{continue:function(){return 0},finalize:function(e,r){for(var t=r._firstChild;t;){if(Ue(t)&&t._next){r._listData.tight=!1;break}for(var i=t._firstChild;i;){if(Ue(i)&&(t._next||i._next)){r._listData.tight=!1;break}i=i._next}t=t._next}},canContain:function(e){return"item"===e},acceptsLines:!1},block_quote:{continue:function(e){var r=e.currentLine;return e.indented||62!==Oe(r,e.nextNonspace)?1:(e.advanceNextNonspace(),e.advanceOffset(1,!1),Be(Oe(r,e.offset))&&e.advanceOffset(1,!0),0)},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},item:{continue:function(e,r){if(e.blank){if(null==r._firstChild)return 1;e.advanceNextNonspace()}else{if(!(e.indent>=r._listData.markerOffset+r._listData.padding))return 1;e.advanceOffset(r._listData.markerOffset+r._listData.padding,!0)}return 0},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},heading:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},thematic_break:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},code_block:{continue:function(e,r){var t=e.currentLine,i=e.indent;if(r._isFenced){var n=i<=3&&t.charAt(e.nextNonspace)===r._fenceChar&&t.slice(e.nextNonspace).match(nr);if(n&&n[0].length>=r._fenceLength)return e.lastLineLength=e.offset+i+n[0].length,e.finalize(r,e.lineNumber),2;for(var a=r._fenceOffset;0<a&&Be(Oe(t,e.offset));)e.advanceOffset(1,!0),a--}else if(4<=i)e.advanceOffset(4,!0);else{if(!e.blank)return 1;e.advanceNextNonspace()}return 0},finalize:function(e,r){var t,i,n;r._isFenced?(n=(t=r._string_content).indexOf("\n"),i=t.slice(0,n),n=t.slice(n+1),r.info=_(i.trim()),r._literal=n):r._literal=r._string_content.replace(/(\n *)+$/,"\n"),r._string_content=null},canContain:function(){return!1},acceptsLines:!0},html_block:{continue:function(e,r){return!e.blank||6!==r._htmlBlockType&&7!==r._htmlBlockType?0:1},finalize:function(e,r){r._literal=r._string_content.replace(/(\n *)+$/,""),r._string_content=null},canContain:function(){return!1},acceptsLines:!0},paragraph:{continue:function(e){return e.blank?1:0},finalize:function(e,r){for(var t,i,n=!1;91===Oe(r._string_content,0)&&(t=e.inlineParser.parseReference(r._string_content,e.refmap));)r._string_content=r._string_content.slice(t),n=!0;n&&(i=r._string_content,!We.test(i))&&r.unlink()},canContain:function(){return!1},acceptsLines:!0}},lr=[function(e){return e.indented||62!==Oe(e.currentLine,e.nextNonspace)?0:(e.advanceNextNonspace(),e.advanceOffset(1,!1),Be(Oe(e.currentLine,e.offset))&&e.advanceOffset(1,!0),e.closeUnmatchedBlocks(),e.addChild("block_quote",e.nextNonspace),1)},function(e){var r;if(e.indented||!(r=e.currentLine.slice(e.nextNonspace).match(tr)))return 0;e.advanceNextNonspace(),e.advanceOffset(r[0].length,!1),e.closeUnmatchedBlocks();var t=e.addChild("heading",e.nextNonspace);return t.level=r[0].trim().length,t._string_content=e.currentLine.slice(e.offset).replace(/^[ \t]*#+[ \t]*$/,"").replace(/[ \t]+#+[ \t]*$/,""),e.advanceOffset(e.currentLine.length-e.offset),2},function(e){var r;if(e.indented||!(r=e.currentLine.slice(e.nextNonspace).match(ir)))return 0;var t=r[0].length;e.closeUnmatchedBlocks();var i=e.addChild("code_block",e.nextNonspace);return i._isFenced=!0,i._fenceLength=t,i._fenceChar=r[0][0],i._fenceOffset=e.indent,e.advanceNextNonspace(),e.advanceOffset(t,!1),2},function(e,r){if(!e.indented&&60===Oe(e.currentLine,e.nextNonspace))for(var t=e.currentLine.slice(e.nextNonspace),i=1;i<=7;i++)if(Je[i].test(t)&&(i<7||"paragraph"!==r.type&&(e.allClosed||e.blank||"paragraph"!==e.tip.type)))return e.closeUnmatchedBlocks(),e.addChild("html_block",e.offset)._htmlBlockType=i,2;return 0},function(e,r){var t,i;if(e.indented||"paragraph"!==r.type||!(t=e.currentLine.slice(e.nextNonspace).match(ar)))return 0;for(e.closeUnmatchedBlocks();91===Oe(r._string_content,0)&&(i=e.inlineParser.parseReference(r._string_content,e.refmap));)r._string_content=r._string_content.slice(i);if(0<r._string_content.length){var n=new b("heading",r.sourcepos);return n.level="="===t[0][0]?1:2,n._string_content=r._string_content,r.insertAfter(n),r.unlink(),e.tip=n,e.advanceOffset(e.currentLine.length-e.offset,!1),2}return 0},function(e){return!e.indented&&Qe.test(e.currentLine.slice(e.nextNonspace))?(e.closeUnmatchedBlocks(),e.addChild("thematic_break",e.nextNonspace),e.advanceOffset(e.currentLine.length-e.offset,!1),2):0},function(e,r){var t,i,n;return e.indented&&"list"!==r.type||!(t=function(e,r){var t,i,n,a,s=e.currentLine.slice(e.nextNonspace),o={type:null,tight:!0,bulletChar:null,start:null,delimiter:null,padding:null,markerOffset:e.indent};if(4<=e.indent)return null;if(t=s.match(er))o.type="bullet",o.bulletChar=t[0][0];else{if(!(t=s.match(rr))||"paragraph"===r.type&&1!=t[1])return null;o.type="ordered",o.start=parseInt(t[1]),o.delimiter=t[2]}if(-1!==(i=Oe(e.currentLine,e.nextNonspace+t[0].length))&&9!==i&&32!==i)return null;if("paragraph"===r.type&&!e.currentLine.slice(e.nextNonspace+t[0].length).match(We))return null;for(e.advanceNextNonspace(),e.advanceOffset(t[0].length,!0),n=e.column,a=e.offset;e.advanceOffset(1,!0),i=Oe(e.currentLine,e.offset),e.column-n<5&&Be(i););s=-1===Oe(e.currentLine,e.offset),r=e.column-n;return 5<=r||r<1||s?(o.padding=t[0].length+1,e.column=n,e.offset=a,Be(Oe(e.currentLine,e.offset))&&e.advanceOffset(1,!0)):o.padding=t[0].length+r,o}(e,r))?0:(e.closeUnmatchedBlocks(),"list"===e.tip.type&&(i=r._listData,n=t,i.type===n.type&&i.delimiter===n.delimiter&&i.bulletChar===n.bulletChar)||((r=e.addChild("list",e.nextNonspace))._listData=t),(r=e.addChild("item",e.nextNonspace))._listData=t,1)},function(e){return e.indented&&"paragraph"!==e.tip.type&&!e.blank?(e.advanceOffset(4,!0),e.closeUnmatchedBlocks(),e.addChild("code_block",e.offset),2):0}];function cr(){}cr.prototype.render=function(e){var r,t,i=e.walker();for(this.buffer="",this.lastOut="\n";r=i.next();)this[t=r.node.type]&&this[t](r.node,r.entering);return this.buffer},cr.prototype.out=function(e){this.lit(e)},cr.prototype.lit=function(e){this.buffer+=e,this.lastOut=e},cr.prototype.cr=function(){"\n"!==this.lastOut&&this.lit("\n")},cr.prototype.esc=function(e){return e};function ur(e){return pr.test(e)&&!hr.test(e)}var pr=/^javascript:|vbscript:|file:|data:/i,hr=/^data:image\/(?:png|gif|jpeg|webp)/i;function dr(e){(e=e||{}).softbreak=e.softbreak||"\n",this.esc=e.esc||A,this.disableTags=0,this.lastOut="\n",this.options=e}(dr.prototype=Object.create(cr.prototype)).text=function(e){this.out(e.literal)},dr.prototype.html_inline=function(e){this.options.safe?this.lit("\x3c!-- raw HTML omitted --\x3e"):this.lit(e.literal)},dr.prototype.html_block=function(e){this.cr(),this.options.safe?this.lit("\x3c!-- raw HTML omitted --\x3e"):this.lit(e.literal),this.cr()},dr.prototype.softbreak=function(){this.lit(this.options.softbreak)},dr.prototype.linebreak=function(){this.tag("br",[],!0),this.cr()},dr.prototype.link=function(e,r){var t=this.attrs(e);r?(this.options.safe&&ur(e.destination)||t.push(["href",this.esc(e.destination)]),e.title&&t.push(["title",this.esc(e.title)]),this.tag("a",t)):this.tag("/a")},dr.prototype.image=function(e,r){r?(0===this.disableTags&&(this.options.safe&&ur(e.destination)?this.lit('<img src="" alt="'):this.lit('<img src="'+this.esc(e.destination)+'" alt="')),this.disableTags+=1):(--this.disableTags,0===this.disableTags&&(e.title&&this.lit('" title="'+this.esc(e.title)),this.lit('" />')))},dr.prototype.emph=function(e,r){this.tag(r?"em":"/em")},dr.prototype.strong=function(e,r){this.tag(r?"strong":"/strong")},dr.prototype.paragraph=function(e,r){var t=e.parent.parent,e=this.attrs(e);null!==t&&"list"===t.type&&t.listTight||(r?(this.cr(),this.tag("p",e)):(this.tag("/p"),this.cr()))},dr.prototype.heading=function(e,r){var t="h"+e.level,e=this.attrs(e);r?(this.cr(),this.tag(t,e)):(this.tag("/"+t),this.cr())},dr.prototype.code=function(e){this.tag("code"),this.out(e.literal),this.tag("/code")},dr.prototype.code_block=function(e){var r=e.info?e.info.split(/\s+/):[],t=this.attrs(e);0<r.length&&0<r[0].length&&t.push(["class","language-"+this.esc(r[0])]),this.cr(),this.tag("pre"),this.tag("code",t),this.out(e.literal),this.tag("/code"),this.tag("/pre"),this.cr()},dr.prototype.thematic_break=function(e){e=this.attrs(e),this.cr(),this.tag("hr",e,!0),this.cr()},dr.prototype.block_quote=function(e,r){e=this.attrs(e),r?(this.cr(),this.tag("blockquote",e)):(this.cr(),this.tag("/blockquote")),this.cr()},dr.prototype.list=function(e,r){var t="bullet"===e.listType?"ul":"ol",i=this.attrs(e);r?(null!==(e=e.listStart)&&1!==e&&i.push(["start",e.toString()]),this.cr(),this.tag(t,i)):(this.cr(),this.tag("/"+t)),this.cr()},dr.prototype.item=function(e,r){e=this.attrs(e),r?this.tag("li",e):(this.tag("/li"),this.cr())},dr.prototype.custom_inline=function(e,r){r&&e.onEnter?this.lit(e.onEnter):!r&&e.onExit&&this.lit(e.onExit)},dr.prototype.custom_block=function(e,r){this.cr(),r&&e.onEnter?this.lit(e.onEnter):!r&&e.onExit&&this.lit(e.onExit),this.cr()},dr.prototype.esc=A,dr.prototype.out=function(e){this.lit(this.esc(e))},dr.prototype.tag=function(e,r,t){if(!(0<this.disableTags)){if(this.buffer+="<"+e,r&&0<r.length)for(var i,n=0;void 0!==(i=r[n]);)this.buffer+=" "+i[0]+'="'+i[1]+'"',n++;t&&(this.buffer+=" /"),this.buffer+=">",this.lastOut=">"}},dr.prototype.attrs=function(e){var r=[];return!this.options.sourcepos||(e=e.sourcepos)&&r.push(["data-sourcepos",String(e[0][0])+":"+String(e[0][1])+"-"+String(e[1][0])+":"+String(e[1][1])]),r};var fr=/\<[^>]*\>/;function gr(e){e=e||{},this.disableTags=0,this.lastOut="\n",this.indentLevel=0,this.indent="  ",this.esc=e.esc||A,this.options=e}(gr.prototype=Object.create(cr.prototype)).render=function(e){var r;this.buffer="";var t,i,n,a,s,o,l=e.walker(),c=this.options;for(c.time&&console.time("rendering"),this.buffer+='<?xml version="1.0" encoding="UTF-8"?>\n',this.buffer+='<!DOCTYPE document SYSTEM "CommonMark.dtd">\n';t=l.next();)if(n=t.entering,s=(i=t.node).type,a=i.isContainer,o="thematic_break"===s||"linebreak"===s||"softbreak"===s,t=s.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase(),n){switch(r=[],s){case"document":r.push(["xmlns","http://commonmark.org/xml/1.0"]);break;case"list":null!==i.listType&&r.push(["type",i.listType.toLowerCase()]),null!==i.listStart&&r.push(["start",String(i.listStart)]),null!==i.listTight&&r.push(["tight",i.listTight?"true":"false"]);var u=i.listDelimiter;null!==u&&r.push(["delimiter","."===u?"period":"paren"]);break;case"code_block":i.info&&r.push(["info",i.info]);break;case"heading":r.push(["level",String(i.level)]);break;case"link":case"image":r.push(["destination",i.destination]),r.push(["title",i.title]);break;case"custom_inline":case"custom_block":r.push(["on_enter",i.onEnter]),r.push(["on_exit",i.onExit])}!c.sourcepos||(s=i.sourcepos)&&r.push(["sourcepos",String(s[0][0])+":"+String(s[0][1])+"-"+String(s[1][0])+":"+String(s[1][1])]),this.cr(),this.out(this.tag(t,r,o)),a?this.indentLevel+=1:a||o||((o=i.literal)&&this.out(this.esc(o)),this.out(this.tag("/"+t)))}else--this.indentLevel,this.cr(),this.out(this.tag("/"+t));return c.time&&console.timeEnd("rendering"),this.buffer+="\n",this.buffer},gr.prototype.out=function(e){0<this.disableTags?this.buffer+=e.replace(fr,""):this.buffer+=e,this.lastOut=e},gr.prototype.cr=function(){if("\n"!==this.lastOut){this.buffer+="\n",this.lastOut="\n";for(var e=this.indentLevel;0<e;e--)this.buffer+=this.indent}},gr.prototype.tag=function(e,r,t){var i="<"+e;if(r&&0<r.length)for(var n,a=0;void 0!==(n=r[a]);)i+=" "+n[0]+'="'+this.esc(n[1])+'"',a++;return t&&(i+=" /"),i+=">"},gr.prototype.esc=A,e.HtmlRenderer=dr,e.Node=b,e.Parser=function(e){return{doc:new Xe,blocks:or,blockStarts:lr,tip:this.doc,oldtip:this.doc,currentLine:"",lineNumber:0,offset:0,column:0,nextNonspace:0,nextNonspaceColumn:0,indent:0,indented:!1,blank:!1,partiallyConsumedTab:!1,allClosed:!0,lastMatchedContainer:this.doc,refmap:{},lastLineLength:0,inlineParser:new Re(e),findNextNonspace:ze,advanceOffset:je,advanceNextNonspace:Me,addLine:He,addChild:Ve,incorporateLine:Ge,finalize:Ie,processInlines:Ze,closeUnmatchedBlocks:Pe,parse:Ye,options:e||{}}},e.Renderer=cr,e.XmlRenderer=gr,Object.defineProperty(e,"__esModule",{value:!0})});
+!function(e,d){"object"==typeof exports&&"undefined"!=typeof module?d(exports):"function"==typeof define&&define.amd?define(["exports"],d):d((e=e||self).commonmark={})}(this,function(e){"use strict";function t(e){switch(e._type){case"document":case"block_quote":case"list":case"item":case"table":case"table_row":case"table_cell":case"paragraph":case"heading":case"emph":case"strong":case"del":case"link":case"image":case"at_mention":case"channel_link":case"emoji":case"hashtag":case"latex_inline":case"mention_highlight":case"search_highlight":case"custom_inline":case"custom_block":return!0;default:return!1}}function d(e,d){this.current=e,this.entering=!0===d}function u(){var e=this.current,d=this.entering;if(null===e)return null;var u=t(e);return d&&u?e._firstChild?(this.current=e._firstChild,this.entering=!0):this.entering=!1:e===this.root?this.current=null:null===e._next?(this.current=e._parent,this.entering=!1):(this.current=e._next,this.entering=!0),{entering:d,node:e}}function a(e){return{current:e,root:e,entering:!0,next:u,resumeAt:d}}var g=function(e,d){this._type=e,this._parent=null,this._firstChild=null,this._lastChild=null,this._prev=null,this._next=null,this._sourcepos=d,this._lastLineBlank=!1,this._lastLineChecked=!1,this._open=!0,this._string_content=null,this._literal=null,this._listData={},this._info=null,this._destination=null,this._size=null,this._title=null,this._isFenced=!1,this._fenceChar=null,this._fenceLength=0,this._fenceOffset=null,this._level=null,this._mentionName=null,this._emojiName=null,this._hashtag=null,this._latexCode=null,this._alignColumns=[],this._isHeading=!1,this._align="",this._onEnter=null,this._onExit=null},r=g.prototype;Object.defineProperty(r,"isContainer",{get:function(){return t(this)}}),Object.defineProperty(r,"type",{get:function(){return this._type}}),Object.defineProperty(r,"firstChild",{get:function(){return this._firstChild}}),Object.defineProperty(r,"lastChild",{get:function(){return this._lastChild}}),Object.defineProperty(r,"next",{get:function(){return this._next}}),Object.defineProperty(r,"prev",{get:function(){return this._prev}}),Object.defineProperty(r,"parent",{get:function(){return this._parent}}),Object.defineProperty(r,"sourcepos",{get:function(){return this._sourcepos}}),Object.defineProperty(r,"literal",{get:function(){return this._literal},set:function(e){this._literal=e}}),Object.defineProperty(r,"destination",{get:function(){return this._destination},set:function(e){this._destination=e}}),Object.defineProperty(r,"size",{get:function(){return this._size},set:function(e){this._size=e}}),Object.defineProperty(r,"title",{get:function(){return this._title},set:function(e){this._title=e}}),Object.defineProperty(r,"info",{get:function(){return this._info},set:function(e){this._info=e}}),Object.defineProperty(r,"level",{get:function(){return this._level},set:function(e){this._level=e}}),Object.defineProperty(r,"listType",{get:function(){return this._listData.type},set:function(e){this._listData.type=e}}),Object.defineProperty(r,"listTight",{get:function(){return this._listData.tight},set:function(e){this._listData.tight=e}}),Object.defineProperty(r,"listStart",{get:function(){return this._listData.start},set:function(e){this._listData.start=e}}),Object.defineProperty(r,"listDelimiter",{get:function(){return this._listData.delimiter},set:function(e){this._listData.delimiter=e}}),Object.defineProperty(r,"mentionName",{get:function(){return this._mentionName}}),Object.defineProperty(r,"channelName",{get:function(){return this._channelName}}),Object.defineProperty(r,"emojiName",{get:function(){return this._emojiName}}),Object.defineProperty(r,"hashtag",{get:function(){return this._hashtag}}),Object.defineProperty(r,"latexCode",{get:function(){return this._latexCode}}),Object.defineProperty(r,"alignColumns",{get:function(){return this._alignColumns},set:function(e){this._alignColumns=e}}),Object.defineProperty(r,"isHeading",{get:function(){return this._isHeading},set:function(e){this._isHeading=e}}),Object.defineProperty(r,"align",{get:function(){return this._align},set:function(e){this._align=e}}),Object.defineProperty(r,"onEnter",{get:function(){return this._onEnter},set:function(e){this._onEnter=e}}),Object.defineProperty(r,"onExit",{get:function(){return this._onExit},set:function(e){this._onExit=e}}),g.prototype.appendChild=function(e){e.unlink(),(e._parent=this)._lastChild?(this._lastChild._next=e)._prev=this._lastChild:this._firstChild=e,this._lastChild=e},g.prototype.prependChild=function(e){e.unlink(),(e._parent=this)._firstChild?((this._firstChild._prev=e)._next=this._firstChild,this._firstChild=e):(this._firstChild=e,this._lastChild=e)},g.prototype.unlink=function(){this._prev?this._prev._next=this._next:this._parent&&(this._parent._firstChild=this._next),this._next?this._next._prev=this._prev:this._parent&&(this._parent._lastChild=this._prev),this._parent=null,this._next=null,this._prev=null},g.prototype.insertAfter=function(e){e.unlink(),e._next=this._next,e._next&&(e._next._prev=e),((e._prev=this)._next=e)._parent=this._parent,e._next||(e._parent._lastChild=e)},g.prototype.insertBefore=function(e){e.unlink(),e._prev=this._prev,e._prev&&(e._prev._next=e),((e._next=this)._prev=e)._parent=this._parent,e._prev||(e._parent._firstChild=e)},g.prototype.walker=function(){return new a(this)};var s={};function o(e,d,u){var t,a,r,n,c,i="";for("string"!=typeof d&&(u=d,d=o.defaultChars),void 0===u&&(u=!0),c=function(e){var d,u,t=s[e];if(t)return t;for(t=s[e]=[],d=0;d<128;d++)u=String.fromCharCode(d),/^[0-9a-z]$/i.test(u)?t.push(u):t.push("%"+("0"+d.toString(16).toUpperCase()).slice(-2));for(d=0;d<e.length;d++)t[e.charCodeAt(d)]=e[d];return t}(d),t=0,a=e.length;t<a;t++)r=e.charCodeAt(t),u&&37===r&&t+2<a&&/^[0-9a-f]{2}$/i.test(e.slice(t+1,t+3))?(i+=e.slice(t,t+3),t+=2):r<128?i+=c[r]:55296<=r&&r<=57343?55296<=r&&r<=56319&&t+1<a&&56320<=(n=e.charCodeAt(t+1))&&n<=57343?(i+=encodeURIComponent(e[t]+e[t+1]),t++):i+="%EF%BF%BD":i+=encodeURIComponent(e[t]);return i}o.defaultChars=";/?:@&=+$,-_.!~*'()#",o.componentChars="-_.!~*'()";var n=o,l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function c(e){return e&&e.__esModule&&Object.prototype.hasOwnProperty.call(e,"default")?e.default:e}function i(e,d){return e(d={exports:{}},d.exports),d.exports}function f(e){return e&&e.default||e}var p=Object.freeze({__proto__:null,Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌",default:{Aacute:"Á",aacute:"á",Abreve:"Ă",abreve:"ă",ac:"∾",acd:"∿",acE:"∾̳",Acirc:"Â",acirc:"â",acute:"´",Acy:"А",acy:"а",AElig:"Æ",aelig:"æ",af:"⁡",Afr:"𝔄",afr:"𝔞",Agrave:"À",agrave:"à",alefsym:"ℵ",aleph:"ℵ",Alpha:"Α",alpha:"α",Amacr:"Ā",amacr:"ā",amalg:"⨿",amp:"&",AMP:"&",andand:"⩕",And:"⩓",and:"∧",andd:"⩜",andslope:"⩘",andv:"⩚",ang:"∠",ange:"⦤",angle:"∠",angmsdaa:"⦨",angmsdab:"⦩",angmsdac:"⦪",angmsdad:"⦫",angmsdae:"⦬",angmsdaf:"⦭",angmsdag:"⦮",angmsdah:"⦯",angmsd:"∡",angrt:"∟",angrtvb:"⊾",angrtvbd:"⦝",angsph:"∢",angst:"Å",angzarr:"⍼",Aogon:"Ą",aogon:"ą",Aopf:"𝔸",aopf:"𝕒",apacir:"⩯",ap:"≈",apE:"⩰",ape:"≊",apid:"≋",apos:"'",ApplyFunction:"⁡",approx:"≈",approxeq:"≊",Aring:"Å",aring:"å",Ascr:"𝒜",ascr:"𝒶",Assign:"≔",ast:"*",asymp:"≈",asympeq:"≍",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",awconint:"∳",awint:"⨑",backcong:"≌",backepsilon:"϶",backprime:"‵",backsim:"∽",backsimeq:"⋍",Backslash:"∖",Barv:"⫧",barvee:"⊽",barwed:"⌅",Barwed:"⌆",barwedge:"⌅",bbrk:"⎵",bbrktbrk:"⎶",bcong:"≌",Bcy:"Б",bcy:"б",bdquo:"„",becaus:"∵",because:"∵",Because:"∵",bemptyv:"⦰",bepsi:"϶",bernou:"ℬ",Bernoullis:"ℬ",Beta:"Β",beta:"β",beth:"ℶ",between:"≬",Bfr:"𝔅",bfr:"𝔟",bigcap:"⋂",bigcirc:"◯",bigcup:"⋃",bigodot:"⨀",bigoplus:"⨁",bigotimes:"⨂",bigsqcup:"⨆",bigstar:"★",bigtriangledown:"▽",bigtriangleup:"△",biguplus:"⨄",bigvee:"⋁",bigwedge:"⋀",bkarow:"⤍",blacklozenge:"⧫",blacksquare:"▪",blacktriangle:"▴",blacktriangledown:"▾",blacktriangleleft:"◂",blacktriangleright:"▸",blank:"␣",blk12:"▒",blk14:"░",blk34:"▓",block:"█",bne:"=⃥",bnequiv:"≡⃥",bNot:"⫭",bnot:"⌐",Bopf:"𝔹",bopf:"𝕓",bot:"⊥",bottom:"⊥",bowtie:"⋈",boxbox:"⧉",boxdl:"┐",boxdL:"╕",boxDl:"╖",boxDL:"╗",boxdr:"┌",boxdR:"╒",boxDr:"╓",boxDR:"╔",boxh:"─",boxH:"═",boxhd:"┬",boxHd:"╤",boxhD:"╥",boxHD:"╦",boxhu:"┴",boxHu:"╧",boxhU:"╨",boxHU:"╩",boxminus:"⊟",boxplus:"⊞",boxtimes:"⊠",boxul:"┘",boxuL:"╛",boxUl:"╜",boxUL:"╝",boxur:"└",boxuR:"╘",boxUr:"╙",boxUR:"╚",boxv:"│",boxV:"║",boxvh:"┼",boxvH:"╪",boxVh:"╫",boxVH:"╬",boxvl:"┤",boxvL:"╡",boxVl:"╢",boxVL:"╣",boxvr:"├",boxvR:"╞",boxVr:"╟",boxVR:"╠",bprime:"‵",breve:"˘",Breve:"˘",brvbar:"¦",bscr:"𝒷",Bscr:"ℬ",bsemi:"⁏",bsim:"∽",bsime:"⋍",bsolb:"⧅",bsol:"\\",bsolhsub:"⟈",bull:"•",bullet:"•",bump:"≎",bumpE:"⪮",bumpe:"≏",Bumpeq:"≎",bumpeq:"≏",Cacute:"Ć",cacute:"ć",capand:"⩄",capbrcup:"⩉",capcap:"⩋",cap:"∩",Cap:"⋒",capcup:"⩇",capdot:"⩀",CapitalDifferentialD:"ⅅ",caps:"∩︀",caret:"⁁",caron:"ˇ",Cayleys:"ℭ",ccaps:"⩍",Ccaron:"Č",ccaron:"č",Ccedil:"Ç",ccedil:"ç",Ccirc:"Ĉ",ccirc:"ĉ",Cconint:"∰",ccups:"⩌",ccupssm:"⩐",Cdot:"Ċ",cdot:"ċ",cedil:"¸",Cedilla:"¸",cemptyv:"⦲",cent:"¢",centerdot:"·",CenterDot:"·",cfr:"𝔠",Cfr:"ℭ",CHcy:"Ч",chcy:"ч",check:"✓",checkmark:"✓",Chi:"Χ",chi:"χ",circ:"ˆ",circeq:"≗",circlearrowleft:"↺",circlearrowright:"↻",circledast:"⊛",circledcirc:"⊚",circleddash:"⊝",CircleDot:"⊙",circledR:"®",circledS:"Ⓢ",CircleMinus:"⊖",CirclePlus:"⊕",CircleTimes:"⊗",cir:"○",cirE:"⧃",cire:"≗",cirfnint:"⨐",cirmid:"⫯",cirscir:"⧂",ClockwiseContourIntegral:"∲",CloseCurlyDoubleQuote:"”",CloseCurlyQuote:"’",clubs:"♣",clubsuit:"♣",colon:":",Colon:"∷",Colone:"⩴",colone:"≔",coloneq:"≔",comma:",",commat:"@",comp:"∁",compfn:"∘",complement:"∁",complexes:"ℂ",cong:"≅",congdot:"⩭",Congruent:"≡",conint:"∮",Conint:"∯",ContourIntegral:"∮",copf:"𝕔",Copf:"ℂ",coprod:"∐",Coproduct:"∐",copy:"©",COPY:"©",copysr:"℗",CounterClockwiseContourIntegral:"∳",crarr:"↵",cross:"✗",Cross:"⨯",Cscr:"𝒞",cscr:"𝒸",csub:"⫏",csube:"⫑",csup:"⫐",csupe:"⫒",ctdot:"⋯",cudarrl:"⤸",cudarrr:"⤵",cuepr:"⋞",cuesc:"⋟",cularr:"↶",cularrp:"⤽",cupbrcap:"⩈",cupcap:"⩆",CupCap:"≍",cup:"∪",Cup:"⋓",cupcup:"⩊",cupdot:"⊍",cupor:"⩅",cups:"∪︀",curarr:"↷",curarrm:"⤼",curlyeqprec:"⋞",curlyeqsucc:"⋟",curlyvee:"⋎",curlywedge:"⋏",curren:"¤",curvearrowleft:"↶",curvearrowright:"↷",cuvee:"⋎",cuwed:"⋏",cwconint:"∲",cwint:"∱",cylcty:"⌭",dagger:"†",Dagger:"‡",daleth:"ℸ",darr:"↓",Darr:"↡",dArr:"⇓",dash:"‐",Dashv:"⫤",dashv:"⊣",dbkarow:"⤏",dblac:"˝",Dcaron:"Ď",dcaron:"ď",Dcy:"Д",dcy:"д",ddagger:"‡",ddarr:"⇊",DD:"ⅅ",dd:"ⅆ",DDotrahd:"⤑",ddotseq:"⩷",deg:"°",Del:"∇",Delta:"Δ",delta:"δ",demptyv:"⦱",dfisht:"⥿",Dfr:"𝔇",dfr:"𝔡",dHar:"⥥",dharl:"⇃",dharr:"⇂",DiacriticalAcute:"´",DiacriticalDot:"˙",DiacriticalDoubleAcute:"˝",DiacriticalGrave:"`",DiacriticalTilde:"˜",diam:"⋄",diamond:"⋄",Diamond:"⋄",diamondsuit:"♦",diams:"♦",die:"¨",DifferentialD:"ⅆ",digamma:"ϝ",disin:"⋲",div:"÷",divide:"÷",divideontimes:"⋇",divonx:"⋇",DJcy:"Ђ",djcy:"ђ",dlcorn:"⌞",dlcrop:"⌍",dollar:"$",Dopf:"𝔻",dopf:"𝕕",Dot:"¨",dot:"˙",DotDot:"⃜",doteq:"≐",doteqdot:"≑",DotEqual:"≐",dotminus:"∸",dotplus:"∔",dotsquare:"⊡",doublebarwedge:"⌆",DoubleContourIntegral:"∯",DoubleDot:"¨",DoubleDownArrow:"⇓",DoubleLeftArrow:"⇐",DoubleLeftRightArrow:"⇔",DoubleLeftTee:"⫤",DoubleLongLeftArrow:"⟸",DoubleLongLeftRightArrow:"⟺",DoubleLongRightArrow:"⟹",DoubleRightArrow:"⇒",DoubleRightTee:"⊨",DoubleUpArrow:"⇑",DoubleUpDownArrow:"⇕",DoubleVerticalBar:"∥",DownArrowBar:"⤓",downarrow:"↓",DownArrow:"↓",Downarrow:"⇓",DownArrowUpArrow:"⇵",DownBreve:"̑",downdownarrows:"⇊",downharpoonleft:"⇃",downharpoonright:"⇂",DownLeftRightVector:"⥐",DownLeftTeeVector:"⥞",DownLeftVectorBar:"⥖",DownLeftVector:"↽",DownRightTeeVector:"⥟",DownRightVectorBar:"⥗",DownRightVector:"⇁",DownTeeArrow:"↧",DownTee:"⊤",drbkarow:"⤐",drcorn:"⌟",drcrop:"⌌",Dscr:"𝒟",dscr:"𝒹",DScy:"Ѕ",dscy:"ѕ",dsol:"⧶",Dstrok:"Đ",dstrok:"đ",dtdot:"⋱",dtri:"▿",dtrif:"▾",duarr:"⇵",duhar:"⥯",dwangle:"⦦",DZcy:"Џ",dzcy:"џ",dzigrarr:"⟿",Eacute:"É",eacute:"é",easter:"⩮",Ecaron:"Ě",ecaron:"ě",Ecirc:"Ê",ecirc:"ê",ecir:"≖",ecolon:"≕",Ecy:"Э",ecy:"э",eDDot:"⩷",Edot:"Ė",edot:"ė",eDot:"≑",ee:"ⅇ",efDot:"≒",Efr:"𝔈",efr:"𝔢",eg:"⪚",Egrave:"È",egrave:"è",egs:"⪖",egsdot:"⪘",el:"⪙",Element:"∈",elinters:"⏧",ell:"ℓ",els:"⪕",elsdot:"⪗",Emacr:"Ē",emacr:"ē",empty:"∅",emptyset:"∅",EmptySmallSquare:"◻",emptyv:"∅",EmptyVerySmallSquare:"▫",emsp13:" ",emsp14:" ",emsp:" ",ENG:"Ŋ",eng:"ŋ",ensp:" ",Eogon:"Ę",eogon:"ę",Eopf:"𝔼",eopf:"𝕖",epar:"⋕",eparsl:"⧣",eplus:"⩱",epsi:"ε",Epsilon:"Ε",epsilon:"ε",epsiv:"ϵ",eqcirc:"≖",eqcolon:"≕",eqsim:"≂",eqslantgtr:"⪖",eqslantless:"⪕",Equal:"⩵",equals:"=",EqualTilde:"≂",equest:"≟",Equilibrium:"⇌",equiv:"≡",equivDD:"⩸",eqvparsl:"⧥",erarr:"⥱",erDot:"≓",escr:"ℯ",Escr:"ℰ",esdot:"≐",Esim:"⩳",esim:"≂",Eta:"Η",eta:"η",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",euro:"€",excl:"!",exist:"∃",Exists:"∃",expectation:"ℰ",exponentiale:"ⅇ",ExponentialE:"ⅇ",fallingdotseq:"≒",Fcy:"Ф",fcy:"ф",female:"♀",ffilig:"ﬃ",fflig:"ﬀ",ffllig:"ﬄ",Ffr:"𝔉",ffr:"𝔣",filig:"ﬁ",FilledSmallSquare:"◼",FilledVerySmallSquare:"▪",fjlig:"fj",flat:"♭",fllig:"ﬂ",fltns:"▱",fnof:"ƒ",Fopf:"𝔽",fopf:"𝕗",forall:"∀",ForAll:"∀",fork:"⋔",forkv:"⫙",Fouriertrf:"ℱ",fpartint:"⨍",frac12:"½",frac13:"⅓",frac14:"¼",frac15:"⅕",frac16:"⅙",frac18:"⅛",frac23:"⅔",frac25:"⅖",frac34:"¾",frac35:"⅗",frac38:"⅜",frac45:"⅘",frac56:"⅚",frac58:"⅝",frac78:"⅞",frasl:"⁄",frown:"⌢",fscr:"𝒻",Fscr:"ℱ",gacute:"ǵ",Gamma:"Γ",gamma:"γ",Gammad:"Ϝ",gammad:"ϝ",gap:"⪆",Gbreve:"Ğ",gbreve:"ğ",Gcedil:"Ģ",Gcirc:"Ĝ",gcirc:"ĝ",Gcy:"Г",gcy:"г",Gdot:"Ġ",gdot:"ġ",ge:"≥",gE:"≧",gEl:"⪌",gel:"⋛",geq:"≥",geqq:"≧",geqslant:"⩾",gescc:"⪩",ges:"⩾",gesdot:"⪀",gesdoto:"⪂",gesdotol:"⪄",gesl:"⋛︀",gesles:"⪔",Gfr:"𝔊",gfr:"𝔤",gg:"≫",Gg:"⋙",ggg:"⋙",gimel:"ℷ",GJcy:"Ѓ",gjcy:"ѓ",gla:"⪥",gl:"≷",glE:"⪒",glj:"⪤",gnap:"⪊",gnapprox:"⪊",gne:"⪈",gnE:"≩",gneq:"⪈",gneqq:"≩",gnsim:"⋧",Gopf:"𝔾",gopf:"𝕘",grave:"`",GreaterEqual:"≥",GreaterEqualLess:"⋛",GreaterFullEqual:"≧",GreaterGreater:"⪢",GreaterLess:"≷",GreaterSlantEqual:"⩾",GreaterTilde:"≳",Gscr:"𝒢",gscr:"ℊ",gsim:"≳",gsime:"⪎",gsiml:"⪐",gtcc:"⪧",gtcir:"⩺",gt:">",GT:">",Gt:"≫",gtdot:"⋗",gtlPar:"⦕",gtquest:"⩼",gtrapprox:"⪆",gtrarr:"⥸",gtrdot:"⋗",gtreqless:"⋛",gtreqqless:"⪌",gtrless:"≷",gtrsim:"≳",gvertneqq:"≩︀",gvnE:"≩︀",Hacek:"ˇ",hairsp:" ",half:"½",hamilt:"ℋ",HARDcy:"Ъ",hardcy:"ъ",harrcir:"⥈",harr:"↔",hArr:"⇔",harrw:"↭",Hat:"^",hbar:"ℏ",Hcirc:"Ĥ",hcirc:"ĥ",hearts:"♥",heartsuit:"♥",hellip:"…",hercon:"⊹",hfr:"𝔥",Hfr:"ℌ",HilbertSpace:"ℋ",hksearow:"⤥",hkswarow:"⤦",hoarr:"⇿",homtht:"∻",hookleftarrow:"↩",hookrightarrow:"↪",hopf:"𝕙",Hopf:"ℍ",horbar:"―",HorizontalLine:"─",hscr:"𝒽",Hscr:"ℋ",hslash:"ℏ",Hstrok:"Ħ",hstrok:"ħ",HumpDownHump:"≎",HumpEqual:"≏",hybull:"⁃",hyphen:"‐",Iacute:"Í",iacute:"í",ic:"⁣",Icirc:"Î",icirc:"î",Icy:"И",icy:"и",Idot:"İ",IEcy:"Е",iecy:"е",iexcl:"¡",iff:"⇔",ifr:"𝔦",Ifr:"ℑ",Igrave:"Ì",igrave:"ì",ii:"ⅈ",iiiint:"⨌",iiint:"∭",iinfin:"⧜",iiota:"℩",IJlig:"Ĳ",ijlig:"ĳ",Imacr:"Ī",imacr:"ī",image:"ℑ",ImaginaryI:"ⅈ",imagline:"ℐ",imagpart:"ℑ",imath:"ı",Im:"ℑ",imof:"⊷",imped:"Ƶ",Implies:"⇒",incare:"℅",in:"∈",infin:"∞",infintie:"⧝",inodot:"ı",intcal:"⊺",int:"∫",Int:"∬",integers:"ℤ",Integral:"∫",intercal:"⊺",Intersection:"⋂",intlarhk:"⨗",intprod:"⨼",InvisibleComma:"⁣",InvisibleTimes:"⁢",IOcy:"Ё",iocy:"ё",Iogon:"Į",iogon:"į",Iopf:"𝕀",iopf:"𝕚",Iota:"Ι",iota:"ι",iprod:"⨼",iquest:"¿",iscr:"𝒾",Iscr:"ℐ",isin:"∈",isindot:"⋵",isinE:"⋹",isins:"⋴",isinsv:"⋳",isinv:"∈",it:"⁢",Itilde:"Ĩ",itilde:"ĩ",Iukcy:"І",iukcy:"і",Iuml:"Ï",iuml:"ï",Jcirc:"Ĵ",jcirc:"ĵ",Jcy:"Й",jcy:"й",Jfr:"𝔍",jfr:"𝔧",jmath:"ȷ",Jopf:"𝕁",jopf:"𝕛",Jscr:"𝒥",jscr:"𝒿",Jsercy:"Ј",jsercy:"ј",Jukcy:"Є",jukcy:"є",Kappa:"Κ",kappa:"κ",kappav:"ϰ",Kcedil:"Ķ",kcedil:"ķ",Kcy:"К",kcy:"к",Kfr:"𝔎",kfr:"𝔨",kgreen:"ĸ",KHcy:"Х",khcy:"х",KJcy:"Ќ",kjcy:"ќ",Kopf:"𝕂",kopf:"𝕜",Kscr:"𝒦",kscr:"𝓀",lAarr:"⇚",Lacute:"Ĺ",lacute:"ĺ",laemptyv:"⦴",lagran:"ℒ",Lambda:"Λ",lambda:"λ",lang:"⟨",Lang:"⟪",langd:"⦑",langle:"⟨",lap:"⪅",Laplacetrf:"ℒ",laquo:"«",larrb:"⇤",larrbfs:"⤟",larr:"←",Larr:"↞",lArr:"⇐",larrfs:"⤝",larrhk:"↩",larrlp:"↫",larrpl:"⤹",larrsim:"⥳",larrtl:"↢",latail:"⤙",lAtail:"⤛",lat:"⪫",late:"⪭",lates:"⪭︀",lbarr:"⤌",lBarr:"⤎",lbbrk:"❲",lbrace:"{",lbrack:"[",lbrke:"⦋",lbrksld:"⦏",lbrkslu:"⦍",Lcaron:"Ľ",lcaron:"ľ",Lcedil:"Ļ",lcedil:"ļ",lceil:"⌈",lcub:"{",Lcy:"Л",lcy:"л",ldca:"⤶",ldquo:"“",ldquor:"„",ldrdhar:"⥧",ldrushar:"⥋",ldsh:"↲",le:"≤",lE:"≦",LeftAngleBracket:"⟨",LeftArrowBar:"⇤",leftarrow:"←",LeftArrow:"←",Leftarrow:"⇐",LeftArrowRightArrow:"⇆",leftarrowtail:"↢",LeftCeiling:"⌈",LeftDoubleBracket:"⟦",LeftDownTeeVector:"⥡",LeftDownVectorBar:"⥙",LeftDownVector:"⇃",LeftFloor:"⌊",leftharpoondown:"↽",leftharpoonup:"↼",leftleftarrows:"⇇",leftrightarrow:"↔",LeftRightArrow:"↔",Leftrightarrow:"⇔",leftrightarrows:"⇆",leftrightharpoons:"⇋",leftrightsquigarrow:"↭",LeftRightVector:"⥎",LeftTeeArrow:"↤",LeftTee:"⊣",LeftTeeVector:"⥚",leftthreetimes:"⋋",LeftTriangleBar:"⧏",LeftTriangle:"⊲",LeftTriangleEqual:"⊴",LeftUpDownVector:"⥑",LeftUpTeeVector:"⥠",LeftUpVectorBar:"⥘",LeftUpVector:"↿",LeftVectorBar:"⥒",LeftVector:"↼",lEg:"⪋",leg:"⋚",leq:"≤",leqq:"≦",leqslant:"⩽",lescc:"⪨",les:"⩽",lesdot:"⩿",lesdoto:"⪁",lesdotor:"⪃",lesg:"⋚︀",lesges:"⪓",lessapprox:"⪅",lessdot:"⋖",lesseqgtr:"⋚",lesseqqgtr:"⪋",LessEqualGreater:"⋚",LessFullEqual:"≦",LessGreater:"≶",lessgtr:"≶",LessLess:"⪡",lesssim:"≲",LessSlantEqual:"⩽",LessTilde:"≲",lfisht:"⥼",lfloor:"⌊",Lfr:"𝔏",lfr:"𝔩",lg:"≶",lgE:"⪑",lHar:"⥢",lhard:"↽",lharu:"↼",lharul:"⥪",lhblk:"▄",LJcy:"Љ",ljcy:"љ",llarr:"⇇",ll:"≪",Ll:"⋘",llcorner:"⌞",Lleftarrow:"⇚",llhard:"⥫",lltri:"◺",Lmidot:"Ŀ",lmidot:"ŀ",lmoustache:"⎰",lmoust:"⎰",lnap:"⪉",lnapprox:"⪉",lne:"⪇",lnE:"≨",lneq:"⪇",lneqq:"≨",lnsim:"⋦",loang:"⟬",loarr:"⇽",lobrk:"⟦",longleftarrow:"⟵",LongLeftArrow:"⟵",Longleftarrow:"⟸",longleftrightarrow:"⟷",LongLeftRightArrow:"⟷",Longleftrightarrow:"⟺",longmapsto:"⟼",longrightarrow:"⟶",LongRightArrow:"⟶",Longrightarrow:"⟹",looparrowleft:"↫",looparrowright:"↬",lopar:"⦅",Lopf:"𝕃",lopf:"𝕝",loplus:"⨭",lotimes:"⨴",lowast:"∗",lowbar:"_",LowerLeftArrow:"↙",LowerRightArrow:"↘",loz:"◊",lozenge:"◊",lozf:"⧫",lpar:"(",lparlt:"⦓",lrarr:"⇆",lrcorner:"⌟",lrhar:"⇋",lrhard:"⥭",lrm:"‎",lrtri:"⊿",lsaquo:"‹",lscr:"𝓁",Lscr:"ℒ",lsh:"↰",Lsh:"↰",lsim:"≲",lsime:"⪍",lsimg:"⪏",lsqb:"[",lsquo:"‘",lsquor:"‚",Lstrok:"Ł",lstrok:"ł",ltcc:"⪦",ltcir:"⩹",lt:"<",LT:"<",Lt:"≪",ltdot:"⋖",lthree:"⋋",ltimes:"⋉",ltlarr:"⥶",ltquest:"⩻",ltri:"◃",ltrie:"⊴",ltrif:"◂",ltrPar:"⦖",lurdshar:"⥊",luruhar:"⥦",lvertneqq:"≨︀",lvnE:"≨︀",macr:"¯",male:"♂",malt:"✠",maltese:"✠",Map:"⤅",map:"↦",mapsto:"↦",mapstodown:"↧",mapstoleft:"↤",mapstoup:"↥",marker:"▮",mcomma:"⨩",Mcy:"М",mcy:"м",mdash:"—",mDDot:"∺",measuredangle:"∡",MediumSpace:" ",Mellintrf:"ℳ",Mfr:"𝔐",mfr:"𝔪",mho:"℧",micro:"µ",midast:"*",midcir:"⫰",mid:"∣",middot:"·",minusb:"⊟",minus:"−",minusd:"∸",minusdu:"⨪",MinusPlus:"∓",mlcp:"⫛",mldr:"…",mnplus:"∓",models:"⊧",Mopf:"𝕄",mopf:"𝕞",mp:"∓",mscr:"𝓂",Mscr:"ℳ",mstpos:"∾",Mu:"Μ",mu:"μ",multimap:"⊸",mumap:"⊸",nabla:"∇",Nacute:"Ń",nacute:"ń",nang:"∠⃒",nap:"≉",napE:"⩰̸",napid:"≋̸",napos:"ŉ",napprox:"≉",natural:"♮",naturals:"ℕ",natur:"♮",nbsp:" ",nbump:"≎̸",nbumpe:"≏̸",ncap:"⩃",Ncaron:"Ň",ncaron:"ň",Ncedil:"Ņ",ncedil:"ņ",ncong:"≇",ncongdot:"⩭̸",ncup:"⩂",Ncy:"Н",ncy:"н",ndash:"–",nearhk:"⤤",nearr:"↗",neArr:"⇗",nearrow:"↗",ne:"≠",nedot:"≐̸",NegativeMediumSpace:"​",NegativeThickSpace:"​",NegativeThinSpace:"​",NegativeVeryThinSpace:"​",nequiv:"≢",nesear:"⤨",nesim:"≂̸",NestedGreaterGreater:"≫",NestedLessLess:"≪",NewLine:"\n",nexist:"∄",nexists:"∄",Nfr:"𝔑",nfr:"𝔫",ngE:"≧̸",nge:"≱",ngeq:"≱",ngeqq:"≧̸",ngeqslant:"⩾̸",nges:"⩾̸",nGg:"⋙̸",ngsim:"≵",nGt:"≫⃒",ngt:"≯",ngtr:"≯",nGtv:"≫̸",nharr:"↮",nhArr:"⇎",nhpar:"⫲",ni:"∋",nis:"⋼",nisd:"⋺",niv:"∋",NJcy:"Њ",njcy:"њ",nlarr:"↚",nlArr:"⇍",nldr:"‥",nlE:"≦̸",nle:"≰",nleftarrow:"↚",nLeftarrow:"⇍",nleftrightarrow:"↮",nLeftrightarrow:"⇎",nleq:"≰",nleqq:"≦̸",nleqslant:"⩽̸",nles:"⩽̸",nless:"≮",nLl:"⋘̸",nlsim:"≴",nLt:"≪⃒",nlt:"≮",nltri:"⋪",nltrie:"⋬",nLtv:"≪̸",nmid:"∤",NoBreak:"⁠",NonBreakingSpace:" ",nopf:"𝕟",Nopf:"ℕ",Not:"⫬",not:"¬",NotCongruent:"≢",NotCupCap:"≭",NotDoubleVerticalBar:"∦",NotElement:"∉",NotEqual:"≠",NotEqualTilde:"≂̸",NotExists:"∄",NotGreater:"≯",NotGreaterEqual:"≱",NotGreaterFullEqual:"≧̸",NotGreaterGreater:"≫̸",NotGreaterLess:"≹",NotGreaterSlantEqual:"⩾̸",NotGreaterTilde:"≵",NotHumpDownHump:"≎̸",NotHumpEqual:"≏̸",notin:"∉",notindot:"⋵̸",notinE:"⋹̸",notinva:"∉",notinvb:"⋷",notinvc:"⋶",NotLeftTriangleBar:"⧏̸",NotLeftTriangle:"⋪",NotLeftTriangleEqual:"⋬",NotLess:"≮",NotLessEqual:"≰",NotLessGreater:"≸",NotLessLess:"≪̸",NotLessSlantEqual:"⩽̸",NotLessTilde:"≴",NotNestedGreaterGreater:"⪢̸",NotNestedLessLess:"⪡̸",notni:"∌",notniva:"∌",notnivb:"⋾",notnivc:"⋽",NotPrecedes:"⊀",NotPrecedesEqual:"⪯̸",NotPrecedesSlantEqual:"⋠",NotReverseElement:"∌",NotRightTriangleBar:"⧐̸",NotRightTriangle:"⋫",NotRightTriangleEqual:"⋭",NotSquareSubset:"⊏̸",NotSquareSubsetEqual:"⋢",NotSquareSuperset:"⊐̸",NotSquareSupersetEqual:"⋣",NotSubset:"⊂⃒",NotSubsetEqual:"⊈",NotSucceeds:"⊁",NotSucceedsEqual:"⪰̸",NotSucceedsSlantEqual:"⋡",NotSucceedsTilde:"≿̸",NotSuperset:"⊃⃒",NotSupersetEqual:"⊉",NotTilde:"≁",NotTildeEqual:"≄",NotTildeFullEqual:"≇",NotTildeTilde:"≉",NotVerticalBar:"∤",nparallel:"∦",npar:"∦",nparsl:"⫽⃥",npart:"∂̸",npolint:"⨔",npr:"⊀",nprcue:"⋠",nprec:"⊀",npreceq:"⪯̸",npre:"⪯̸",nrarrc:"⤳̸",nrarr:"↛",nrArr:"⇏",nrarrw:"↝̸",nrightarrow:"↛",nRightarrow:"⇏",nrtri:"⋫",nrtrie:"⋭",nsc:"⊁",nsccue:"⋡",nsce:"⪰̸",Nscr:"𝒩",nscr:"𝓃",nshortmid:"∤",nshortparallel:"∦",nsim:"≁",nsime:"≄",nsimeq:"≄",nsmid:"∤",nspar:"∦",nsqsube:"⋢",nsqsupe:"⋣",nsub:"⊄",nsubE:"⫅̸",nsube:"⊈",nsubset:"⊂⃒",nsubseteq:"⊈",nsubseteqq:"⫅̸",nsucc:"⊁",nsucceq:"⪰̸",nsup:"⊅",nsupE:"⫆̸",nsupe:"⊉",nsupset:"⊃⃒",nsupseteq:"⊉",nsupseteqq:"⫆̸",ntgl:"≹",Ntilde:"Ñ",ntilde:"ñ",ntlg:"≸",ntriangleleft:"⋪",ntrianglelefteq:"⋬",ntriangleright:"⋫",ntrianglerighteq:"⋭",Nu:"Ν",nu:"ν",num:"#",numero:"№",numsp:" ",nvap:"≍⃒",nvdash:"⊬",nvDash:"⊭",nVdash:"⊮",nVDash:"⊯",nvge:"≥⃒",nvgt:">⃒",nvHarr:"⤄",nvinfin:"⧞",nvlArr:"⤂",nvle:"≤⃒",nvlt:"<⃒",nvltrie:"⊴⃒",nvrArr:"⤃",nvrtrie:"⊵⃒",nvsim:"∼⃒",nwarhk:"⤣",nwarr:"↖",nwArr:"⇖",nwarrow:"↖",nwnear:"⤧",Oacute:"Ó",oacute:"ó",oast:"⊛",Ocirc:"Ô",ocirc:"ô",ocir:"⊚",Ocy:"О",ocy:"о",odash:"⊝",Odblac:"Ő",odblac:"ő",odiv:"⨸",odot:"⊙",odsold:"⦼",OElig:"Œ",oelig:"œ",ofcir:"⦿",Ofr:"𝔒",ofr:"𝔬",ogon:"˛",Ograve:"Ò",ograve:"ò",ogt:"⧁",ohbar:"⦵",ohm:"Ω",oint:"∮",olarr:"↺",olcir:"⦾",olcross:"⦻",oline:"‾",olt:"⧀",Omacr:"Ō",omacr:"ō",Omega:"Ω",omega:"ω",Omicron:"Ο",omicron:"ο",omid:"⦶",ominus:"⊖",Oopf:"𝕆",oopf:"𝕠",opar:"⦷",OpenCurlyDoubleQuote:"“",OpenCurlyQuote:"‘",operp:"⦹",oplus:"⊕",orarr:"↻",Or:"⩔",or:"∨",ord:"⩝",order:"ℴ",orderof:"ℴ",ordf:"ª",ordm:"º",origof:"⊶",oror:"⩖",orslope:"⩗",orv:"⩛",oS:"Ⓢ",Oscr:"𝒪",oscr:"ℴ",Oslash:"Ø",oslash:"ø",osol:"⊘",Otilde:"Õ",otilde:"õ",otimesas:"⨶",Otimes:"⨷",otimes:"⊗",Ouml:"Ö",ouml:"ö",ovbar:"⌽",OverBar:"‾",OverBrace:"⏞",OverBracket:"⎴",OverParenthesis:"⏜",para:"¶",parallel:"∥",par:"∥",parsim:"⫳",parsl:"⫽",part:"∂",PartialD:"∂",Pcy:"П",pcy:"п",percnt:"%",period:".",permil:"‰",perp:"⊥",pertenk:"‱",Pfr:"𝔓",pfr:"𝔭",Phi:"Φ",phi:"φ",phiv:"ϕ",phmmat:"ℳ",phone:"☎",Pi:"Π",pi:"π",pitchfork:"⋔",piv:"ϖ",planck:"ℏ",planckh:"ℎ",plankv:"ℏ",plusacir:"⨣",plusb:"⊞",pluscir:"⨢",plus:"+",plusdo:"∔",plusdu:"⨥",pluse:"⩲",PlusMinus:"±",plusmn:"±",plussim:"⨦",plustwo:"⨧",pm:"±",Poincareplane:"ℌ",pointint:"⨕",popf:"𝕡",Popf:"ℙ",pound:"£",prap:"⪷",Pr:"⪻",pr:"≺",prcue:"≼",precapprox:"⪷",prec:"≺",preccurlyeq:"≼",Precedes:"≺",PrecedesEqual:"⪯",PrecedesSlantEqual:"≼",PrecedesTilde:"≾",preceq:"⪯",precnapprox:"⪹",precneqq:"⪵",precnsim:"⋨",pre:"⪯",prE:"⪳",precsim:"≾",prime:"′",Prime:"″",primes:"ℙ",prnap:"⪹",prnE:"⪵",prnsim:"⋨",prod:"∏",Product:"∏",profalar:"⌮",profline:"⌒",profsurf:"⌓",prop:"∝",Proportional:"∝",Proportion:"∷",propto:"∝",prsim:"≾",prurel:"⊰",Pscr:"𝒫",pscr:"𝓅",Psi:"Ψ",psi:"ψ",puncsp:" ",Qfr:"𝔔",qfr:"𝔮",qint:"⨌",qopf:"𝕢",Qopf:"ℚ",qprime:"⁗",Qscr:"𝒬",qscr:"𝓆",quaternions:"ℍ",quatint:"⨖",quest:"?",questeq:"≟",quot:'"',QUOT:'"',rAarr:"⇛",race:"∽̱",Racute:"Ŕ",racute:"ŕ",radic:"√",raemptyv:"⦳",rang:"⟩",Rang:"⟫",rangd:"⦒",range:"⦥",rangle:"⟩",raquo:"»",rarrap:"⥵",rarrb:"⇥",rarrbfs:"⤠",rarrc:"⤳",rarr:"→",Rarr:"↠",rArr:"⇒",rarrfs:"⤞",rarrhk:"↪",rarrlp:"↬",rarrpl:"⥅",rarrsim:"⥴",Rarrtl:"⤖",rarrtl:"↣",rarrw:"↝",ratail:"⤚",rAtail:"⤜",ratio:"∶",rationals:"ℚ",rbarr:"⤍",rBarr:"⤏",RBarr:"⤐",rbbrk:"❳",rbrace:"}",rbrack:"]",rbrke:"⦌",rbrksld:"⦎",rbrkslu:"⦐",Rcaron:"Ř",rcaron:"ř",Rcedil:"Ŗ",rcedil:"ŗ",rceil:"⌉",rcub:"}",Rcy:"Р",rcy:"р",rdca:"⤷",rdldhar:"⥩",rdquo:"”",rdquor:"”",rdsh:"↳",real:"ℜ",realine:"ℛ",realpart:"ℜ",reals:"ℝ",Re:"ℜ",rect:"▭",reg:"®",REG:"®",ReverseElement:"∋",ReverseEquilibrium:"⇋",ReverseUpEquilibrium:"⥯",rfisht:"⥽",rfloor:"⌋",rfr:"𝔯",Rfr:"ℜ",rHar:"⥤",rhard:"⇁",rharu:"⇀",rharul:"⥬",Rho:"Ρ",rho:"ρ",rhov:"ϱ",RightAngleBracket:"⟩",RightArrowBar:"⇥",rightarrow:"→",RightArrow:"→",Rightarrow:"⇒",RightArrowLeftArrow:"⇄",rightarrowtail:"↣",RightCeiling:"⌉",RightDoubleBracket:"⟧",RightDownTeeVector:"⥝",RightDownVectorBar:"⥕",RightDownVector:"⇂",RightFloor:"⌋",rightharpoondown:"⇁",rightharpoonup:"⇀",rightleftarrows:"⇄",rightleftharpoons:"⇌",rightrightarrows:"⇉",rightsquigarrow:"↝",RightTeeArrow:"↦",RightTee:"⊢",RightTeeVector:"⥛",rightthreetimes:"⋌",RightTriangleBar:"⧐",RightTriangle:"⊳",RightTriangleEqual:"⊵",RightUpDownVector:"⥏",RightUpTeeVector:"⥜",RightUpVectorBar:"⥔",RightUpVector:"↾",RightVectorBar:"⥓",RightVector:"⇀",ring:"˚",risingdotseq:"≓",rlarr:"⇄",rlhar:"⇌",rlm:"‏",rmoustache:"⎱",rmoust:"⎱",rnmid:"⫮",roang:"⟭",roarr:"⇾",robrk:"⟧",ropar:"⦆",ropf:"𝕣",Ropf:"ℝ",roplus:"⨮",rotimes:"⨵",RoundImplies:"⥰",rpar:")",rpargt:"⦔",rppolint:"⨒",rrarr:"⇉",Rrightarrow:"⇛",rsaquo:"›",rscr:"𝓇",Rscr:"ℛ",rsh:"↱",Rsh:"↱",rsqb:"]",rsquo:"’",rsquor:"’",rthree:"⋌",rtimes:"⋊",rtri:"▹",rtrie:"⊵",rtrif:"▸",rtriltri:"⧎",RuleDelayed:"⧴",ruluhar:"⥨",rx:"℞",Sacute:"Ś",sacute:"ś",sbquo:"‚",scap:"⪸",Scaron:"Š",scaron:"š",Sc:"⪼",sc:"≻",sccue:"≽",sce:"⪰",scE:"⪴",Scedil:"Ş",scedil:"ş",Scirc:"Ŝ",scirc:"ŝ",scnap:"⪺",scnE:"⪶",scnsim:"⋩",scpolint:"⨓",scsim:"≿",Scy:"С",scy:"с",sdotb:"⊡",sdot:"⋅",sdote:"⩦",searhk:"⤥",searr:"↘",seArr:"⇘",searrow:"↘",sect:"§",semi:";",seswar:"⤩",setminus:"∖",setmn:"∖",sext:"✶",Sfr:"𝔖",sfr:"𝔰",sfrown:"⌢",sharp:"♯",SHCHcy:"Щ",shchcy:"щ",SHcy:"Ш",shcy:"ш",ShortDownArrow:"↓",ShortLeftArrow:"←",shortmid:"∣",shortparallel:"∥",ShortRightArrow:"→",ShortUpArrow:"↑",shy:"­",Sigma:"Σ",sigma:"σ",sigmaf:"ς",sigmav:"ς",sim:"∼",simdot:"⩪",sime:"≃",simeq:"≃",simg:"⪞",simgE:"⪠",siml:"⪝",simlE:"⪟",simne:"≆",simplus:"⨤",simrarr:"⥲",slarr:"←",SmallCircle:"∘",smallsetminus:"∖",smashp:"⨳",smeparsl:"⧤",smid:"∣",smile:"⌣",smt:"⪪",smte:"⪬",smtes:"⪬︀",SOFTcy:"Ь",softcy:"ь",solbar:"⌿",solb:"⧄",sol:"/",Sopf:"𝕊",sopf:"𝕤",spades:"♠",spadesuit:"♠",spar:"∥",sqcap:"⊓",sqcaps:"⊓︀",sqcup:"⊔",sqcups:"⊔︀",Sqrt:"√",sqsub:"⊏",sqsube:"⊑",sqsubset:"⊏",sqsubseteq:"⊑",sqsup:"⊐",sqsupe:"⊒",sqsupset:"⊐",sqsupseteq:"⊒",square:"□",Square:"□",SquareIntersection:"⊓",SquareSubset:"⊏",SquareSubsetEqual:"⊑",SquareSuperset:"⊐",SquareSupersetEqual:"⊒",SquareUnion:"⊔",squarf:"▪",squ:"□",squf:"▪",srarr:"→",Sscr:"𝒮",sscr:"𝓈",ssetmn:"∖",ssmile:"⌣",sstarf:"⋆",Star:"⋆",star:"☆",starf:"★",straightepsilon:"ϵ",straightphi:"ϕ",strns:"¯",sub:"⊂",Sub:"⋐",subdot:"⪽",subE:"⫅",sube:"⊆",subedot:"⫃",submult:"⫁",subnE:"⫋",subne:"⊊",subplus:"⪿",subrarr:"⥹",subset:"⊂",Subset:"⋐",subseteq:"⊆",subseteqq:"⫅",SubsetEqual:"⊆",subsetneq:"⊊",subsetneqq:"⫋",subsim:"⫇",subsub:"⫕",subsup:"⫓",succapprox:"⪸",succ:"≻",succcurlyeq:"≽",Succeeds:"≻",SucceedsEqual:"⪰",SucceedsSlantEqual:"≽",SucceedsTilde:"≿",succeq:"⪰",succnapprox:"⪺",succneqq:"⪶",succnsim:"⋩",succsim:"≿",SuchThat:"∋",sum:"∑",Sum:"∑",sung:"♪",sup1:"¹",sup2:"²",sup3:"³",sup:"⊃",Sup:"⋑",supdot:"⪾",supdsub:"⫘",supE:"⫆",supe:"⊇",supedot:"⫄",Superset:"⊃",SupersetEqual:"⊇",suphsol:"⟉",suphsub:"⫗",suplarr:"⥻",supmult:"⫂",supnE:"⫌",supne:"⊋",supplus:"⫀",supset:"⊃",Supset:"⋑",supseteq:"⊇",supseteqq:"⫆",supsetneq:"⊋",supsetneqq:"⫌",supsim:"⫈",supsub:"⫔",supsup:"⫖",swarhk:"⤦",swarr:"↙",swArr:"⇙",swarrow:"↙",swnwar:"⤪",szlig:"ß",Tab:"\t",target:"⌖",Tau:"Τ",tau:"τ",tbrk:"⎴",Tcaron:"Ť",tcaron:"ť",Tcedil:"Ţ",tcedil:"ţ",Tcy:"Т",tcy:"т",tdot:"⃛",telrec:"⌕",Tfr:"𝔗",tfr:"𝔱",there4:"∴",therefore:"∴",Therefore:"∴",Theta:"Θ",theta:"θ",thetasym:"ϑ",thetav:"ϑ",thickapprox:"≈",thicksim:"∼",ThickSpace:"  ",ThinSpace:" ",thinsp:" ",thkap:"≈",thksim:"∼",THORN:"Þ",thorn:"þ",tilde:"˜",Tilde:"∼",TildeEqual:"≃",TildeFullEqual:"≅",TildeTilde:"≈",timesbar:"⨱",timesb:"⊠",times:"×",timesd:"⨰",tint:"∭",toea:"⤨",topbot:"⌶",topcir:"⫱",top:"⊤",Topf:"𝕋",topf:"𝕥",topfork:"⫚",tosa:"⤩",tprime:"‴",trade:"™",TRADE:"™",triangle:"▵",triangledown:"▿",triangleleft:"◃",trianglelefteq:"⊴",triangleq:"≜",triangleright:"▹",trianglerighteq:"⊵",tridot:"◬",trie:"≜",triminus:"⨺",TripleDot:"⃛",triplus:"⨹",trisb:"⧍",tritime:"⨻",trpezium:"⏢",Tscr:"𝒯",tscr:"𝓉",TScy:"Ц",tscy:"ц",TSHcy:"Ћ",tshcy:"ћ",Tstrok:"Ŧ",tstrok:"ŧ",twixt:"≬",twoheadleftarrow:"↞",twoheadrightarrow:"↠",Uacute:"Ú",uacute:"ú",uarr:"↑",Uarr:"↟",uArr:"⇑",Uarrocir:"⥉",Ubrcy:"Ў",ubrcy:"ў",Ubreve:"Ŭ",ubreve:"ŭ",Ucirc:"Û",ucirc:"û",Ucy:"У",ucy:"у",udarr:"⇅",Udblac:"Ű",udblac:"ű",udhar:"⥮",ufisht:"⥾",Ufr:"𝔘",ufr:"𝔲",Ugrave:"Ù",ugrave:"ù",uHar:"⥣",uharl:"↿",uharr:"↾",uhblk:"▀",ulcorn:"⌜",ulcorner:"⌜",ulcrop:"⌏",ultri:"◸",Umacr:"Ū",umacr:"ū",uml:"¨",UnderBar:"_",UnderBrace:"⏟",UnderBracket:"⎵",UnderParenthesis:"⏝",Union:"⋃",UnionPlus:"⊎",Uogon:"Ų",uogon:"ų",Uopf:"𝕌",uopf:"𝕦",UpArrowBar:"⤒",uparrow:"↑",UpArrow:"↑",Uparrow:"⇑",UpArrowDownArrow:"⇅",updownarrow:"↕",UpDownArrow:"↕",Updownarrow:"⇕",UpEquilibrium:"⥮",upharpoonleft:"↿",upharpoonright:"↾",uplus:"⊎",UpperLeftArrow:"↖",UpperRightArrow:"↗",upsi:"υ",Upsi:"ϒ",upsih:"ϒ",Upsilon:"Υ",upsilon:"υ",UpTeeArrow:"↥",UpTee:"⊥",upuparrows:"⇈",urcorn:"⌝",urcorner:"⌝",urcrop:"⌎",Uring:"Ů",uring:"ů",urtri:"◹",Uscr:"𝒰",uscr:"𝓊",utdot:"⋰",Utilde:"Ũ",utilde:"ũ",utri:"▵",utrif:"▴",uuarr:"⇈",Uuml:"Ü",uuml:"ü",uwangle:"⦧",vangrt:"⦜",varepsilon:"ϵ",varkappa:"ϰ",varnothing:"∅",varphi:"ϕ",varpi:"ϖ",varpropto:"∝",varr:"↕",vArr:"⇕",varrho:"ϱ",varsigma:"ς",varsubsetneq:"⊊︀",varsubsetneqq:"⫋︀",varsupsetneq:"⊋︀",varsupsetneqq:"⫌︀",vartheta:"ϑ",vartriangleleft:"⊲",vartriangleright:"⊳",vBar:"⫨",Vbar:"⫫",vBarv:"⫩",Vcy:"В",vcy:"в",vdash:"⊢",vDash:"⊨",Vdash:"⊩",VDash:"⊫",Vdashl:"⫦",veebar:"⊻",vee:"∨",Vee:"⋁",veeeq:"≚",vellip:"⋮",verbar:"|",Verbar:"‖",vert:"|",Vert:"‖",VerticalBar:"∣",VerticalLine:"|",VerticalSeparator:"❘",VerticalTilde:"≀",VeryThinSpace:" ",Vfr:"𝔙",vfr:"𝔳",vltri:"⊲",vnsub:"⊂⃒",vnsup:"⊃⃒",Vopf:"𝕍",vopf:"𝕧",vprop:"∝",vrtri:"⊳",Vscr:"𝒱",vscr:"𝓋",vsubnE:"⫋︀",vsubne:"⊊︀",vsupnE:"⫌︀",vsupne:"⊋︀",Vvdash:"⊪",vzigzag:"⦚",Wcirc:"Ŵ",wcirc:"ŵ",wedbar:"⩟",wedge:"∧",Wedge:"⋀",wedgeq:"≙",weierp:"℘",Wfr:"𝔚",wfr:"𝔴",Wopf:"𝕎",wopf:"𝕨",wp:"℘",wr:"≀",wreath:"≀",Wscr:"𝒲",wscr:"𝓌",xcap:"⋂",xcirc:"◯",xcup:"⋃",xdtri:"▽",Xfr:"𝔛",xfr:"𝔵",xharr:"⟷",xhArr:"⟺",Xi:"Ξ",xi:"ξ",xlarr:"⟵",xlArr:"⟸",xmap:"⟼",xnis:"⋻",xodot:"⨀",Xopf:"𝕏",xopf:"𝕩",xoplus:"⨁",xotime:"⨂",xrarr:"⟶",xrArr:"⟹",Xscr:"𝒳",xscr:"𝓍",xsqcup:"⨆",xuplus:"⨄",xutri:"△",xvee:"⋁",xwedge:"⋀",Yacute:"Ý",yacute:"ý",YAcy:"Я",yacy:"я",Ycirc:"Ŷ",ycirc:"ŷ",Ycy:"Ы",ycy:"ы",yen:"¥",Yfr:"𝔜",yfr:"𝔶",YIcy:"Ї",yicy:"ї",Yopf:"𝕐",yopf:"𝕪",Yscr:"𝒴",yscr:"𝓎",YUcy:"Ю",yucy:"ю",yuml:"ÿ",Yuml:"Ÿ",Zacute:"Ź",zacute:"ź",Zcaron:"Ž",zcaron:"ž",Zcy:"З",zcy:"з",Zdot:"Ż",zdot:"ż",zeetrf:"ℨ",ZeroWidthSpace:"​",Zeta:"Ζ",zeta:"ζ",zfr:"𝔷",Zfr:"ℨ",ZHcy:"Ж",zhcy:"ж",zigrarr:"⇝",zopf:"𝕫",Zopf:"ℤ",Zscr:"𝒵",zscr:"𝓏",zwj:"‍",zwnj:"‌"}}),h=Object.freeze({__proto__:null,Aacute:"Á",aacute:"á",Acirc:"Â",acirc:"â",acute:"´",AElig:"Æ",aelig:"æ",Agrave:"À",agrave:"à",amp:"&",AMP:"&",Aring:"Å",aring:"å",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",brvbar:"¦",Ccedil:"Ç",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",Eacute:"É",eacute:"é",Ecirc:"Ê",ecirc:"ê",Egrave:"È",egrave:"è",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",Iacute:"Í",iacute:"í",Icirc:"Î",icirc:"î",iexcl:"¡",Igrave:"Ì",igrave:"ì",iquest:"¿",Iuml:"Ï",iuml:"ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",Ntilde:"Ñ",ntilde:"ñ",Oacute:"Ó",oacute:"ó",Ocirc:"Ô",ocirc:"ô",Ograve:"Ò",ograve:"ò",ordf:"ª",ordm:"º",Oslash:"Ø",oslash:"ø",Otilde:"Õ",otilde:"õ",Ouml:"Ö",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",THORN:"Þ",thorn:"þ",times:"×",Uacute:"Ú",uacute:"ú",Ucirc:"Û",ucirc:"û",Ugrave:"Ù",ugrave:"ù",uml:"¨",Uuml:"Ü",uuml:"ü",Yacute:"Ý",yacute:"ý",yen:"¥",yuml:"ÿ",default:{Aacute:"Á",aacute:"á",Acirc:"Â",acirc:"â",acute:"´",AElig:"Æ",aelig:"æ",Agrave:"À",agrave:"à",amp:"&",AMP:"&",Aring:"Å",aring:"å",Atilde:"Ã",atilde:"ã",Auml:"Ä",auml:"ä",brvbar:"¦",Ccedil:"Ç",ccedil:"ç",cedil:"¸",cent:"¢",copy:"©",COPY:"©",curren:"¤",deg:"°",divide:"÷",Eacute:"É",eacute:"é",Ecirc:"Ê",ecirc:"ê",Egrave:"È",egrave:"è",ETH:"Ð",eth:"ð",Euml:"Ë",euml:"ë",frac12:"½",frac14:"¼",frac34:"¾",gt:">",GT:">",Iacute:"Í",iacute:"í",Icirc:"Î",icirc:"î",iexcl:"¡",Igrave:"Ì",igrave:"ì",iquest:"¿",Iuml:"Ï",iuml:"ï",laquo:"«",lt:"<",LT:"<",macr:"¯",micro:"µ",middot:"·",nbsp:" ",not:"¬",Ntilde:"Ñ",ntilde:"ñ",Oacute:"Ó",oacute:"ó",Ocirc:"Ô",ocirc:"ô",Ograve:"Ò",ograve:"ò",ordf:"ª",ordm:"º",Oslash:"Ø",oslash:"ø",Otilde:"Õ",otilde:"õ",Ouml:"Ö",ouml:"ö",para:"¶",plusmn:"±",pound:"£",quot:'"',QUOT:'"',raquo:"»",reg:"®",REG:"®",sect:"§",shy:"­",sup1:"¹",sup2:"²",sup3:"³",szlig:"ß",THORN:"Þ",thorn:"þ",times:"×",Uacute:"Ú",uacute:"ú",Ucirc:"Û",ucirc:"û",Ugrave:"Ù",ugrave:"ù",uml:"¨",Uuml:"Ü",uuml:"ü",Yacute:"Ý",yacute:"ý",yen:"¥",yuml:"ÿ"}}),m=Object.freeze({__proto__:null,amp:"&",apos:"'",gt:">",lt:"<",quot:'"',default:{amp:"&",apos:"'",gt:">",lt:"<",quot:'"'}}),b=f(Object.freeze({__proto__:null,default:{0:65533,128:8364,130:8218,131:402,132:8222,133:8230,134:8224,135:8225,136:710,137:8240,138:352,139:8249,140:338,142:381,145:8216,146:8217,147:8220,148:8221,149:8226,150:8211,151:8212,152:732,153:8482,154:353,155:8250,156:339,158:382,159:376}})),_=i(function(e,d){var u=l&&l.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(d,"__esModule",{value:!0});var t=u(b);d.default=function(e){if(55296<=e&&e<=57343||1114111<e)return"�";var d="";return 65535<(e=e in t.default?t.default[e]:e)&&(e-=65536,d+=String.fromCharCode(e>>>10&1023|55296),e=56320|1023&e),d+=String.fromCharCode(e)}});c(_);var v=f(p),y=f(h),w=f(m),x=i(function(e,d){var u=l&&l.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(d,"__esModule",{value:!0}),d.decodeHTML=d.decodeHTMLStrict=d.decodeXML=void 0;var c=u(v),i=u(y),t=u(w),a=u(_);function r(e){var d=Object.keys(e).join("|"),u=o(e);d+="|#[xX][\\da-fA-F]+|#\\d+";var t=new RegExp("&(?:"+d+");","g");return function(e){return String(e).replace(t,u)}}d.decodeXML=r(t.default),d.decodeHTMLStrict=r(c.default);function s(e,d){return e<d?1:-1}function o(u){return function(e){if("#"!==e.charAt(1))return u[e.slice(1,-1)];var d=e.charAt(2);return"X"===d||"x"===d?a.default(parseInt(e.substr(3),16)):a.default(parseInt(e.substr(2),10))}}d.decodeHTML=function(){for(var e=Object.keys(i.default).sort(s),d=Object.keys(c.default).sort(s),u=0,t=0;u<d.length;u++)e[t]===d[u]?(d[u]+=";?",t++):d[u]+=";";var a=new RegExp("&(?:"+d.join("|")+"|#[xX][\\da-fA-F]+;?|#\\d+;?)","g"),r=o(c.default);function n(e){return";"!==e.substr(-1)&&(e+=";"),r(e)}return function(e){return String(e).replace(a,n)}}()});c(x);x.decodeHTML,x.decodeHTMLStrict,x.decodeXML;var k=i(function(e,d){var u=l&&l.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(d,"__esModule",{value:!0}),d.escape=d.encodeHTML=d.encodeXML=void 0;var t=r(u(w).default),a=n(t);d.encodeXML=s(t,a);a=r(u(v).default),u=n(a);function r(u){return Object.keys(u).sort().reduce(function(e,d){return e[u[d]]="&"+d+";",e},{})}function n(e){for(var d=[],u=[],t=0,a=Object.keys(e);t<a.length;t++){var r=a[t];1===r.length?d.push("\\"+r):u.push(r)}d.sort();for(var n=0;n<d.length-1;n++){for(var c=n;c<d.length-1&&d[c].charCodeAt(1)+1===d[c+1].charCodeAt(1);)c+=1;var i=1+c-n;i<3||d.splice(n,i,d[n]+"-"+d[c])}return u.unshift("["+d.join("")+"]"),new RegExp(u.join("|"),"g")}d.encodeHTML=s(a,u);var c=/(?:[\x80-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])/g;function i(e){return"&#x"+e.codePointAt(0).toString(16).toUpperCase()+";"}function s(d,u){return function(e){return e.replace(u,function(e){return d[e]}).replace(c,i)}}var o=n(t);d.escape=function(e){return e.replace(o,i).replace(c,i)}});c(k);k.escape,k.encodeHTML,k.encodeXML;var C=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0}),d.encode=d.decodeStrict=d.decode=void 0,d.decode=function(e,d){return(!d||d<=0?x.decodeXML:x.decodeHTML)(e)},d.decodeStrict=function(e,d){return(!d||d<=0?x.decodeXML:x.decodeHTMLStrict)(e)},d.encode=function(e,d){return(!d||d<=0?k.encodeXML:k.encodeHTML)(e)};var u=k;Object.defineProperty(d,"encodeXML",{enumerable:!0,get:function(){return u.encodeXML}}),Object.defineProperty(d,"encodeHTML",{enumerable:!0,get:function(){return u.encodeHTML}}),Object.defineProperty(d,"escape",{enumerable:!0,get:function(){return u.escape}}),Object.defineProperty(d,"encodeHTML4",{enumerable:!0,get:function(){return u.encodeHTML}}),Object.defineProperty(d,"encodeHTML5",{enumerable:!0,get:function(){return u.encodeHTML}});var t=x;Object.defineProperty(d,"decodeXML",{enumerable:!0,get:function(){return t.decodeXML}}),Object.defineProperty(d,"decodeHTML",{enumerable:!0,get:function(){return t.decodeHTML}}),Object.defineProperty(d,"decodeHTMLStrict",{enumerable:!0,get:function(){return t.decodeHTMLStrict}}),Object.defineProperty(d,"decodeHTML4",{enumerable:!0,get:function(){return t.decodeHTML}}),Object.defineProperty(d,"decodeHTML5",{enumerable:!0,get:function(){return t.decodeHTML}}),Object.defineProperty(d,"decodeHTML4Strict",{enumerable:!0,get:function(){return t.decodeHTMLStrict}}),Object.defineProperty(d,"decodeHTML5Strict",{enumerable:!0,get:function(){return t.decodeHTMLStrict}}),Object.defineProperty(d,"decodeXMLStrict",{enumerable:!0,get:function(){return t.decodeXML}})});c(C);C.encode,C.decodeStrict,C.decode,C.encodeXML,C.encodeHTML,C.encodeHTML4,C.encodeHTML5,C.decodeXML;function E(e){return e.charCodeAt(0)===N?e.charAt(1):S(e)}function L(e){return O.test(e)?e.replace(F,E):e}function q(e){return B.test(e)?e.replace(B,M):e}var A,D,I,S=C.decodeHTML,N=(C.decodeHTMLStrict,C.decodeHTML4,C.decodeHTML5,C.decodeHTML4Strict,C.decodeHTML5Strict,C.decodeXMLStrict,92),T="&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});",r="[A-Za-z][A-Za-z0-9-]*",p="<"+r+"(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*/?>",h="</"+r+"\\s*[>]",m=new RegExp("^(?:<[A-Za-z][A-Za-z0-9-]*(?:\\s+[a-zA-Z_:][a-zA-Z0-9:._-]*(?:\\s*=\\s*(?:[^\"'=<>`\\x00-\\x20]+|'[^']*'|\"[^\"]*\"))?)*\\s*/?>|</[A-Za-z][A-Za-z0-9-]*\\s*[>]|\x3c!----\x3e|\x3c!--(?:-?[^>-])(?:-?[^-])*--\x3e|[<][?][\\s\\S]*?[?][>]|<![A-Z]+\\s+[^>]*>|<!\\[CDATA\\[[\\s\\S]*?\\]\\]>)"),O=/[\\&]/,C="[!\"#$%&'()*+,./:;<=>?@[\\\\\\]^_`{|}~-]",F=new RegExp("\\\\"+C+"|"+T,"gi"),B=new RegExp('[&<>"]',"g"),R=/^www\d{0,3}\./i,M=function(e){switch(e){case"&":return"&amp;";case"<":return"&lt;";case">":return"&gt;";case'"':return"&quot;";default:return e}};function P(e){return I(e)}I=String.fromCodePoint?function(e){try{return String.fromCodePoint(e)}catch(e){if(e instanceof RangeError)return String.fromCharCode(65533);throw e}}:(A=String.fromCharCode,D=Math.floor,function(){var e=[],d=-1,u=arguments.length;if(!u)return"";for(var t="";++d<u;){var a=Number(arguments[d]);if(!isFinite(a)||a<0||1114111<a||D(a)!==a)return String.fromCharCode(65533);a<=65535?e.push(a):(a-=65536,e.push(55296+(a>>10),a%1024+56320)),(d+1===u||16384<e.length)&&(t+=A.apply(null,e),e.length=0)}return t});var U=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0});var l="xregexp",u={astral:!1,namespacing:!1},f={exec:RegExp.prototype.exec,test:RegExp.prototype.test,match:String.prototype.match,replace:String.prototype.replace,split:String.prototype.split},i={},t={},p={},h=[],m="default",b={default:/\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9]\d*|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|\(\?(?:[:=!]|<[=!])|[?*+]\?|{\d+(?:,\d*)?}\??|[\s\S]/,class:/\\(?:[0-3][0-7]{0,2}|[4-7][0-7]?|x[\dA-Fa-f]{2}|u(?:[\dA-Fa-f]{4}|{[\dA-Fa-f]+})|c[A-Za-z]|[\s\S])|[\s\S]/},s=/\$(?:{([\w$]+)}|<([\w$]+)>|(\d\d?|[\s\S]))/g,c=void 0===f.exec.call(/()??/,"")[1],o=void 0!==/x/.flags,a={}.toString;function r(e){var d=!0;try{new RegExp("",e)}catch(e){d=!1}return d}var n=r("u"),g=r("y"),_={g:!0,i:!0,m:!0,u:n,y:g};function v(e,d,u,t,a){var r=void 0;if(e[l]={captureNames:d},a)return e;if(e.__proto__)e.__proto__=N.prototype;else for(r in N.prototype)e[r]=N.prototype[r];return e[l].source=u,e[l].flags=t&&t.split("").sort().join(""),e}function y(e){return f.replace.call(e,/([\s\S])(?=[\s\S]*\1)/g,"")}function w(e,d){if(!N.isRegExp(e))throw new TypeError("Type RegExp expected");var u=e[l]||{},t=(c=e,o?c.flags:f.exec.call(/\/([a-z]*)$/i,RegExp.prototype.toString.call(c))[1]),a="",r="",n=null,c=null;return(d=d||{}).removeG&&(r+="g"),d.removeY&&(r+="y"),r&&(t=f.replace.call(t,new RegExp("["+r+"]+","g"),"")),d.addG&&(a+="g"),d.addY&&(a+="y"),a&&(t=y(t+a)),d.isInternalOnly||(void 0!==u.source&&(n=u.source),null!=u.flags&&(c=a?y(u.flags+a):u.flags)),e=v(new RegExp(d.source||e.source,t),!(t=e)[l]||!t[l].captureNames?null:u.captureNames.slice(0),n,c,d.isInternalOnly)}function x(e){return parseInt(e,16)}function k(e,d,u){return"("===e.input[e.index-1]||")"===e.input[e.index+e[0].length]||"|"===e.input[e.index-1]||"|"===e.input[e.index+e[0].length]||e.index<1||e.index+e[0].length>=e.input.length||f.test.call(/^\(\?[:=!]/,e.input.substr(e.index-3,3))||(t=e.input,e=e.index+e[0].length,f.test.call(-1!==u.indexOf("x")?/^(?:\s|#[^#\n]*|\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/:/^(?:\(\?#[^)]*\))*(?:[?*+]|{\d+(?:,\d*)?})/,t.slice(e)))?"":"(?:)";var t}function C(e){return parseInt(e,10).toString(16)}function E(e,d){return a.call(e)==="[object "+d+"]"}function L(e){for(;e.length<4;)e="0"+e;return e}function q(e){var d={};return E(e,"String")?(N.forEach(e,/[^\s,]+/,function(e){d[e]=!0}),d):e}function A(e){if(!/^[\w$]$/.test(e))throw new Error("Flag must be a single character A-Za-z0-9_$");_[e]=!0}function D(e){u.astral=e}function I(e){u.namespacing=e}function S(e){if(null==e)throw new TypeError("Cannot convert null or undefined to object");return e}function N(e,d){if(N.isRegExp(e)){if(void 0!==d)throw new TypeError("Cannot supply flags when copying a RegExp");return w(e)}if(e=void 0===e?"":String(e),d=void 0===d?"":String(d),N.isInstalled("astral")&&-1===d.indexOf("A")&&(d+="A"),p[e]||(p[e]={}),!p[e][d]){for(var u,t={hasNamedCapture:!1,captureNames:[]},a=m,r="",n=0,c=void 0,i=function(e,u){var d=void 0;if(y(u)!==u)throw new SyntaxError("Invalid duplicate regex flag "+u);for(e=f.replace.call(e,/^\(\?([\w$]+)\)/,function(e,d){if(f.test.call(/[gy]/,d))throw new SyntaxError("Cannot use flag g or y in mode modifier "+e);return u=y(u+d),""}),d=0;d<u.length;++d)if(!_[u[d]])throw new SyntaxError("Unknown regex flag "+u[d]);return{pattern:e,flags:u}}(e,d),s=i.pattern,o=i.flags;n<s.length;){for(;(c=function(e,d,u,t,a){for(var r,n=h.length,c=e[u],i=null,s=void 0;n--;)if(!((s=h[n]).leadChar&&s.leadChar!==c||s.scope!==t&&"all"!==s.scope||s.flag&&-1===d.indexOf(s.flag))&&(r=N.exec(e,s.regex,u,"sticky"))){i={matchLength:r[0].length,output:s.handler.call(a,r,t,d),reparse:s.reparse};break}return i}(s,o,n,a,t))&&c.reparse&&(s=s.slice(0,n)+c.output+s.slice(n+c.matchLength)),c&&c.reparse;);c?(r+=c.output,n+=c.matchLength||1):(r+=u=N.exec(s,b[a],n,"sticky")[0],n+=u.length,"["===u&&a===m?a="class":"]"===u&&"class"===a&&(a=m))}p[e][d]={pattern:f.replace.call(r,/(?:\(\?:\))+/g,"(?:)"),flags:f.replace.call(o,/[^gimuy]+/g,""),captures:t.hasNamedCapture?t.captureNames:null}}i=p[e][d];return v(new RegExp(i.pattern,i.flags),i.captures,e,d)}N.prototype=/(?:)/,N.version="4.1.1",N._clipDuplicates=y,N._hasNativeFlag=r,N._dec=x,N._hex=C,N._pad4=L,N.addToken=function(e,d,u){var t=(u=u||{}).optionalFlags,a=void 0;if(u.flag&&A(u.flag),t)for(t=f.split.call(t,""),a=0;a<t.length;++a)A(t[a]);h.push({regex:w(e,{addG:!0,addY:g,isInternalOnly:!0}),handler:d,scope:u.scope||m,flag:u.flag,reparse:u.reparse,leadChar:u.leadChar}),N.cache.flush("patterns")},N.cache=function(e,d){return t[e]||(t[e]={}),t[e][d]||(t[e][d]=N(e,d))},N.cache.flush=function(e){"patterns"===e?p={}:t={}},N.escape=function(e){return f.replace.call(S(e),/[-\[\]{}()*+?.,\\^$|#\s]/g,"\\$&")},N.exec=function(e,d,u,t){var a="g",r=!1,n=!1,c=void 0;(r=g&&!!(t||d.sticky&&!1!==t))?a+="y":t&&(n=!0,a+="FakeY"),d[l]=d[l]||{};t=d[l][a]||(d[l][a]=w(d,{addG:!0,addY:r,source:n?d.source+"|()":void 0,removeY:!1===t,isInternalOnly:!0}));return t.lastIndex=u=u||0,c=i.exec.call(t,e),n&&c&&""===c.pop()&&(c=null),d.global&&(d.lastIndex=c?t.lastIndex:0),c},N.forEach=function(e,d,u){for(var t,a=0,r=-1;t=N.exec(e,d,a);)u(t,++r,e,d),a=t.index+(t[0].length||1)},N.globalize=function(e){return w(e,{addG:!0})},N.install=function(e){e=q(e),!u.astral&&e.astral&&D(!0),!u.namespacing&&e.namespacing&&I(!0)},N.isInstalled=function(e){return!!u[e]},N.isRegExp=function(e){return"[object RegExp]"===a.call(e)},N.match=function(e,d,u){var t=d.global&&"one"!==u||"all"===u,a=(t?"g":"")+(d.sticky?"y":"")||"noGY";d[l]=d[l]||{};a=d[l][a]||(d[l][a]=w(d,{addG:!!t,removeG:"one"===u,isInternalOnly:!0})),a=f.match.call(S(e),a);return d.global&&(d.lastIndex="one"===u&&a?a.index+a[0].length:0),t?a||[]:a&&a[0]},N.matchChain=function(e,c){return function e(d,u){var t=c[u].regex?c[u]:{regex:c[u]},a=[];function r(e){if(t.backref){var d="Backreference to undefined group: "+t.backref,u=isNaN(t.backref);if(u&&N.isInstalled("namespacing")){if(!(t.backref in e.groups))throw new ReferenceError(d)}else if(!e.hasOwnProperty(t.backref))throw new ReferenceError(d);u=(u&&N.isInstalled("namespacing")?e.groups:e)[t.backref];a.push(u||"")}else a.push(e[0])}for(var n=0;n<d.length;++n)N.forEach(d[n],t.regex,r);return u!==c.length-1&&a.length?e(a,u+1):a}([e],0)},N.replace=function(e,d,u,t){var a=N.isRegExp(d),r=d.global&&"one"!==t||"all"===t,n=(r?"g":"")+(d.sticky?"y":"")||"noGY",c=d;a?(d[l]=d[l]||{},c=d[l][n]||(d[l][n]=w(d,{addG:!!r,removeG:"one"===t,isInternalOnly:!0}))):r&&(c=new RegExp(N.escape(String(d)),"g"));u=i.replace.call(S(e),c,u);return a&&d.global&&(d.lastIndex=0),u},N.replaceEach=function(e,d){for(var u,t=void 0,t=0;t<d.length;++t)u=d[t],e=N.replace(e,u[0],u[1],u[2]);return e},N.split=function(e,d,u){return i.split.call(S(e),d,u)},N.test=function(e,d,u,t){return!!N.exec(e,d,u,t)},N.uninstall=function(e){e=q(e),u.astral&&e.astral&&D(!1),u.namespacing&&e.namespacing&&I(!1)},N.union=function(e,d,u){var a,r,u=(u=u||{}).conjunction||"or",n=0;function t(e,d,u){var t=r[n-a];if(d){if(++n,t)return"(?<"+t+">"}else if(u)return"\\"+(+u+a);return e}if(!E(e,"Array")||!e.length)throw new TypeError("Must provide a nonempty array of patterns to merge");for(var c,i=/(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g,s=[],o=0;o<e.length;++o)c=e[o],N.isRegExp(c)?(a=n,r=c[l]&&c[l].captureNames||[],s.push(f.replace.call(N(c.source).source,i,t))):s.push(N.escape(c));return N(s.join("none"===u?"":"|"),d)},i.exec=function(e){var d,u=this.lastIndex,r=f.exec.apply(this,arguments);if(r){!c&&1<r.length&&-1!==r.indexOf("")&&(d=w(this,{removeG:!0,isInternalOnly:!0}),f.replace.call(String(e).slice(r.index),d,function(){for(var e=arguments.length,d=Array(e),u=0;u<e;u++)d[u]=arguments[u];for(var t=d.length,a=1;a<t-2;++a)void 0===d[a]&&(r[a]=void 0)}));var t=r;if(N.isInstalled("namespacing")&&(r.groups=Object.create(null),t=r.groups),this[l]&&this[l].captureNames)for(var a=1;a<r.length;++a){var n=this[l].captureNames[a-1];n&&(t[n]=r[a])}this.global&&!r[0].length&&this.lastIndex>r.index&&(this.lastIndex=r.index)}return this.global||(this.lastIndex=u),r},i.test=function(e){return!!i.exec.call(this,e)},i.match=function(e){if(N.isRegExp(e)){if(e.global){var d=f.match.apply(this,arguments);return e.lastIndex=0,d}}else e=new RegExp(e);return i.exec.call(e,S(this))},i.replace=function(r,n){var c=N.isRegExp(r),e=void 0,i=void 0,d=void 0;return c?(r[l]&&(i=r[l].captureNames),e=r.lastIndex):r+="",d=E(n,"Function")?f.replace.call(String(this),r,function(){for(var e=arguments.length,d=Array(e),u=0;u<e;u++)d[u]=arguments[u];if(i){var t=void 0;N.isInstalled("namespacing")?(t=Object.create(null),d.push(t)):(d[0]=new String(d[0]),t=d[0]);for(var a=0;a<i.length;++a)i[a]&&(t[i[a]]=d[a+1])}return c&&r.global&&(r.lastIndex=d[d.length-2]+d[0].length),n.apply(void 0,d)}):f.replace.call(null==this?this:String(this),r,function(){for(var e=arguments.length,a=Array(e),d=0;d<e;d++)a[d]=arguments[d];return f.replace.call(String(n),s,function(e,d,u,t){if(d=d||u){u=+d;if(u<=a.length-3)return a[u]||"";if((u=i?i.indexOf(d):-1)<0)throw new SyntaxError("Backreference to undefined group "+e);return a[u+1]||""}if("$"===t)return"$";if("&"===t||0==+t)return a[0];if("`"===t)return a[a.length-1].slice(0,a[a.length-2]);if("'"===t)return a[a.length-1].slice(a[a.length-2]+a[0].length);if(t=+t,isNaN(t))throw new SyntaxError("Invalid token "+e);if(t>a.length-3)throw new SyntaxError("Backreference to undefined group "+e);return a[t]||""})}),c&&(r.global?r.lastIndex=0:r.lastIndex=e),d},i.split=function(e,d){if(!N.isRegExp(e))return f.split.apply(this,arguments);var u=String(this),t=[],a=e.lastIndex,r=0,n=void 0;return d=(void 0===d?-1:d)>>>0,N.forEach(u,e,function(e){e.index+e[0].length>r&&(t.push(u.slice(r,e.index)),1<e.length&&e.index<u.length&&Array.prototype.push.apply(t,e.slice(1)),n=e[0].length,r=e.index+n)}),r===u.length?f.test.call(e,"")&&!n||t.push(""):t.push(u.slice(r)),e.lastIndex=a,t.length>d?t.slice(0,d):t},N.addToken(/\\([ABCE-RTUVXYZaeg-mopqyz]|c(?![A-Za-z])|u(?![\dA-Fa-f]{4}|{[\dA-Fa-f]+})|x(?![\dA-Fa-f]{2}))/,function(e,d){if("B"===e[1]&&d===m)return e[0];throw new SyntaxError("Invalid escape "+e[0])},{scope:"all",leadChar:"\\"}),N.addToken(/\\u{([\dA-Fa-f]+)}/,function(e,d,u){var t=x(e[1]);if(1114111<t)throw new SyntaxError("Invalid Unicode code point "+e[0]);if(t<=65535)return"\\u"+L(C(t));if(n&&-1!==u.indexOf("u"))return e[0];throw new SyntaxError("Cannot use Unicode code point above \\u{FFFF} without flag u")},{scope:"all",leadChar:"\\"}),N.addToken(/\[(\^?)\]/,function(e){return e[1]?"[\\s\\S]":"\\b\\B"},{leadChar:"["}),N.addToken(/\(\?#[^)]*\)/,k,{leadChar:"("}),N.addToken(/\s+|#[^\n]*\n?/,k,{flag:"x"}),N.addToken(/\./,function(){return"[\\s\\S]"},{flag:"s",leadChar:"."}),N.addToken(/\\k<([\w$]+)>/,function(e){var d=isNaN(e[1])?this.captureNames.indexOf(e[1])+1:+e[1],u=e.index+e[0].length;if(!d||d>this.captureNames.length)throw new SyntaxError("Backreference to undefined group "+e[0]);return"\\"+d+(u===e.input.length||isNaN(e.input[u])?"":"(?:)")},{leadChar:"\\"}),N.addToken(/\\(\d+)/,function(e,d){if(!(d===m&&/^[1-9]/.test(e[1])&&+e[1]<=this.captureNames.length)&&"0"!==e[1])throw new SyntaxError("Cannot use octal escape or backreference to undefined group "+e[0]);return e[0]},{scope:"all",leadChar:"\\"}),N.addToken(/\(\?P?<([\w$]+)>/,function(e){if(!isNaN(e[1]))throw new SyntaxError("Cannot use integer as capture name "+e[0]);if(!N.isInstalled("namespacing")&&("length"===e[1]||"__proto__"===e[1]))throw new SyntaxError("Cannot use reserved word as capture name "+e[0]);if(-1!==this.captureNames.indexOf(e[1]))throw new SyntaxError("Cannot use same name for multiple groups "+e[0]);return this.captureNames.push(e[1]),this.hasNamedCapture=!0,"("},{leadChar:"("}),N.addToken(/\((?!\?)/,function(e,d,u){return-1!==u.indexOf("n")?"(?:":(this.captureNames.push(null),"(")},{optionalFlags:"n",leadChar:"("}),d.default=N,e.exports=d.default});c(U);var j=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0}),d.default=function(b){var g="xregexp",_=/(\()(?!\?)|\\([1-9]\d*)|\\[\s\S]|\[(?:[^\\\]]|\\[\s\S])*\]/g,v=b.union([/\({{([\w$]+)}}\)|{{([\w$]+)}}/,_],"g",{conjunction:"or"});function y(e,d){d=d?"x":"";return b.isRegExp(e)?e[g]&&e[g].captureNames?e:b(e.source,d):b(e,d)}function n(e){return e instanceof RegExp?e:b.escape(e)}function c(e,d,u){return e["subpattern"+u]=d,e}function i(e,d,u){return e+(d<u.length-1?"{{subpattern"+d+"}}":"")}b.tag=function(r){return function(e){for(var d=arguments.length,u=Array(1<d?d-1:0),t=1;t<d;t++)u[t-1]=arguments[t];var a=u.map(n).reduce(c,{}),e=e.raw.map(i).join("");return b.build(e,a,r)}},b.build=function(e,d,u){var t=-1!==(u=u||"").indexOf("x"),a=/^\(\?([\w$]+)\)/.exec(e);a&&(u=b._clipDuplicates(u+a[1]));var r,n,c,i,s,o={};for(r in d)d.hasOwnProperty(r)&&(n=y(d[r],t),o[r]={pattern:(c=n.source,s=i=void 0,s=/\$(?:\(\?:\))*$/,(i=/^(?:\(\?:\))*\^/).test(c)&&s.test(c)&&s.test(c.replace(/\\[\s\S]/g,""))?c.replace(i,"").replace(s,""):c),names:n[g].captureNames||[]});var l,e=y(e,t),f=0,p=0,h=[0],m=e[g].captureNames||[],e=e.source.replace(v,function(e,d,u,t,a){var r=d||u,n=void 0,u=void 0,c=void 0;if(r){if(!o.hasOwnProperty(r))throw new ReferenceError("Undefined property "+e);u=d?(n=m[p],h[++p]=++f,"(?<"+(n||r)+">"):"(?:";return l=f,""+u+o[r].pattern.replace(_,function(e,d,u){if(d){if(n=o[r].names[f-l],++f,n)return"(?<"+n+">"}else if(u)return c=+u-1,o[r].names[c]?"\\k<"+o[r].names[c]+">":"\\"+(+u+l);return e})+")"}if(t){if(n=m[p],h[++p]=++f,n)return"(?<"+n+">"}else if(a)return m[c=+a-1]?"\\k<"+m[c]+">":"\\"+h[+a];return e});return b(e,u)}},e.exports=d.default});c(j);var H=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0}),d.default=function(y){function w(e,d,u,t){return{name:e,value:d,start:u,end:t}}y.matchRecursive=function(e,d,u,t,a){a=a||{};var r=-1!==(t=t||"").indexOf("g"),n=-1!==t.indexOf("y"),c=t.replace(/y/g,""),i=a.escapeChar,s=a.valueNames,o=[],l=0,f=0,p=0,h=0,m=void 0,b=void 0,g=void 0,_=void 0,v=void 0;if(d=y(d,c),u=y(u,c),i){if(1<i.length)throw new Error("Cannot use more than one escape character");i=y.escape(i),v=new RegExp("(?:"+i+"[\\S\\s]|(?:(?!"+y.union([d,u],"",{conjunction:"or"}).source+")[^"+i+"])+)+",t.replace(/[^imu]+/g,""))}for(;;){if(i&&(p+=(y.exec(e,v,p,"sticky")||[""])[0].length),g=y.exec(e,d,p),_=y.exec(e,u,p),g&&_&&(g.index<=_.index?_=null:g=null),g||_)p=(f=(g||_).index)+(g||_)[0].length;else if(!l)break;if(n&&!l&&h<f)break;if(g)l||(m=f,b=p),++l;else{if(!_||!l)throw new Error("Unbalanced delimiter found in string");if(!--l&&(s?(s[0]&&h<m&&o.push(w(s[0],e.slice(h,m),h,m)),s[1]&&o.push(w(s[1],e.slice(m,b),m,b)),s[2]&&o.push(w(s[2],e.slice(b,f),b,f)),s[3]&&o.push(w(s[3],e.slice(f,p),f,p))):o.push(e.slice(b,f)),h=p,!r))break}f===p&&++p}return r&&!n&&s&&s[0]&&e.length>h&&o.push(w(s[0],e.slice(h),h,e.length)),o}},e.exports=d.default});c(H);var z=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0}),d.default=function(a){var n={},u=a._dec,r=a._hex,c=a._pad4;function i(e){return e.replace(/[- _]+/g,"").toLowerCase()}function s(e){var d=/^\\[xu](.+)/.exec(e);return d?u(d[1]):e.charCodeAt("\\"===e[0]?1:0)}function o(e){var u,t;return n[e]["b!"]||(n[e]["b!"]=(e=n[e].bmp,u="",t=-1,a.forEach(e,/(\\x..|\\u....|\\?[\s\S])(?:-(\\x..|\\u....|\\?[\s\S]))?/,function(e){var d=s(e[1]);t+1<d&&(u+="\\u"+c(r(t+1)),t+2<d&&(u+="-\\u"+c(r(d-1)))),t=s(e[2]||e[1])}),t<65535&&(u+="\\u"+c(r(t+1)),t<65534&&(u+="-\\uFFFF")),u))}function l(e,d){var u=d?"a!":"a=";return n[e][u]||(n[e][u]=(e=n[u=e],u="",e.bmp&&!e.isBmpLast&&(u="["+e.bmp+"]"+(e.astral?"|":"")),e.astral&&(u+=e.astral),e.isBmpLast&&e.bmp&&(u+=(e.astral?"|":"")+"["+e.bmp+"]"),d?"(?:(?!"+u+")(?:[\ud800-\udbff][\udc00-\udfff]|[\0-￿]))":"(?:"+u+")"))}a.addToken(/\\([pP])(?:{(\^?)([^}]*)}|([A-Za-z]))/,function(e,d,u){var t="P"===e[1]||!!e[2],a=-1!==u.indexOf("A"),r=i(e[4]||e[3]),u=n[r];if("P"===e[1]&&e[2])throw new SyntaxError("Invalid double negation "+e[0]);if(!n.hasOwnProperty(r))throw new SyntaxError("Unknown Unicode token "+e[0]);if(u.inverseOf){if(r=i(u.inverseOf),!n.hasOwnProperty(r))throw new ReferenceError("Unicode token missing data "+e[0]+" -> "+u.inverseOf);u=n[r],t=!t}if(!u.bmp&&!a)throw new SyntaxError("Astral mode required for Unicode token "+e[0]);if(a){if("class"===d)throw new SyntaxError("Astral mode does not support Unicode tokens within character classes");return l(r,t)}return"class"===d?t?o(r):u.bmp:(t?"[^":"[")+u.bmp+"]"},{scope:"all",optionalFlags:"A",leadChar:"\\"}),a.addUnicodeData=function(e){for(var d,u=0;u<e.length;++u){if(!(d=e[u]).name)throw new Error("Unicode token requires name");if(!(d.inverseOf||d.bmp||d.astral))throw new Error("Unicode token has no character data "+d.name);(n[i(d.name)]=d).alias&&(n[i(d.alias)]=d)}a.cache.flush("patterns")},a._getUnicodeProperty=function(e){e=i(e);return n[e]}},e.exports=d.default});c(z);var V=[{name:"InAdlam",astral:"\ud83a[\udd00-\udd5f]"},{name:"InAegean_Numbers",astral:"\ud800[\udd00-\udd3f]"},{name:"InAhom",astral:"\ud805[\udf00-\udf3f]"},{name:"InAlchemical_Symbols",astral:"\ud83d[\udf00-\udf7f]"},{name:"InAlphabetic_Presentation_Forms",bmp:"ﬀ-ﭏ"},{name:"InAnatolian_Hieroglyphs",astral:"\ud811[\udc00-\ude7f]"},{name:"InAncient_Greek_Musical_Notation",astral:"\ud834[\ude00-\ude4f]"},{name:"InAncient_Greek_Numbers",astral:"\ud800[\udd40-\udd8f]"},{name:"InAncient_Symbols",astral:"\ud800[\udd90-\uddcf]"},{name:"InArabic",bmp:"؀-ۿ"},{name:"InArabic_Extended_A",bmp:"ࢠ-ࣿ"},{name:"InArabic_Mathematical_Alphabetic_Symbols",astral:"\ud83b[\ude00-\udeff]"},{name:"InArabic_Presentation_Forms_A",bmp:"ﭐ-﷿"},{name:"InArabic_Presentation_Forms_B",bmp:"ﹰ-\ufeff"},{name:"InArabic_Supplement",bmp:"ݐ-ݿ"},{name:"InArmenian",bmp:"԰-֏"},{name:"InArrows",bmp:"←-⇿"},{name:"InAvestan",astral:"\ud802[\udf00-\udf3f]"},{name:"InBalinese",bmp:"ᬀ-᭿"},{name:"InBamum",bmp:"ꚠ-꛿"},{name:"InBamum_Supplement",astral:"\ud81a[\udc00-\ude3f]"},{name:"InBasic_Latin",bmp:"\0-"},{name:"InBassa_Vah",astral:"\ud81a[\uded0-\udeff]"},{name:"InBatak",bmp:"ᯀ-᯿"},{name:"InBengali",bmp:"ঀ-৿"},{name:"InBhaiksuki",astral:"\ud807[\udc00-\udc6f]"},{name:"InBlock_Elements",bmp:"▀-▟"},{name:"InBopomofo",bmp:"㄀-ㄯ"},{name:"InBopomofo_Extended",bmp:"ㆠ-ㆿ"},{name:"InBox_Drawing",bmp:"─-╿"},{name:"InBrahmi",astral:"\ud804[\udc00-\udc7f]"},{name:"InBraille_Patterns",bmp:"⠀-⣿"},{name:"InBuginese",bmp:"ᨀ-᨟"},{name:"InBuhid",bmp:"ᝀ-᝟"},{name:"InByzantine_Musical_Symbols",astral:"\ud834[\udc00-\udcff]"},{name:"InCJK_Compatibility",bmp:"㌀-㏿"},{name:"InCJK_Compatibility_Forms",bmp:"︰-﹏"},{name:"InCJK_Compatibility_Ideographs",bmp:"豈-﫿"},{name:"InCJK_Compatibility_Ideographs_Supplement",astral:"\ud87e[\udc00-\ude1f]"},{name:"InCJK_Radicals_Supplement",bmp:"⺀-⻿"},{name:"InCJK_Strokes",bmp:"㇀-㇯"},{name:"InCJK_Symbols_And_Punctuation",bmp:"　-〿"},{name:"InCJK_Unified_Ideographs",bmp:"一-鿿"},{name:"InCJK_Unified_Ideographs_Extension_A",bmp:"㐀-䶿"},{name:"InCJK_Unified_Ideographs_Extension_B",astral:"[\ud840-\ud868][\udc00-\udfff]|\ud869[\udc00-\udedf]"},{name:"InCJK_Unified_Ideographs_Extension_C",astral:"\ud869[\udf00-\udfff]|[\ud86a-\ud86c][\udc00-\udfff]|\ud86d[\udc00-\udf3f]"},{name:"InCJK_Unified_Ideographs_Extension_D",astral:"\ud86d[\udf40-\udfff]|\ud86e[\udc00-\udc1f]"},{name:"InCJK_Unified_Ideographs_Extension_E",astral:"\ud86e[\udc20-\udfff]|[\ud86f-\ud872][\udc00-\udfff]|\ud873[\udc00-\udeaf]"},{name:"InCJK_Unified_Ideographs_Extension_F",astral:"\ud873[\udeb0-\udfff]|[\ud874-\ud879][\udc00-\udfff]|\ud87a[\udc00-\udfef]"},{name:"InCarian",astral:"\ud800[\udea0-\udedf]"},{name:"InCaucasian_Albanian",astral:"\ud801[\udd30-\udd6f]"},{name:"InChakma",astral:"\ud804[\udd00-\udd4f]"},{name:"InCham",bmp:"ꨀ-꩟"},{name:"InCherokee",bmp:"Ꭰ-᏿"},{name:"InCherokee_Supplement",bmp:"ꭰ-ꮿ"},{name:"InCombining_Diacritical_Marks",bmp:"̀-ͯ"},{name:"InCombining_Diacritical_Marks_Extended",bmp:"᪰-᫿"},{name:"InCombining_Diacritical_Marks_For_Symbols",bmp:"⃐-⃿"},{name:"InCombining_Diacritical_Marks_Supplement",bmp:"᷀-᷿"},{name:"InCombining_Half_Marks",bmp:"︠-︯"},{name:"InCommon_Indic_Number_Forms",bmp:"꠰-꠿"},{name:"InControl_Pictures",bmp:"␀-␿"},{name:"InCoptic",bmp:"Ⲁ-⳿"},{name:"InCoptic_Epact_Numbers",astral:"\ud800[\udee0-\udeff]"},{name:"InCounting_Rod_Numerals",astral:"\ud834[\udf60-\udf7f]"},{name:"InCuneiform",astral:"\ud808[\udc00-\udfff]"},{name:"InCuneiform_Numbers_And_Punctuation",astral:"\ud809[\udc00-\udc7f]"},{name:"InCurrency_Symbols",bmp:"₠-⃏"},{name:"InCypriot_Syllabary",astral:"\ud802[\udc00-\udc3f]"},{name:"InCyrillic",bmp:"Ѐ-ӿ"},{name:"InCyrillic_Extended_A",bmp:"ⷠ-ⷿ"},{name:"InCyrillic_Extended_B",bmp:"Ꙁ-ꚟ"},{name:"InCyrillic_Extended_C",bmp:"ᲀ-᲏"},{name:"InCyrillic_Supplement",bmp:"Ԁ-ԯ"},{name:"InDeseret",astral:"\ud801[\udc00-\udc4f]"},{name:"InDevanagari",bmp:"ऀ-ॿ"},{name:"InDevanagari_Extended",bmp:"꣠-ꣿ"},{name:"InDingbats",bmp:"✀-➿"},{name:"InDomino_Tiles",astral:"\ud83c[\udc30-\udc9f]"},{name:"InDuployan",astral:"\ud82f[\udc00-\udc9f]"},{name:"InEarly_Dynastic_Cuneiform",astral:"\ud809[\udc80-\udd4f]"},{name:"InEgyptian_Hieroglyphs",astral:"\ud80c[\udc00-\udfff]|\ud80d[\udc00-\udc2f]"},{name:"InElbasan",astral:"\ud801[\udd00-\udd2f]"},{name:"InEmoticons",astral:"\ud83d[\ude00-\ude4f]"},{name:"InEnclosed_Alphanumeric_Supplement",astral:"\ud83c[\udd00-\uddff]"},{name:"InEnclosed_Alphanumerics",bmp:"①-⓿"},{name:"InEnclosed_CJK_Letters_And_Months",bmp:"㈀-㋿"},{name:"InEnclosed_Ideographic_Supplement",astral:"\ud83c[\ude00-\udeff]"},{name:"InEthiopic",bmp:"ሀ-፿"},{name:"InEthiopic_Extended",bmp:"ⶀ-⷟"},{name:"InEthiopic_Extended_A",bmp:"꬀-꬯"},{name:"InEthiopic_Supplement",bmp:"ᎀ-᎟"},{name:"InGeneral_Punctuation",bmp:" -⁯"},{name:"InGeometric_Shapes",bmp:"■-◿"},{name:"InGeometric_Shapes_Extended",astral:"\ud83d[\udf80-\udfff]"},{name:"InGeorgian",bmp:"Ⴀ-ჿ"},{name:"InGeorgian_Supplement",bmp:"ⴀ-⴯"},{name:"InGlagolitic",bmp:"Ⰰ-ⱟ"},{name:"InGlagolitic_Supplement",astral:"\ud838[\udc00-\udc2f]"},{name:"InGothic",astral:"\ud800[\udf30-\udf4f]"},{name:"InGrantha",astral:"\ud804[\udf00-\udf7f]"},{name:"InGreek_And_Coptic",bmp:"Ͱ-Ͽ"},{name:"InGreek_Extended",bmp:"ἀ-῿"},{name:"InGujarati",bmp:"઀-૿"},{name:"InGurmukhi",bmp:"਀-੿"},{name:"InHalfwidth_And_Fullwidth_Forms",bmp:"＀-￯"},{name:"InHangul_Compatibility_Jamo",bmp:"㄰-㆏"},{name:"InHangul_Jamo",bmp:"ᄀ-ᇿ"},{name:"InHangul_Jamo_Extended_A",bmp:"ꥠ-꥿"},{name:"InHangul_Jamo_Extended_B",bmp:"ힰ-퟿"},{name:"InHangul_Syllables",bmp:"가-힯"},{name:"InHanunoo",bmp:"ᜠ-᜿"},{name:"InHatran",astral:"\ud802[\udce0-\udcff]"},{name:"InHebrew",bmp:"֐-׿"},{name:"InHigh_Private_Use_Surrogates",bmp:"\udb80-\udbff"},{name:"InHigh_Surrogates",bmp:"\ud800-\udb7f"},{name:"InHiragana",bmp:"぀-ゟ"},{name:"InIPA_Extensions",bmp:"ɐ-ʯ"},{name:"InIdeographic_Description_Characters",bmp:"⿰-⿿"},{name:"InIdeographic_Symbols_And_Punctuation",astral:"\ud81b[\udfe0-\udfff]"},{name:"InImperial_Aramaic",astral:"\ud802[\udc40-\udc5f]"},{name:"InInscriptional_Pahlavi",astral:"\ud802[\udf60-\udf7f]"},{name:"InInscriptional_Parthian",astral:"\ud802[\udf40-\udf5f]"},{name:"InJavanese",bmp:"ꦀ-꧟"},{name:"InKaithi",astral:"\ud804[\udc80-\udccf]"},{name:"InKana_Extended_A",astral:"\ud82c[\udd00-\udd2f]"},{name:"InKana_Supplement",astral:"\ud82c[\udc00-\udcff]"},{name:"InKanbun",bmp:"㆐-㆟"},{name:"InKangxi_Radicals",bmp:"⼀-⿟"},{name:"InKannada",bmp:"ಀ-೿"},{name:"InKatakana",bmp:"゠-ヿ"},{name:"InKatakana_Phonetic_Extensions",bmp:"ㇰ-ㇿ"},{name:"InKayah_Li",bmp:"꤀-꤯"},{name:"InKharoshthi",astral:"\ud802[\ude00-\ude5f]"},{name:"InKhmer",bmp:"ក-៿"},{name:"InKhmer_Symbols",bmp:"᧠-᧿"},{name:"InKhojki",astral:"\ud804[\ude00-\ude4f]"},{name:"InKhudawadi",astral:"\ud804[\udeb0-\udeff]"},{name:"InLao",bmp:"຀-໿"},{name:"InLatin_1_Supplement",bmp:"-ÿ"},{name:"InLatin_Extended_A",bmp:"Ā-ſ"},{name:"InLatin_Extended_Additional",bmp:"Ḁ-ỿ"},{name:"InLatin_Extended_B",bmp:"ƀ-ɏ"},{name:"InLatin_Extended_C",bmp:"Ⱡ-Ɀ"},{name:"InLatin_Extended_D",bmp:"꜠-ꟿ"},{name:"InLatin_Extended_E",bmp:"ꬰ-꭯"},{name:"InLepcha",bmp:"ᰀ-ᱏ"},{name:"InLetterlike_Symbols",bmp:"℀-⅏"},{name:"InLimbu",bmp:"ᤀ-᥏"},{name:"InLinear_A",astral:"\ud801[\ude00-\udf7f]"},{name:"InLinear_B_Ideograms",astral:"\ud800[\udc80-\udcff]"},{name:"InLinear_B_Syllabary",astral:"\ud800[\udc00-\udc7f]"},{name:"InLisu",bmp:"ꓐ-꓿"},{name:"InLow_Surrogates",bmp:"\udc00-\udfff"},{name:"InLycian",astral:"\ud800[\ude80-\ude9f]"},{name:"InLydian",astral:"\ud802[\udd20-\udd3f]"},{name:"InMahajani",astral:"\ud804[\udd50-\udd7f]"},{name:"InMahjong_Tiles",astral:"\ud83c[\udc00-\udc2f]"},{name:"InMalayalam",bmp:"ഀ-ൿ"},{name:"InMandaic",bmp:"ࡀ-࡟"},{name:"InManichaean",astral:"\ud802[\udec0-\udeff]"},{name:"InMarchen",astral:"\ud807[\udc70-\udcbf]"},{name:"InMasaram_Gondi",astral:"\ud807[\udd00-\udd5f]"},{name:"InMathematical_Alphanumeric_Symbols",astral:"\ud835[\udc00-\udfff]"},{name:"InMathematical_Operators",bmp:"∀-⋿"},{name:"InMeetei_Mayek",bmp:"ꯀ-꯿"},{name:"InMeetei_Mayek_Extensions",bmp:"ꫠ-꫿"},{name:"InMende_Kikakui",astral:"\ud83a[\udc00-\udcdf]"},{name:"InMeroitic_Cursive",astral:"\ud802[\udda0-\uddff]"},{name:"InMeroitic_Hieroglyphs",astral:"\ud802[\udd80-\udd9f]"},{name:"InMiao",astral:"\ud81b[\udf00-\udf9f]"},{name:"InMiscellaneous_Mathematical_Symbols_A",bmp:"⟀-⟯"},{name:"InMiscellaneous_Mathematical_Symbols_B",bmp:"⦀-⧿"},{name:"InMiscellaneous_Symbols",bmp:"☀-⛿"},{name:"InMiscellaneous_Symbols_And_Arrows",bmp:"⬀-⯿"},{name:"InMiscellaneous_Symbols_And_Pictographs",astral:"\ud83c[\udf00-\udfff]|\ud83d[\udc00-\uddff]"},{name:"InMiscellaneous_Technical",bmp:"⌀-⏿"},{name:"InModi",astral:"\ud805[\ude00-\ude5f]"},{name:"InModifier_Tone_Letters",bmp:"꜀-ꜟ"},{name:"InMongolian",bmp:"᠀-᢯"},{name:"InMongolian_Supplement",astral:"\ud805[\ude60-\ude7f]"},{name:"InMro",astral:"\ud81a[\ude40-\ude6f]"},{name:"InMultani",astral:"\ud804[\ude80-\udeaf]"},{name:"InMusical_Symbols",astral:"\ud834[\udd00-\uddff]"},{name:"InMyanmar",bmp:"က-႟"},{name:"InMyanmar_Extended_A",bmp:"ꩠ-ꩿ"},{name:"InMyanmar_Extended_B",bmp:"ꧠ-꧿"},{name:"InNKo",bmp:"߀-߿"},{name:"InNabataean",astral:"\ud802[\udc80-\udcaf]"},{name:"InNew_Tai_Lue",bmp:"ᦀ-᧟"},{name:"InNewa",astral:"\ud805[\udc00-\udc7f]"},{name:"InNumber_Forms",bmp:"⅐-↏"},{name:"InNushu",astral:"\ud82c[\udd70-\udeff]"},{name:"InOgham",bmp:" -᚟"},{name:"InOl_Chiki",bmp:"᱐-᱿"},{name:"InOld_Hungarian",astral:"\ud803[\udc80-\udcff]"},{name:"InOld_Italic",astral:"\ud800[\udf00-\udf2f]"},{name:"InOld_North_Arabian",astral:"\ud802[\ude80-\ude9f]"},{name:"InOld_Permic",astral:"\ud800[\udf50-\udf7f]"},{name:"InOld_Persian",astral:"\ud800[\udfa0-\udfdf]"},{name:"InOld_South_Arabian",astral:"\ud802[\ude60-\ude7f]"},{name:"InOld_Turkic",astral:"\ud803[\udc00-\udc4f]"},{name:"InOptical_Character_Recognition",bmp:"⑀-⑟"},{name:"InOriya",bmp:"଀-୿"},{name:"InOrnamental_Dingbats",astral:"\ud83d[\ude50-\ude7f]"},{name:"InOsage",astral:"\ud801[\udcb0-\udcff]"},{name:"InOsmanya",astral:"\ud801[\udc80-\udcaf]"},{name:"InPahawh_Hmong",astral:"\ud81a[\udf00-\udf8f]"},{name:"InPalmyrene",astral:"\ud802[\udc60-\udc7f]"},{name:"InPau_Cin_Hau",astral:"\ud806[\udec0-\udeff]"},{name:"InPhags_Pa",bmp:"ꡀ-꡿"},{name:"InPhaistos_Disc",astral:"\ud800[\uddd0-\uddff]"},{name:"InPhoenician",astral:"\ud802[\udd00-\udd1f]"},{name:"InPhonetic_Extensions",bmp:"ᴀ-ᵿ"},{name:"InPhonetic_Extensions_Supplement",bmp:"ᶀ-ᶿ"},{name:"InPlaying_Cards",astral:"\ud83c[\udca0-\udcff]"},{name:"InPrivate_Use_Area",bmp:"-"},{name:"InPsalter_Pahlavi",astral:"\ud802[\udf80-\udfaf]"},{name:"InRejang",bmp:"ꤰ-꥟"},{name:"InRumi_Numeral_Symbols",astral:"\ud803[\ude60-\ude7f]"},{name:"InRunic",bmp:"ᚠ-᛿"},{name:"InSamaritan",bmp:"ࠀ-࠿"},{name:"InSaurashtra",bmp:"ꢀ-꣟"},{name:"InSharada",astral:"\ud804[\udd80-\udddf]"},{name:"InShavian",astral:"\ud801[\udc50-\udc7f]"},{name:"InShorthand_Format_Controls",astral:"\ud82f[\udca0-\udcaf]"},{name:"InSiddham",astral:"\ud805[\udd80-\uddff]"},{name:"InSinhala",bmp:"඀-෿"},{name:"InSinhala_Archaic_Numbers",astral:"\ud804[\udde0-\uddff]"},{name:"InSmall_Form_Variants",bmp:"﹐-﹯"},{name:"InSora_Sompeng",astral:"\ud804[\udcd0-\udcff]"},{name:"InSoyombo",astral:"\ud806[\ude50-\udeaf]"},{name:"InSpacing_Modifier_Letters",bmp:"ʰ-˿"},{name:"InSpecials",bmp:"￰-￿"},{name:"InSundanese",bmp:"ᮀ-ᮿ"},{name:"InSundanese_Supplement",bmp:"᳀-᳏"},{name:"InSuperscripts_And_Subscripts",bmp:"⁰-₟"},{name:"InSupplemental_Arrows_A",bmp:"⟰-⟿"},{name:"InSupplemental_Arrows_B",bmp:"⤀-⥿"},{name:"InSupplemental_Arrows_C",astral:"\ud83e[\udc00-\udcff]"},{name:"InSupplemental_Mathematical_Operators",bmp:"⨀-⫿"},{name:"InSupplemental_Punctuation",bmp:"⸀-⹿"},{name:"InSupplemental_Symbols_And_Pictographs",astral:"\ud83e[\udd00-\uddff]"},{name:"InSupplementary_Private_Use_Area_A",astral:"[\udb80-\udbbf][\udc00-\udfff]"},{name:"InSupplementary_Private_Use_Area_B",astral:"[\udbc0-\udbff][\udc00-\udfff]"},{name:"InSutton_SignWriting",astral:"\ud836[\udc00-\udeaf]"},{name:"InSyloti_Nagri",bmp:"ꠀ-꠯"},{name:"InSyriac",bmp:"܀-ݏ"},{name:"InSyriac_Supplement",bmp:"ࡠ-࡯"},{name:"InTagalog",bmp:"ᜀ-ᜟ"},{name:"InTagbanwa",bmp:"ᝠ-᝿"},{name:"InTags",astral:"\udb40[\udc00-\udc7f]"},{name:"InTai_Le",bmp:"ᥐ-᥿"},{name:"InTai_Tham",bmp:"ᨠ-᪯"},{name:"InTai_Viet",bmp:"ꪀ-꫟"},{name:"InTai_Xuan_Jing_Symbols",astral:"\ud834[\udf00-\udf5f]"},{name:"InTakri",astral:"\ud805[\ude80-\udecf]"},{name:"InTamil",bmp:"஀-௿"},{name:"InTangut",astral:"[\ud81c-\ud821][\udc00-\udfff]"},{name:"InTangut_Components",astral:"\ud822[\udc00-\udeff]"},{name:"InTelugu",bmp:"ఀ-౿"},{name:"InThaana",bmp:"ހ-޿"},{name:"InThai",bmp:"฀-๿"},{name:"InTibetan",bmp:"ༀ-࿿"},{name:"InTifinagh",bmp:"ⴰ-⵿"},{name:"InTirhuta",astral:"\ud805[\udc80-\udcdf]"},{name:"InTransport_And_Map_Symbols",astral:"\ud83d[\ude80-\udeff]"},{name:"InUgaritic",astral:"\ud800[\udf80-\udf9f]"},{name:"InUnified_Canadian_Aboriginal_Syllabics",bmp:"᐀-ᙿ"},{name:"InUnified_Canadian_Aboriginal_Syllabics_Extended",bmp:"ᢰ-᣿"},{name:"InVai",bmp:"ꔀ-꘿"},{name:"InVariation_Selectors",bmp:"︀-️"},{name:"InVariation_Selectors_Supplement",astral:"\udb40[\udd00-\uddef]"},{name:"InVedic_Extensions",bmp:"᳐-᳿"},{name:"InVertical_Forms",bmp:"︐-︟"},{name:"InWarang_Citi",astral:"\ud806[\udca0-\udcff]"},{name:"InYi_Radicals",bmp:"꒐-꓏"},{name:"InYi_Syllables",bmp:"ꀀ-꒏"},{name:"InYijing_Hexagram_Symbols",bmp:"䷀-䷿"},{name:"InZanabazar_Square",astral:"\ud806[\ude00-\ude4f]"}],G=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0});var u,t=(u=V)&&u.__esModule?u:{default:u};d.default=function(e){if(!e.addUnicodeData)throw new ReferenceError("Unicode Base must be loaded before Unicode Blocks");e.addUnicodeData(t.default)},e.exports=d.default});c(G);var Z=[{name:"C",alias:"Other",isBmpLast:!0,bmp:"\0--­͸͹΀-΃΋΍΢԰՗՘ՠֈ֋֌֐׈-׏׫-ׯ׵-؅؜؝۝܎܏݋݌޲-޿߻-߿࠮࠯࠿࡜࡝࡟࡫-࢟ࢵࢾ-࣓࣢঄঍঎঑঒঩঱঳-঵঺঻৅৆৉৊৏-৖৘-৛৞৤৥৾-਀਄਋-਎਑਒਩਱਴਷਺਻਽੃-੆੉੊੎-੐੒-੘੝੟-੥੶-઀઄઎઒઩઱઴઺઻૆૊૎૏૑-૟૤૥૲-૸଀଄଍଎଑଒଩଱଴଺଻୅୆୉୊୎-୕୘-୛୞୤୥୸-஁஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-஽௃-௅௉௎௏௑-௖௘-௥௻-௿ఄ఍఑఩఺-఼౅౉౎-౔౗౛-౟౤౥౰-౷಄಍಑಩಴಺಻೅೉೎-೔೗-ೝ೟೤೥೰ೳ-೿ഄ഍഑൅൉൐-൓൤൥඀ඁ඄඗-඙඲඼඾඿෇-෉෋-෎෕෗෠-෥෰෱෵-฀฻-฾๜-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬ຺຾຿໅໇໎໏໚໛໠-໿཈཭-཰྘྽࿍࿛-࿿჆჈-჌჎჏቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛፜፽-፿᎚-᎟᏶᏷᏾᏿᚝-᚟᛹-᛿ᜍ᜕-ᜟ᜷-᜿᝔-᝟᝭᝱᝴-᝿៞៟៪-៯៺-៿᠎᠏᠚-᠟ᡸ-᡿᢫-᢯᣶-᣿᤟᤬-᤯᤼-᤿᥁-᥃᥮᥯᥵-᥿᦬-᦯᧊-᧏᧛-᧝᨜᨝᩟᩽᩾᪊-᪏᪚-᪟᪮᪯ᪿ-᫿ᭌ-᭏᭽-᭿᯴-᯻᰸-᰺᱊-᱌Ᲊ-Ჿ᳈-᳏ᳺ-᳿᷺἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵῅῔῕῜῰῱῵῿​-‏‪-‮⁠-⁯⁲⁳₏₝-₟⃀-⃏⃱-⃿↌-↏␧-␿⑋-⑟⭴⭵⮖⮗⮺-⮼⯉⯓-⯫⯰-⯿Ⱟⱟ⳴-⳸⴦⴨-⴬⴮⴯⵨-⵮⵱-⵾⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟⹊-⹿⺚⻴-⻿⿖-⿯⿼-⿿぀゗゘㄀-㄄ㄯ㄰㆏ㆻ-ㆿ㇤-㇯㈟㋿䶶-䶿鿫-鿿꒍-꒏꓇-꓏꘬-꘿꛸-꛿ꞯꞸ-ꟶ꠬-꠯꠺-꠿꡸-꡿꣆-꣍꣚-꣟ꣾꣿ꥔-꥞꥽-꥿꧎꧚-꧝꧿꨷-꨿꩎꩏꩚꩛꫃-꫚꫷-꬀꬇꬈꬏꬐꬗-꬟꬧꬯ꭦ-꭯꯮꯯꯺-꯿힤-힯퟇-퟊퟼-﩮﩯﫚-﫿﬇-﬒﬘-﬜﬷﬽﬿﭂﭅﯂-﯒﵀-﵏﶐﶑﷈-﷯﷾﷿︚-︟﹓﹧﹬-﹯﹵﻽-＀﾿-￁￈￉￐￑￘￙￝-￟￧￯-￻￾￿",astral:"\ud800[\udc0c\udc27\udc3b\udc3e\udc4e\udc4f\udc5e-\udc7f\udcfb-\udcff\udd03-\udd06\udd34-\udd36\udd8f\udd9c-\udd9f\udda1-\uddcf\uddfe-\ude7f\ude9d-\ude9f\uded1-\udedf\udefc-\udeff\udf24-\udf2c\udf4b-\udf4f\udf7b-\udf7f\udf9e\udfc4-\udfc7\udfd6-\udfff]|\ud801[\udc9e\udc9f\udcaa-\udcaf\udcd4-\udcd7\udcfc-\udcff\udd28-\udd2f\udd64-\udd6e\udd70-\uddff\udf37-\udf3f\udf56-\udf5f\udf68-\udfff]|\ud802[\udc06\udc07\udc09\udc36\udc39-\udc3b\udc3d\udc3e\udc56\udc9f-\udca6\udcb0-\udcdf\udcf3\udcf6-\udcfa\udd1c-\udd1e\udd3a-\udd3e\udd40-\udd7f\uddb8-\uddbb\uddd0\uddd1\ude04\ude07-\ude0b\ude14\ude18\ude34-\ude37\ude3b-\ude3e\ude48-\ude4f\ude59-\ude5f\udea0-\udebf\udee7-\udeea\udef7-\udeff\udf36-\udf38\udf56\udf57\udf73-\udf77\udf92-\udf98\udf9d-\udfa8\udfb0-\udfff]|\ud803[\udc49-\udc7f\udcb3-\udcbf\udcf3-\udcf9\udd00-\ude5f\ude7f-\udfff]|\ud804[\udc4e-\udc51\udc70-\udc7e\udcbd\udcc2-\udccf\udce9-\udcef\udcfa-\udcff\udd35\udd44-\udd4f\udd77-\udd7f\uddce\uddcf\udde0\uddf5-\uddff\ude12\ude3f-\ude7f\ude87\ude89\ude8e\ude9e\udeaa-\udeaf\udeeb-\udeef\udefa-\udeff\udf04\udf0d\udf0e\udf11\udf12\udf29\udf31\udf34\udf3a\udf3b\udf45\udf46\udf49\udf4a\udf4e\udf4f\udf51-\udf56\udf58-\udf5c\udf64\udf65\udf6d-\udf6f\udf75-\udfff]|\ud805[\udc5a\udc5c\udc5e-\udc7f\udcc8-\udccf\udcda-\udd7f\uddb6\uddb7\uddde-\uddff\ude45-\ude4f\ude5a-\ude5f\ude6d-\ude7f\udeb8-\udebf\udeca-\udeff\udf1a-\udf1c\udf2c-\udf2f\udf40-\udfff]|\ud806[\udc00-\udc9f\udcf3-\udcfe\udd00-\uddff\ude48-\ude4f\ude84\ude85\ude9d\udea3-\udebf\udef9-\udfff]|\ud807[\udc09\udc37\udc46-\udc4f\udc6d-\udc6f\udc90\udc91\udca8\udcb7-\udcff\udd07\udd0a\udd37-\udd39\udd3b\udd3e\udd48-\udd4f\udd5a-\udfff]|\ud808[\udf9a-\udfff]|\ud809[\udc6f\udc75-\udc7f\udd44-\udfff]|[\ud80a\ud80b\ud80e-\ud810\ud812-\ud819\ud823-\ud82b\ud82d\ud82e\ud830-\ud833\ud837\ud839\ud83f\ud87b-\ud87d\ud87f-\udb3f\udb41-\udbff][\udc00-\udfff]|\ud80d[\udc2f-\udfff]|\ud811[\ude47-\udfff]|\ud81a[\ude39-\ude3f\ude5f\ude6a-\ude6d\ude70-\udecf\udeee\udeef\udef6-\udeff\udf46-\udf4f\udf5a\udf62\udf78-\udf7c\udf90-\udfff]|\ud81b[\udc00-\udeff\udf45-\udf4f\udf7f-\udf8e\udfa0-\udfdf\udfe2-\udfff]|\ud821[\udfed-\udfff]|\ud822[\udef3-\udfff]|\ud82c[\udd1f-\udd6f\udefc-\udfff]|\ud82f[\udc6b-\udc6f\udc7d-\udc7f\udc89-\udc8f\udc9a\udc9b\udca0-\udfff]|\ud834[\udcf6-\udcff\udd27\udd28\udd73-\udd7a\udde9-\uddff\ude46-\udeff\udf57-\udf5f\udf72-\udfff]|\ud835[\udc55\udc9d\udca0\udca1\udca3\udca4\udca7\udca8\udcad\udcba\udcbc\udcc4\udd06\udd0b\udd0c\udd15\udd1d\udd3a\udd3f\udd45\udd47-\udd49\udd51\udea6\udea7\udfcc\udfcd]|\ud836[\ude8c-\ude9a\udea0\udeb0-\udfff]|\ud838[\udc07\udc19\udc1a\udc22\udc25\udc2b-\udfff]|\ud83a[\udcc5\udcc6\udcd7-\udcff\udd4b-\udd4f\udd5a-\udd5d\udd60-\udfff]|\ud83b[\udc00-\uddff\ude04\ude20\ude23\ude25\ude26\ude28\ude33\ude38\ude3a\ude3c-\ude41\ude43-\ude46\ude48\ude4a\ude4c\ude50\ude53\ude55\ude56\ude58\ude5a\ude5c\ude5e\ude60\ude63\ude65\ude66\ude6b\ude73\ude78\ude7d\ude7f\ude8a\ude9c-\udea0\udea4\udeaa\udebc-\udeef\udef2-\udfff]|\ud83c[\udc2c-\udc2f\udc94-\udc9f\udcaf\udcb0\udcc0\udcd0\udcf6-\udcff\udd0d-\udd0f\udd2f\udd6c-\udd6f\uddad-\udde5\ude03-\ude0f\ude3c-\ude3f\ude49-\ude4f\ude52-\ude5f\ude66-\udeff]|\ud83d[\uded5-\udedf\udeed-\udeef\udef9-\udeff\udf74-\udf7f\udfd5-\udfff]|\ud83e[\udc0c-\udc0f\udc48-\udc4f\udc5a-\udc5f\udc88-\udc8f\udcae-\udcff\udd0c-\udd0f\udd3f\udd4d-\udd4f\udd6c-\udd7f\udd98-\uddbf\uddc1-\uddcf\udde7-\udfff]|\ud869[\uded7-\udeff]|\ud86d[\udf35-\udf3f]|\ud86e[\udc1e\udc1f]|\ud873[\udea2-\udeaf]|\ud87a[\udfe1-\udfff]|\ud87e[\ude1e-\udfff]|\udb40[\udc00-\udcff\uddf0-\udfff]"},{name:"Cc",alias:"Control",bmp:"\0--"},{name:"Cf",alias:"Format",bmp:"­؀-؅؜۝܏࣢᠎​-‏‪-‮⁠-⁤⁦-⁯\ufeff￹-￻",astral:"𑂽|\ud82f[\udca0-\udca3]|\ud834[\udd73-\udd7a]|\udb40[\udc01\udc20-\udc7f]"},{name:"Cn",alias:"Unassigned",bmp:"͸͹΀-΃΋΍΢԰՗՘ՠֈ֋֌֐׈-׏׫-ׯ׵-׿؝܎݋݌޲-޿߻-߿࠮࠯࠿࡜࡝࡟࡫-࢟ࢵࢾ-࣓঄঍঎঑঒঩঱঳-঵঺঻৅৆৉৊৏-৖৘-৛৞৤৥৾-਀਄਋-਎਑਒਩਱਴਷਺਻਽੃-੆੉੊੎-੐੒-੘੝੟-੥੶-઀઄઎઒઩઱઴઺઻૆૊૎૏૑-૟૤૥૲-૸଀଄଍଎଑଒଩଱଴଺଻୅୆୉୊୎-୕୘-୛୞୤୥୸-஁஄஋-஍஑஖-஘஛஝஠-஢஥-஧஫-஭஺-஽௃-௅௉௎௏௑-௖௘-௥௻-௿ఄ఍఑఩఺-఼౅౉౎-౔౗౛-౟౤౥౰-౷಄಍಑಩಴಺಻೅೉೎-೔೗-ೝ೟೤೥೰ೳ-೿ഄ഍഑൅൉൐-൓൤൥඀ඁ඄඗-඙඲඼඾඿෇-෉෋-෎෕෗෠-෥෰෱෵-฀฻-฾๜-຀຃຅ຆຉ຋ຌຎ-ຓຘຠ຤຦ຨຩຬ຺຾຿໅໇໎໏໚໛໠-໿཈཭-཰྘྽࿍࿛-࿿჆჈-჌჎჏቉቎቏቗቙቞቟኉኎኏኱኶኷኿዁዆዇዗጑጖጗፛፜፽-፿᎚-᎟᏶᏷᏾᏿᚝-᚟᛹-᛿ᜍ᜕-ᜟ᜷-᜿᝔-᝟᝭᝱᝴-᝿៞៟៪-៯៺-៿᠏᠚-᠟ᡸ-᡿᢫-᢯᣶-᣿᤟᤬-᤯᤼-᤿᥁-᥃᥮᥯᥵-᥿᦬-᦯᧊-᧏᧛-᧝᨜᨝᩟᩽᩾᪊-᪏᪚-᪟᪮᪯ᪿ-᫿ᭌ-᭏᭽-᭿᯴-᯻᰸-᰺᱊-᱌Ᲊ-Ჿ᳈-᳏ᳺ-᳿᷺἖἗἞἟὆὇὎὏὘὚὜὞὾὿᾵῅῔῕῜῰῱῵῿⁥⁲⁳₏₝-₟⃀-⃏⃱-⃿↌-↏␧-␿⑋-⑟⭴⭵⮖⮗⮺-⮼⯉⯓-⯫⯰-⯿Ⱟⱟ⳴-⳸⴦⴨-⴬⴮⴯⵨-⵮⵱-⵾⶗-⶟⶧⶯⶷⶿⷇⷏⷗⷟⹊-⹿⺚⻴-⻿⿖-⿯⿼-⿿぀゗゘㄀-㄄ㄯ㄰㆏ㆻ-ㆿ㇤-㇯㈟㋿䶶-䶿鿫-鿿꒍-꒏꓇-꓏꘬-꘿꛸-꛿ꞯꞸ-ꟶ꠬-꠯꠺-꠿꡸-꡿꣆-꣍꣚-꣟ꣾꣿ꥔-꥞꥽-꥿꧎꧚-꧝꧿꨷-꨿꩎꩏꩚꩛꫃-꫚꫷-꬀꬇꬈꬏꬐꬗-꬟꬧꬯ꭦ-꭯꯮꯯꯺-꯿힤-힯퟇-퟊퟼-퟿﩮﩯﫚-﫿﬇-﬒﬘-﬜﬷﬽﬿﭂﭅﯂-﯒﵀-﵏﶐﶑﷈-﷯﷾﷿︚-︟﹓﹧﹬-﹯﹵﻽﻾＀﾿-￁￈￉￐￑￘￙￝-￟￧￯-￸￾￿",astral:"\ud800[\udc0c\udc27\udc3b\udc3e\udc4e\udc4f\udc5e-\udc7f\udcfb-\udcff\udd03-\udd06\udd34-\udd36\udd8f\udd9c-\udd9f\udda1-\uddcf\uddfe-\ude7f\ude9d-\ude9f\uded1-\udedf\udefc-\udeff\udf24-\udf2c\udf4b-\udf4f\udf7b-\udf7f\udf9e\udfc4-\udfc7\udfd6-\udfff]|\ud801[\udc9e\udc9f\udcaa-\udcaf\udcd4-\udcd7\udcfc-\udcff\udd28-\udd2f\udd64-\udd6e\udd70-\uddff\udf37-\udf3f\udf56-\udf5f\udf68-\udfff]|\ud802[\udc06\udc07\udc09\udc36\udc39-\udc3b\udc3d\udc3e\udc56\udc9f-\udca6\udcb0-\udcdf\udcf3\udcf6-\udcfa\udd1c-\udd1e\udd3a-\udd3e\udd40-\udd7f\uddb8-\uddbb\uddd0\uddd1\ude04\ude07-\ude0b\ude14\ude18\ude34-\ude37\ude3b-\ude3e\ude48-\ude4f\ude59-\ude5f\udea0-\udebf\udee7-\udeea\udef7-\udeff\udf36-\udf38\udf56\udf57\udf73-\udf77\udf92-\udf98\udf9d-\udfa8\udfb0-\udfff]|\ud803[\udc49-\udc7f\udcb3-\udcbf\udcf3-\udcf9\udd00-\ude5f\ude7f-\udfff]|\ud804[\udc4e-\udc51\udc70-\udc7e\udcc2-\udccf\udce9-\udcef\udcfa-\udcff\udd35\udd44-\udd4f\udd77-\udd7f\uddce\uddcf\udde0\uddf5-\uddff\ude12\ude3f-\ude7f\ude87\ude89\ude8e\ude9e\udeaa-\udeaf\udeeb-\udeef\udefa-\udeff\udf04\udf0d\udf0e\udf11\udf12\udf29\udf31\udf34\udf3a\udf3b\udf45\udf46\udf49\udf4a\udf4e\udf4f\udf51-\udf56\udf58-\udf5c\udf64\udf65\udf6d-\udf6f\udf75-\udfff]|\ud805[\udc5a\udc5c\udc5e-\udc7f\udcc8-\udccf\udcda-\udd7f\uddb6\uddb7\uddde-\uddff\ude45-\ude4f\ude5a-\ude5f\ude6d-\ude7f\udeb8-\udebf\udeca-\udeff\udf1a-\udf1c\udf2c-\udf2f\udf40-\udfff]|\ud806[\udc00-\udc9f\udcf3-\udcfe\udd00-\uddff\ude48-\ude4f\ude84\ude85\ude9d\udea3-\udebf\udef9-\udfff]|\ud807[\udc09\udc37\udc46-\udc4f\udc6d-\udc6f\udc90\udc91\udca8\udcb7-\udcff\udd07\udd0a\udd37-\udd39\udd3b\udd3e\udd48-\udd4f\udd5a-\udfff]|\ud808[\udf9a-\udfff]|\ud809[\udc6f\udc75-\udc7f\udd44-\udfff]|[\ud80a\ud80b\ud80e-\ud810\ud812-\ud819\ud823-\ud82b\ud82d\ud82e\ud830-\ud833\ud837\ud839\ud83f\ud87b-\ud87d\ud87f-\udb3f\udb41-\udb7f][\udc00-\udfff]|\ud80d[\udc2f-\udfff]|\ud811[\ude47-\udfff]|\ud81a[\ude39-\ude3f\ude5f\ude6a-\ude6d\ude70-\udecf\udeee\udeef\udef6-\udeff\udf46-\udf4f\udf5a\udf62\udf78-\udf7c\udf90-\udfff]|\ud81b[\udc00-\udeff\udf45-\udf4f\udf7f-\udf8e\udfa0-\udfdf\udfe2-\udfff]|\ud821[\udfed-\udfff]|\ud822[\udef3-\udfff]|\ud82c[\udd1f-\udd6f\udefc-\udfff]|\ud82f[\udc6b-\udc6f\udc7d-\udc7f\udc89-\udc8f\udc9a\udc9b\udca4-\udfff]|\ud834[\udcf6-\udcff\udd27\udd28\udde9-\uddff\ude46-\udeff\udf57-\udf5f\udf72-\udfff]|\ud835[\udc55\udc9d\udca0\udca1\udca3\udca4\udca7\udca8\udcad\udcba\udcbc\udcc4\udd06\udd0b\udd0c\udd15\udd1d\udd3a\udd3f\udd45\udd47-\udd49\udd51\udea6\udea7\udfcc\udfcd]|\ud836[\ude8c-\ude9a\udea0\udeb0-\udfff]|\ud838[\udc07\udc19\udc1a\udc22\udc25\udc2b-\udfff]|\ud83a[\udcc5\udcc6\udcd7-\udcff\udd4b-\udd4f\udd5a-\udd5d\udd60-\udfff]|\ud83b[\udc00-\uddff\ude04\ude20\ude23\ude25\ude26\ude28\ude33\ude38\ude3a\ude3c-\ude41\ude43-\ude46\ude48\ude4a\ude4c\ude50\ude53\ude55\ude56\ude58\ude5a\ude5c\ude5e\ude60\ude63\ude65\ude66\ude6b\ude73\ude78\ude7d\ude7f\ude8a\ude9c-\udea0\udea4\udeaa\udebc-\udeef\udef2-\udfff]|\ud83c[\udc2c-\udc2f\udc94-\udc9f\udcaf\udcb0\udcc0\udcd0\udcf6-\udcff\udd0d-\udd0f\udd2f\udd6c-\udd6f\uddad-\udde5\ude03-\ude0f\ude3c-\ude3f\ude49-\ude4f\ude52-\ude5f\ude66-\udeff]|\ud83d[\uded5-\udedf\udeed-\udeef\udef9-\udeff\udf74-\udf7f\udfd5-\udfff]|\ud83e[\udc0c-\udc0f\udc48-\udc4f\udc5a-\udc5f\udc88-\udc8f\udcae-\udcff\udd0c-\udd0f\udd3f\udd4d-\udd4f\udd6c-\udd7f\udd98-\uddbf\uddc1-\uddcf\udde7-\udfff]|\ud869[\uded7-\udeff]|\ud86d[\udf35-\udf3f]|\ud86e[\udc1e\udc1f]|\ud873[\udea2-\udeaf]|\ud87a[\udfe1-\udfff]|\ud87e[\ude1e-\udfff]|\udb40[\udc00\udc02-\udc1f\udc80-\udcff\uddf0-\udfff]|[\udbbf\udbff][\udffe\udfff]"},{name:"Co",alias:"Private_Use",bmp:"-",astral:"[\udb80-\udbbe\udbc0-\udbfe][\udc00-\udfff]|[\udbbf\udbff][\udc00-\udffd]"},{name:"Cs",alias:"Surrogate",bmp:"\ud800-\udfff"},{name:"L",alias:"Letter",bmp:"A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢄᢇ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄮㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿪ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",astral:"\ud800[\udc00-\udc0b\udc0d-\udc26\udc28-\udc3a\udc3c\udc3d\udc3f-\udc4d\udc50-\udc5d\udc80-\udcfa\ude80-\ude9c\udea0-\uded0\udf00-\udf1f\udf2d-\udf40\udf42-\udf49\udf50-\udf75\udf80-\udf9d\udfa0-\udfc3\udfc8-\udfcf]|\ud801[\udc00-\udc9d\udcb0-\udcd3\udcd8-\udcfb\udd00-\udd27\udd30-\udd63\ude00-\udf36\udf40-\udf55\udf60-\udf67]|\ud802[\udc00-\udc05\udc08\udc0a-\udc35\udc37\udc38\udc3c\udc3f-\udc55\udc60-\udc76\udc80-\udc9e\udce0-\udcf2\udcf4\udcf5\udd00-\udd15\udd20-\udd39\udd80-\uddb7\uddbe\uddbf\ude00\ude10-\ude13\ude15-\ude17\ude19-\ude33\ude60-\ude7c\ude80-\ude9c\udec0-\udec7\udec9-\udee4\udf00-\udf35\udf40-\udf55\udf60-\udf72\udf80-\udf91]|\ud803[\udc00-\udc48\udc80-\udcb2\udcc0-\udcf2]|\ud804[\udc03-\udc37\udc83-\udcaf\udcd0-\udce8\udd03-\udd26\udd50-\udd72\udd76\udd83-\uddb2\uddc1-\uddc4\uddda\udddc\ude00-\ude11\ude13-\ude2b\ude80-\ude86\ude88\ude8a-\ude8d\ude8f-\ude9d\ude9f-\udea8\udeb0-\udede\udf05-\udf0c\udf0f\udf10\udf13-\udf28\udf2a-\udf30\udf32\udf33\udf35-\udf39\udf3d\udf50\udf5d-\udf61]|\ud805[\udc00-\udc34\udc47-\udc4a\udc80-\udcaf\udcc4\udcc5\udcc7\udd80-\uddae\uddd8-\udddb\ude00-\ude2f\ude44\ude80-\udeaa\udf00-\udf19]|\ud806[\udca0-\udcdf\udcff\ude00\ude0b-\ude32\ude3a\ude50\ude5c-\ude83\ude86-\ude89\udec0-\udef8]|\ud807[\udc00-\udc08\udc0a-\udc2e\udc40\udc72-\udc8f\udd00-\udd06\udd08\udd09\udd0b-\udd30\udd46]|\ud808[\udc00-\udf99]|\ud809[\udc80-\udd43]|[\ud80c\ud81c-\ud820\ud840-\ud868\ud86a-\ud86c\ud86f-\ud872\ud874-\ud879][\udc00-\udfff]|\ud80d[\udc00-\udc2e]|\ud811[\udc00-\ude46]|\ud81a[\udc00-\ude38\ude40-\ude5e\uded0-\udeed\udf00-\udf2f\udf40-\udf43\udf63-\udf77\udf7d-\udf8f]|\ud81b[\udf00-\udf44\udf50\udf93-\udf9f\udfe0\udfe1]|\ud821[\udc00-\udfec]|\ud822[\udc00-\udef2]|\ud82c[\udc00-\udd1e\udd70-\udefb]|\ud82f[\udc00-\udc6a\udc70-\udc7c\udc80-\udc88\udc90-\udc99]|\ud835[\udc00-\udc54\udc56-\udc9c\udc9e\udc9f\udca2\udca5\udca6\udca9-\udcac\udcae-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd1e-\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd52-\udea5\udea8-\udec0\udec2-\udeda\udedc-\udefa\udefc-\udf14\udf16-\udf34\udf36-\udf4e\udf50-\udf6e\udf70-\udf88\udf8a-\udfa8\udfaa-\udfc2\udfc4-\udfcb]|\ud83a[\udc00-\udcc4\udd00-\udd43]|\ud83b[\ude00-\ude03\ude05-\ude1f\ude21\ude22\ude24\ude27\ude29-\ude32\ude34-\ude37\ude39\ude3b\ude42\ude47\ude49\ude4b\ude4d-\ude4f\ude51\ude52\ude54\ude57\ude59\ude5b\ude5d\ude5f\ude61\ude62\ude64\ude67-\ude6a\ude6c-\ude72\ude74-\ude77\ude79-\ude7c\ude7e\ude80-\ude89\ude8b-\ude9b\udea1-\udea3\udea5-\udea9\udeab-\udebb]|\ud869[\udc00-\uded6\udf00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d\udc20-\udfff]|\ud873[\udc00-\udea1\udeb0-\udfff]|\ud87a[\udc00-\udfe0]|\ud87e[\udc00-\ude1d]"},{name:"LC",alias:"Cased_Letter",bmp:"A-Za-zµÀ-ÖØ-öø-ƺƼ-ƿǄ-ʓʕ-ʯͰ-ͳͶͷͻ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆա-ևႠ-ჅჇჍᎠ-Ᏽᏸ-ᏽᲀ-ᲈᴀ-ᴫᵫ-ᵷᵹ-ᶚḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℴℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⱻⱾ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭꙀ-ꙭꚀ-ꚛꜢ-ꝯꝱ-ꞇꞋ-ꞎꞐ-ꞮꞰ-ꞷꟺꬰ-ꭚꭠ-ꭥꭰ-ꮿﬀ-ﬆﬓ-ﬗＡ-Ｚａ-ｚ",astral:"\ud801[\udc00-\udc4f\udcb0-\udcd3\udcd8-\udcfb]|\ud803[\udc80-\udcb2\udcc0-\udcf2]|\ud806[\udca0-\udcdf]|\ud835[\udc00-\udc54\udc56-\udc9c\udc9e\udc9f\udca2\udca5\udca6\udca9-\udcac\udcae-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd1e-\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd52-\udea5\udea8-\udec0\udec2-\udeda\udedc-\udefa\udefc-\udf14\udf16-\udf34\udf36-\udf4e\udf50-\udf6e\udf70-\udf88\udf8a-\udfa8\udfaa-\udfc2\udfc4-\udfcb]|\ud83a[\udd00-\udd43]"},{name:"Ll",alias:"Lowercase_Letter",bmp:"a-zµß-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž-ƀƃƅƈƌƍƒƕƙ-ƛƞơƣƥƨƪƫƭưƴƶƹƺƽ-ƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳ-ȹȼȿɀɂɇɉɋɍɏ-ʓʕ-ʯͱͳͷͻ-ͽΐά-ώϐϑϕ-ϗϙϛϝϟϡϣϥϧϩϫϭϯ-ϳϵϸϻϼа-џѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯա-ևᏸ-ᏽᲀ-ᲈᴀ-ᴫᵫ-ᵷᵹ-ᶚḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕ-ẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷιῂ-ῄῆῇῐ-ΐῖῗῠ-ῧῲ-ῴῶῷℊℎℏℓℯℴℹℼℽⅆ-ⅉⅎↄⰰ-ⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶ-ⱻⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⳬⳮⳳⴀ-ⴥⴧⴭꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛꜣꜥꜧꜩꜫꜭꜯ-ꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯꝱ-ꝸꝺꝼꝿꞁꞃꞅꞇꞌꞎꞑꞓ-ꞕꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩꞵꞷꟺꬰ-ꭚꭠ-ꭥꭰ-ꮿﬀ-ﬆﬓ-ﬗａ-ｚ",astral:"\ud801[\udc28-\udc4f\udcd8-\udcfb]|\ud803[\udcc0-\udcf2]|\ud806[\udcc0-\udcdf]|\ud835[\udc1a-\udc33\udc4e-\udc54\udc56-\udc67\udc82-\udc9b\udcb6-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udccf\udcea-\udd03\udd1e-\udd37\udd52-\udd6b\udd86-\udd9f\uddba-\uddd3\uddee-\ude07\ude22-\ude3b\ude56-\ude6f\ude8a-\udea5\udec2-\udeda\udedc-\udee1\udefc-\udf14\udf16-\udf1b\udf36-\udf4e\udf50-\udf55\udf70-\udf88\udf8a-\udf8f\udfaa-\udfc2\udfc4-\udfc9\udfcb]|\ud83a[\udd22-\udd43]"},{name:"Lm",alias:"Modifier_Letter",bmp:"ʰ-ˁˆ-ˑˠ-ˤˬˮʹͺՙـۥۦߴߵߺࠚࠤࠨॱๆໆჼៗᡃᪧᱸ-ᱽᴬ-ᵪᵸᶛ-ᶿⁱⁿₐ-ₜⱼⱽⵯⸯ々〱-〵〻ゝゞー-ヾꀕꓸ-ꓽꘌꙿꚜꚝꜗ-ꜟꝰꞈꟸꟹꧏꧦꩰꫝꫳꫴꭜ-ꭟｰﾞﾟ",astral:"\ud81a[\udf40-\udf43]|\ud81b[\udf93-\udf9f\udfe0\udfe1]"},{name:"Lo",alias:"Other_Letter",bmp:"ªºƻǀ-ǃʔא-תװ-ײؠ-ؿف-يٮٯٱ-ۓەۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪࠀ-ࠕࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽऄ-हऽॐक़-ॡॲ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱৼਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಀಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൔ-ൖൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๅກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎა-ჺჽ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៜᠠ-ᡂᡄ-ᡷᢀ-ᢄᢇ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱷᳩ-ᳬᳮ-ᳱᳵᳶℵ-ℸⴰ-ⵧⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞ〆〼ぁ-ゖゟァ-ヺヿㄅ-ㄮㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿪ꀀ-ꀔꀖ-ꒌꓐ-ꓷꔀ-ꘋꘐ-ꘟꘪꘫꙮꚠ-ꛥꞏꟷꟻ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧠ-ꧤꧧ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩯꩱ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛꫜꫠ-ꫪꫲꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꯀ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎יִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼｦ-ｯｱ-ﾝﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",astral:"\ud800[\udc00-\udc0b\udc0d-\udc26\udc28-\udc3a\udc3c\udc3d\udc3f-\udc4d\udc50-\udc5d\udc80-\udcfa\ude80-\ude9c\udea0-\uded0\udf00-\udf1f\udf2d-\udf40\udf42-\udf49\udf50-\udf75\udf80-\udf9d\udfa0-\udfc3\udfc8-\udfcf]|\ud801[\udc50-\udc9d\udd00-\udd27\udd30-\udd63\ude00-\udf36\udf40-\udf55\udf60-\udf67]|\ud802[\udc00-\udc05\udc08\udc0a-\udc35\udc37\udc38\udc3c\udc3f-\udc55\udc60-\udc76\udc80-\udc9e\udce0-\udcf2\udcf4\udcf5\udd00-\udd15\udd20-\udd39\udd80-\uddb7\uddbe\uddbf\ude00\ude10-\ude13\ude15-\ude17\ude19-\ude33\ude60-\ude7c\ude80-\ude9c\udec0-\udec7\udec9-\udee4\udf00-\udf35\udf40-\udf55\udf60-\udf72\udf80-\udf91]|\ud803[\udc00-\udc48]|\ud804[\udc03-\udc37\udc83-\udcaf\udcd0-\udce8\udd03-\udd26\udd50-\udd72\udd76\udd83-\uddb2\uddc1-\uddc4\uddda\udddc\ude00-\ude11\ude13-\ude2b\ude80-\ude86\ude88\ude8a-\ude8d\ude8f-\ude9d\ude9f-\udea8\udeb0-\udede\udf05-\udf0c\udf0f\udf10\udf13-\udf28\udf2a-\udf30\udf32\udf33\udf35-\udf39\udf3d\udf50\udf5d-\udf61]|\ud805[\udc00-\udc34\udc47-\udc4a\udc80-\udcaf\udcc4\udcc5\udcc7\udd80-\uddae\uddd8-\udddb\ude00-\ude2f\ude44\ude80-\udeaa\udf00-\udf19]|\ud806[\udcff\ude00\ude0b-\ude32\ude3a\ude50\ude5c-\ude83\ude86-\ude89\udec0-\udef8]|\ud807[\udc00-\udc08\udc0a-\udc2e\udc40\udc72-\udc8f\udd00-\udd06\udd08\udd09\udd0b-\udd30\udd46]|\ud808[\udc00-\udf99]|\ud809[\udc80-\udd43]|[\ud80c\ud81c-\ud820\ud840-\ud868\ud86a-\ud86c\ud86f-\ud872\ud874-\ud879][\udc00-\udfff]|\ud80d[\udc00-\udc2e]|\ud811[\udc00-\ude46]|\ud81a[\udc00-\ude38\ude40-\ude5e\uded0-\udeed\udf00-\udf2f\udf63-\udf77\udf7d-\udf8f]|\ud81b[\udf00-\udf44\udf50]|\ud821[\udc00-\udfec]|\ud822[\udc00-\udef2]|\ud82c[\udc00-\udd1e\udd70-\udefb]|\ud82f[\udc00-\udc6a\udc70-\udc7c\udc80-\udc88\udc90-\udc99]|\ud83a[\udc00-\udcc4]|\ud83b[\ude00-\ude03\ude05-\ude1f\ude21\ude22\ude24\ude27\ude29-\ude32\ude34-\ude37\ude39\ude3b\ude42\ude47\ude49\ude4b\ude4d-\ude4f\ude51\ude52\ude54\ude57\ude59\ude5b\ude5d\ude5f\ude61\ude62\ude64\ude67-\ude6a\ude6c-\ude72\ude74-\ude77\ude79-\ude7c\ude7e\ude80-\ude89\ude8b-\ude9b\udea1-\udea3\udea5-\udea9\udeab-\udebb]|\ud869[\udc00-\uded6\udf00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d\udc20-\udfff]|\ud873[\udc00-\udea1\udeb0-\udfff]|\ud87a[\udc00-\udfe0]|\ud87e[\udc00-\ude1d]"},{name:"Lt",alias:"Titlecase_Letter",bmp:"ǅǈǋǲᾈ-ᾏᾘ-ᾟᾨ-ᾯᾼῌῼ"},{name:"Lu",alias:"Uppercase_Letter",bmp:"A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃ-ɆɈɊɌɎͰͲͶͿΆΈ-ΊΌΎΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԤԦԨԪԬԮԱ-ՖႠ-ჅჇჍᎠ-ᏵḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾℿⅅↃⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾ-ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢⳫⳭⳲꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙠꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꚘꚚꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋꞍꞐꞒꞖꞘꞚꞜꞞꞠꞢꞤꞦꞨꞪ-ꞮꞰ-ꞴꞶＡ-Ｚ",astral:"\ud801[\udc00-\udc27\udcb0-\udcd3]|\ud803[\udc80-\udcb2]|\ud806[\udca0-\udcbf]|\ud835[\udc00-\udc19\udc34-\udc4d\udc68-\udc81\udc9c\udc9e\udc9f\udca2\udca5\udca6\udca9-\udcac\udcae-\udcb5\udcd0-\udce9\udd04\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd38\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd6c-\udd85\udda0-\uddb9\uddd4-\udded\ude08-\ude21\ude3c-\ude55\ude70-\ude89\udea8-\udec0\udee2-\udefa\udf1c-\udf34\udf56-\udf6e\udf90-\udfa8\udfca]|\ud83a[\udd00-\udd21]"},{name:"M",alias:"Mark",bmp:"̀-ͯ҃-҉֑-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ःऺ-़ा-ॏ॑-ॗॢॣঁ-ঃ়া-ৄেৈো-্ৗৢৣਁ-ਃ਼ਾ-ੂੇੈੋ-੍ੑੰੱੵઁ-ઃ઼ા-ૅે-ૉો-્ૢૣૺ-૿ଁ-ଃ଼ା-ୄେୈୋ-୍ୖୗୢୣஂா-ூெ-ைொ-்ௗఀ-ఃా-ౄె-ైొ-్ౕౖౢౣಁ-ಃ಼ಾ-ೄೆ-ೈೊ-್ೕೖೢೣഀ-ഃ഻഼ാ-ൄെ-ൈൊ-്ൗൢൣංඃ්ා-ුූෘ-ෟෲෳัิ-ฺ็-๎ັິ-ູົຼ່-ໍ༹༘༙༵༷༾༿ཱ-྄྆྇ྍ-ྗྙ-ྼ࿆ါ-ှၖ-ၙၞ-ၠၢ-ၤၧ-ၭၱ-ၴႂ-ႍႏႚ-ႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤫᤰ-᤻ᨗ-ᨛᩕ-ᩞ᩠-᩿᩼᪰-᪾ᬀ-ᬄ᬴-᭄᭫-᭳ᮀ-ᮂᮡ-ᮭ᯦-᯳ᰤ-᰷᳐-᳔᳒-᳨᳭ᳲ-᳴᳷-᳹᷀-᷹᷻-᷿⃐-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〯꙯-꙲ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠣ-ꠧꢀꢁꢴ-ꣅ꣠-꣱ꤦ-꤭ꥇ-꥓ꦀ-ꦃ꦳-꧀ꧥꨩ-ꨶꩃꩌꩍꩻ-ꩽꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫫ-ꫯꫵ꫶ꯣ-ꯪ꯬꯭ﬞ︀-️︠-︯",astral:"\ud800[\uddfd\udee0\udf76-\udf7a]|\ud802[\ude01-\ude03\ude05\ude06\ude0c-\ude0f\ude38-\ude3a\ude3f\udee5\udee6]|\ud804[\udc00-\udc02\udc38-\udc46\udc7f-\udc82\udcb0-\udcba\udd00-\udd02\udd27-\udd34\udd73\udd80-\udd82\uddb3-\uddc0\uddca-\uddcc\ude2c-\ude37\ude3e\udedf-\udeea\udf00-\udf03\udf3c\udf3e-\udf44\udf47\udf48\udf4b-\udf4d\udf57\udf62\udf63\udf66-\udf6c\udf70-\udf74]|\ud805[\udc35-\udc46\udcb0-\udcc3\uddaf-\uddb5\uddb8-\uddc0\udddc\udddd\ude30-\ude40\udeab-\udeb7\udf1d-\udf2b]|\ud806[\ude01-\ude0a\ude33-\ude39\ude3b-\ude3e\ude47\ude51-\ude5b\ude8a-\ude99]|\ud807[\udc2f-\udc36\udc38-\udc3f\udc92-\udca7\udca9-\udcb6\udd31-\udd36\udd3a\udd3c\udd3d\udd3f-\udd45\udd47]|\ud81a[\udef0-\udef4\udf30-\udf36]|\ud81b[\udf51-\udf7e\udf8f-\udf92]|\ud82f[\udc9d\udc9e]|\ud834[\udd65-\udd69\udd6d-\udd72\udd7b-\udd82\udd85-\udd8b\uddaa-\uddad\ude42-\ude44]|\ud836[\ude00-\ude36\ude3b-\ude6c\ude75\ude84\ude9b-\ude9f\udea1-\udeaf]|\ud838[\udc00-\udc06\udc08-\udc18\udc1b-\udc21\udc23\udc24\udc26-\udc2a]|\ud83a[\udcd0-\udcd6\udd44-\udd4a]|\udb40[\udd00-\uddef]"},{name:"Mc",alias:"Spacing_Mark",bmp:"ःऻा-ीॉ-ौॎॏংঃা-ীেৈোৌৗਃਾ-ੀઃા-ીૉોૌଂଃାୀେୈୋୌୗாிுூெ-ைொ-ௌௗఁ-ఃు-ౄಂಃಾೀ-ೄೇೈೊೋೕೖംഃാ-ീെ-ൈൊ-ൌൗංඃා-ෑෘ-ෟෲෳ༾༿ཿါာေးျြၖၗၢ-ၤၧ-ၭႃႄႇ-ႌႏႚ-ႜាើ-ៅះៈᤣ-ᤦᤩ-ᤫᤰᤱᤳ-ᤸᨙᨚᩕᩗᩡᩣᩤᩭ-ᩲᬄᬵᬻᬽ-ᭁᭃ᭄ᮂᮡᮦᮧ᮪ᯧᯪ-ᯬᯮ᯲᯳ᰤ-ᰫᰴᰵ᳡ᳲᳳ᳷〮〯ꠣꠤꠧꢀꢁꢴ-ꣃꥒ꥓ꦃꦴꦵꦺꦻꦽ-꧀ꨯꨰꨳꨴꩍꩻꩽꫫꫮꫯꫵꯣꯤꯦꯧꯩꯪ꯬",astral:"\ud804[\udc00\udc02\udc82\udcb0-\udcb2\udcb7\udcb8\udd2c\udd82\uddb3-\uddb5\uddbf\uddc0\ude2c-\ude2e\ude32\ude33\ude35\udee0-\udee2\udf02\udf03\udf3e\udf3f\udf41-\udf44\udf47\udf48\udf4b-\udf4d\udf57\udf62\udf63]|\ud805[\udc35-\udc37\udc40\udc41\udc45\udcb0-\udcb2\udcb9\udcbb-\udcbe\udcc1\uddaf-\uddb1\uddb8-\uddbb\uddbe\ude30-\ude32\ude3b\ude3c\ude3e\udeac\udeae\udeaf\udeb6\udf20\udf21\udf26]|\ud806[\ude07\ude08\ude39\ude57\ude58\ude97]|\ud807[\udc2f\udc3e\udca9\udcb1\udcb4]|\ud81b[\udf51-\udf7e]|\ud834[\udd65\udd66\udd6d-\udd72]"},{name:"Me",alias:"Enclosing_Mark",bmp:"҈҉᪾⃝-⃠⃢-⃤꙰-꙲"},{name:"Mn",alias:"Nonspacing_Mark",bmp:"̀-ͯ҃-֑҇-ׇֽֿׁׂׅׄؐ-ًؚ-ٰٟۖ-ۜ۟-۪ۤۧۨ-ܑۭܰ-݊ަ-ް߫-߳ࠖ-࠙ࠛ-ࠣࠥ-ࠧࠩ-࡙࠭-࡛ࣔ-ࣣ࣡-ंऺ़ु-ै्॑-ॗॢॣঁ়ু-ৄ্ৢৣਁਂ਼ੁੂੇੈੋ-੍ੑੰੱੵઁં઼ુ-ૅેૈ્ૢૣૺ-૿ଁ଼ିୁ-ୄ୍ୖୢୣஂீ்ఀా-ీె-ైొ-్ౕౖౢౣಁ಼ಿೆೌ್ೢೣഀഁ഻഼ു-ൄ്ൢൣ්ි-ුූัิ-ฺ็-๎ັິ-ູົຼ່-ໍཱ༹༘༙༵༷-ཾྀ-྄྆྇ྍ-ྗྙ-ྼ࿆ိ-ူဲ-့္်ွှၘၙၞ-ၠၱ-ၴႂႅႆႍႝ፝-፟ᜒ-᜔ᜲ-᜴ᝒᝓᝲᝳ឴឵ិ-ួំ៉-៓៝᠋-᠍ᢅᢆᢩᤠ-ᤢᤧᤨᤲ᤹-᤻ᨘᨗᨛᩖᩘ-ᩞ᩠ᩢᩥ-ᩬᩳ-᩿᩼᪰-᪽ᬀ-ᬃ᬴ᬶ-ᬺᬼᭂ᭫-᭳ᮀᮁᮢ-ᮥᮨᮩ᮫-ᮭ᯦ᯨᯩᯭᯯ-ᯱᰬ-ᰳᰶ᰷᳐-᳔᳒-᳢᳠-᳨᳭᳴᳸᳹᷀-᷹᷻-᷿⃐-⃥⃜⃡-⃰⳯-⵿⳱ⷠ-〪ⷿ-゙゚〭꙯ꙴ-꙽ꚞꚟ꛰꛱ꠂ꠆ꠋꠥꠦ꣄ꣅ꣠-꣱ꤦ-꤭ꥇ-ꥑꦀ-ꦂ꦳ꦶ-ꦹꦼꧥꨩ-ꨮꨱꨲꨵꨶꩃꩌꩼꪰꪲ-ꪴꪷꪸꪾ꪿꫁ꫬꫭ꫶ꯥꯨ꯭ﬞ︀-️︠-︯",astral:"\ud800[\uddfd\udee0\udf76-\udf7a]|\ud802[\ude01-\ude03\ude05\ude06\ude0c-\ude0f\ude38-\ude3a\ude3f\udee5\udee6]|\ud804[\udc01\udc38-\udc46\udc7f-\udc81\udcb3-\udcb6\udcb9\udcba\udd00-\udd02\udd27-\udd2b\udd2d-\udd34\udd73\udd80\udd81\uddb6-\uddbe\uddca-\uddcc\ude2f-\ude31\ude34\ude36\ude37\ude3e\udedf\udee3-\udeea\udf00\udf01\udf3c\udf40\udf66-\udf6c\udf70-\udf74]|\ud805[\udc38-\udc3f\udc42-\udc44\udc46\udcb3-\udcb8\udcba\udcbf\udcc0\udcc2\udcc3\uddb2-\uddb5\uddbc\uddbd\uddbf\uddc0\udddc\udddd\ude33-\ude3a\ude3d\ude3f\ude40\udeab\udead\udeb0-\udeb5\udeb7\udf1d-\udf1f\udf22-\udf25\udf27-\udf2b]|\ud806[\ude01-\ude06\ude09\ude0a\ude33-\ude38\ude3b-\ude3e\ude47\ude51-\ude56\ude59-\ude5b\ude8a-\ude96\ude98\ude99]|\ud807[\udc30-\udc36\udc38-\udc3d\udc3f\udc92-\udca7\udcaa-\udcb0\udcb2\udcb3\udcb5\udcb6\udd31-\udd36\udd3a\udd3c\udd3d\udd3f-\udd45\udd47]|\ud81a[\udef0-\udef4\udf30-\udf36]|\ud81b[\udf8f-\udf92]|\ud82f[\udc9d\udc9e]|\ud834[\udd67-\udd69\udd7b-\udd82\udd85-\udd8b\uddaa-\uddad\ude42-\ude44]|\ud836[\ude00-\ude36\ude3b-\ude6c\ude75\ude84\ude9b-\ude9f\udea1-\udeaf]|\ud838[\udc00-\udc06\udc08-\udc18\udc1b-\udc21\udc23\udc24\udc26-\udc2a]|\ud83a[\udcd0-\udcd6\udd44-\udd4a]|\udb40[\udd00-\uddef]"},{name:"N",alias:"Number",bmp:"0-9²³¹¼-¾٠-٩۰-۹߀-߉०-९০-৯৴-৹੦-੯૦-૯୦-୯୲-୷௦-௲౦-౯౸-౾೦-೯൘-൞൦-൸෦-෯๐-๙໐-໙༠-༳၀-၉႐-႙፩-፼ᛮ-ᛰ០-៩៰-៹᠐-᠙᥆-᥏᧐-᧚᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙⁰⁴-⁹₀-₉⅐-ↂↅ-↉①-⒛⓪-⓿❶-➓⳽〇〡-〩〸-〺㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꘠-꘩ꛦ-ꛯ꠰-꠵꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９",astral:"\ud800[\udd07-\udd33\udd40-\udd78\udd8a\udd8b\udee1-\udefb\udf20-\udf23\udf41\udf4a\udfd1-\udfd5]|\ud801[\udca0-\udca9]|\ud802[\udc58-\udc5f\udc79-\udc7f\udca7-\udcaf\udcfb-\udcff\udd16-\udd1b\uddbc\uddbd\uddc0-\uddcf\uddd2-\uddff\ude40-\ude47\ude7d\ude7e\ude9d-\ude9f\udeeb-\udeef\udf58-\udf5f\udf78-\udf7f\udfa9-\udfaf]|\ud803[\udcfa-\udcff\ude60-\ude7e]|\ud804[\udc52-\udc6f\udcf0-\udcf9\udd36-\udd3f\uddd0-\uddd9\udde1-\uddf4\udef0-\udef9]|\ud805[\udc50-\udc59\udcd0-\udcd9\ude50-\ude59\udec0-\udec9\udf30-\udf3b]|\ud806[\udce0-\udcf2]|\ud807[\udc50-\udc6c\udd50-\udd59]|\ud809[\udc00-\udc6e]|\ud81a[\ude60-\ude69\udf50-\udf59\udf5b-\udf61]|\ud834[\udf60-\udf71]|\ud835[\udfce-\udfff]|\ud83a[\udcc7-\udccf\udd50-\udd59]|\ud83c[\udd00-\udd0c]"},{name:"Nd",alias:"Decimal_Number",bmp:"0-9٠-٩۰-۹߀-߉०-९০-৯੦-੯૦-૯୦-୯௦-௯౦-౯೦-೯൦-൯෦-෯๐-๙໐-໙༠-༩၀-၉႐-႙០-៩᠐-᠙᥆-᥏᧐-᧙᪀-᪉᪐-᪙᭐-᭙᮰-᮹᱀-᱉᱐-᱙꘠-꘩꣐-꣙꤀-꤉꧐-꧙꧰-꧹꩐-꩙꯰-꯹０-９",astral:"\ud801[\udca0-\udca9]|\ud804[\udc66-\udc6f\udcf0-\udcf9\udd36-\udd3f\uddd0-\uddd9\udef0-\udef9]|\ud805[\udc50-\udc59\udcd0-\udcd9\ude50-\ude59\udec0-\udec9\udf30-\udf39]|\ud806[\udce0-\udce9]|\ud807[\udc50-\udc59\udd50-\udd59]|\ud81a[\ude60-\ude69\udf50-\udf59]|\ud835[\udfce-\udfff]|\ud83a[\udd50-\udd59]"},{name:"Nl",alias:"Letter_Number",bmp:"ᛮ-ᛰⅠ-ↂↅ-ↈ〇〡-〩〸-〺ꛦ-ꛯ",astral:"\ud800[\udd40-\udd74\udf41\udf4a\udfd1-\udfd5]|\ud809[\udc00-\udc6e]"},{name:"No",alias:"Other_Number",bmp:"²³¹¼-¾৴-৹୲-୷௰-௲౸-౾൘-൞൰-൸༪-༳፩-፼៰-៹᧚⁰⁴-⁹₀-₉⅐-⅟↉①-⒛⓪-⓿❶-➓⳽㆒-㆕㈠-㈩㉈-㉏㉑-㉟㊀-㊉㊱-㊿꠰-꠵",astral:"\ud800[\udd07-\udd33\udd75-\udd78\udd8a\udd8b\udee1-\udefb\udf20-\udf23]|\ud802[\udc58-\udc5f\udc79-\udc7f\udca7-\udcaf\udcfb-\udcff\udd16-\udd1b\uddbc\uddbd\uddc0-\uddcf\uddd2-\uddff\ude40-\ude47\ude7d\ude7e\ude9d-\ude9f\udeeb-\udeef\udf58-\udf5f\udf78-\udf7f\udfa9-\udfaf]|\ud803[\udcfa-\udcff\ude60-\ude7e]|\ud804[\udc52-\udc65\udde1-\uddf4]|\ud805[\udf3a\udf3b]|\ud806[\udcea-\udcf2]|\ud807[\udc5a-\udc6c]|\ud81a[\udf5b-\udf61]|\ud834[\udf60-\udf71]|\ud83a[\udcc7-\udccf]|\ud83c[\udd00-\udd0c]"},{name:"P",alias:"Punctuation",bmp:"!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}¡§«¶·»¿;·՚-՟։֊־׀׃׆׳״؉؊،؍؛؞؟٪-٭۔܀-܍߷-߹࠰-࠾࡞।॥॰৽૰෴๏๚๛༄-༒༔༺-༽྅࿐-࿔࿙࿚၊-၏჻፠-፨᐀᙭᙮᚛᚜᛫-᛭᜵᜶។-៖៘-៚᠀-᠊᥄᥅᨞᨟᪠-᪦᪨-᪭᭚-᭠᯼-᯿᰻-᰿᱾᱿᳀-᳇᳓‐-‧‰-⁃⁅-⁑⁓-⁞⁽⁾₍₎⌈-⌋〈〉❨-❵⟅⟆⟦-⟯⦃-⦘⧘-⧛⧼⧽⳹-⳼⳾⳿⵰⸀-⸮⸰-⹉、-〃〈-】〔-〟〰〽゠・꓾꓿꘍-꘏꙳꙾꛲-꛷꡴-꡷꣎꣏꣸-꣺꣼꤮꤯꥟꧁-꧍꧞꧟꩜-꩟꫞꫟꫰꫱꯫﴾﴿︐-︙︰-﹒﹔-﹡﹣﹨﹪﹫！-＃％-＊，-／：；？＠［-］＿｛｝｟-･",astral:"\ud800[\udd00-\udd02\udf9f\udfd0]|𐕯|\ud802[\udc57\udd1f\udd3f\ude50-\ude58\ude7f\udef0-\udef6\udf39-\udf3f\udf99-\udf9c]|\ud804[\udc47-\udc4d\udcbb\udcbc\udcbe-\udcc1\udd40-\udd43\udd74\udd75\uddc5-\uddc9\uddcd\udddb\udddd-\udddf\ude38-\ude3d\udea9]|\ud805[\udc4b-\udc4f\udc5b\udc5d\udcc6\uddc1-\uddd7\ude41-\ude43\ude60-\ude6c\udf3c-\udf3e]|\ud806[\ude3f-\ude46\ude9a-\ude9c\ude9e-\udea2]|\ud807[\udc41-\udc45\udc70\udc71]|\ud809[\udc70-\udc74]|\ud81a[\ude6e\ude6f\udef5\udf37-\udf3b\udf44]|𛲟|\ud836[\ude87-\ude8b]|\ud83a[\udd5e\udd5f]"},{name:"Pc",alias:"Connector_Punctuation",bmp:"_‿⁀⁔︳︴﹍-﹏＿"},{name:"Pd",alias:"Dash_Punctuation",bmp:"\\-֊־᐀᠆‐-―⸗⸚⸺⸻⹀〜〰゠︱︲﹘﹣－"},{name:"Pe",alias:"Close_Punctuation",bmp:"\\)\\]\\}༻༽᚜⁆⁾₎⌉⌋〉❩❫❭❯❱❳❵⟆⟧⟩⟫⟭⟯⦄⦆⦈⦊⦌⦎⦐⦒⦔⦖⦘⧙⧛⧽⸣⸥⸧⸩〉》」』】〕〗〙〛〞〟﴾︘︶︸︺︼︾﹀﹂﹄﹈﹚﹜﹞）］｝｠｣"},{name:"Pf",alias:"Final_Punctuation",bmp:"»’”›⸃⸅⸊⸍⸝⸡"},{name:"Pi",alias:"Initial_Punctuation",bmp:"«‘‛“‟‹⸂⸄⸉⸌⸜⸠"},{name:"Po",alias:"Other_Punctuation",bmp:"!-#%-'\\*,\\.\\/:;\\?@\\¡§¶·¿;·՚-՟։׀׃׆׳״؉؊،؍؛؞؟٪-٭۔܀-܍߷-߹࠰-࠾࡞।॥॰৽૰෴๏๚๛༄-༒༔྅࿐-࿔࿙࿚၊-၏჻፠-፨᙭᙮᛫-᛭᜵᜶។-៖៘-៚᠀-᠅᠇-᠊᥄᥅᨞᨟᪠-᪦᪨-᪭᭚-᭠᯼-᯿᰻-᰿᱾᱿᳀-᳇᳓‖‗†-‧‰-‸※-‾⁁-⁃⁇-⁑⁓⁕-⁞⳹-⳼⳾⳿⵰⸀⸁⸆-⸈⸋⸎-⸖⸘⸙⸛⸞⸟⸪-⸮⸰-⸹⸼-⸿⹁⹃-⹉、-〃〽・꓾꓿꘍-꘏꙳꙾꛲-꛷꡴-꡷꣎꣏꣸-꣺꣼꤮꤯꥟꧁-꧍꧞꧟꩜-꩟꫞꫟꫰꫱꯫︐-︖︙︰﹅﹆﹉-﹌﹐-﹒﹔-﹗﹟-﹡﹨﹪﹫！-＃％-＇＊，．／：；？＠＼｡､･",astral:"\ud800[\udd00-\udd02\udf9f\udfd0]|𐕯|\ud802[\udc57\udd1f\udd3f\ude50-\ude58\ude7f\udef0-\udef6\udf39-\udf3f\udf99-\udf9c]|\ud804[\udc47-\udc4d\udcbb\udcbc\udcbe-\udcc1\udd40-\udd43\udd74\udd75\uddc5-\uddc9\uddcd\udddb\udddd-\udddf\ude38-\ude3d\udea9]|\ud805[\udc4b-\udc4f\udc5b\udc5d\udcc6\uddc1-\uddd7\ude41-\ude43\ude60-\ude6c\udf3c-\udf3e]|\ud806[\ude3f-\ude46\ude9a-\ude9c\ude9e-\udea2]|\ud807[\udc41-\udc45\udc70\udc71]|\ud809[\udc70-\udc74]|\ud81a[\ude6e\ude6f\udef5\udf37-\udf3b\udf44]|𛲟|\ud836[\ude87-\ude8b]|\ud83a[\udd5e\udd5f]"},{name:"Ps",alias:"Open_Punctuation",bmp:"\\(\\[\\{༺༼᚛‚„⁅⁽₍⌈⌊〈❨❪❬❮❰❲❴⟅⟦⟨⟪⟬⟮⦃⦅⦇⦉⦋⦍⦏⦑⦓⦕⦗⧘⧚⧼⸢⸤⸦⸨⹂〈《「『【〔〖〘〚〝﴿︗︵︷︹︻︽︿﹁﹃﹇﹙﹛﹝（［｛｟｢"},{name:"S",alias:"Symbol",bmp:"\\$\\+<->\\^`\\|~¢-¦¨©¬®-±´¸×÷˂-˅˒-˟˥-˫˭˯-˿͵΄΅϶҂֍-֏؆-؈؋؎؏۞۩۽۾߶৲৳৺৻૱୰௳-௺౿൏൹฿༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙៛᥀᧞-᧿᭡-᭪᭴-᭼᾽᾿-῁῍-῏῝-῟῭-`´῾⁄⁒⁺-⁼₊-₌₠-₿℀℁℃-℆℈℉℔№-℘℞-℣℥℧℩℮℺℻⅀-⅄⅊-⅍⅏↊↋←-⌇⌌-⌨⌫-␦⑀-⑊⒜-ⓩ─-❧➔-⟄⟇-⟥⟰-⦂⦙-⧗⧜-⧻⧾-⭳⭶-⮕⮘-⮹⮽-⯈⯊-⯒⯬-⯯⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿゛゜㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꜀-꜖꜠꜡꞉꞊꠨-꠫꠶-꠹꩷-꩹꭛﬩﮲-﯁﷼﷽﹢﹤-﹦﹩＄＋＜-＞＾｀｜～￠-￦￨-￮￼�",astral:"\ud800[\udd37-\udd3f\udd79-\udd89\udd8c-\udd8e\udd90-\udd9b\udda0\uddd0-\uddfc]|\ud802[\udc77\udc78\udec8]|𑜿|\ud81a[\udf3c-\udf3f\udf45]|𛲜|\ud834[\udc00-\udcf5\udd00-\udd26\udd29-\udd64\udd6a-\udd6c\udd83\udd84\udd8c-\udda9\uddae-\udde8\ude00-\ude41\ude45\udf00-\udf56]|\ud835[\udec1\udedb\udefb\udf15\udf35\udf4f\udf6f\udf89\udfa9\udfc3]|\ud836[\udc00-\uddff\ude37-\ude3a\ude6d-\ude74\ude76-\ude83\ude85\ude86]|\ud83b[\udef0\udef1]|\ud83c[\udc00-\udc2b\udc30-\udc93\udca0-\udcae\udcb1-\udcbf\udcc1-\udccf\udcd1-\udcf5\udd10-\udd2e\udd30-\udd6b\udd70-\uddac\udde6-\ude02\ude10-\ude3b\ude40-\ude48\ude50\ude51\ude60-\ude65\udf00-\udfff]|\ud83d[\udc00-\uded4\udee0-\udeec\udef0-\udef8\udf00-\udf73\udf80-\udfd4]|\ud83e[\udc00-\udc0b\udc10-\udc47\udc50-\udc59\udc60-\udc87\udc90-\udcad\udd00-\udd0b\udd10-\udd3e\udd40-\udd4c\udd50-\udd6b\udd80-\udd97\uddc0\uddd0-\udde6]"},{name:"Sc",alias:"Currency_Symbol",bmp:"\\$¢-¥֏؋৲৳৻૱௹฿៛₠-₿꠸﷼﹩＄￠￡￥￦"},{name:"Sk",alias:"Modifier_Symbol",bmp:"\\^`¨¯´¸˂-˅˒-˟˥-˫˭˯-˿͵΄΅᾽᾿-῁῍-῏῝-῟῭-`´῾゛゜꜀-꜖꜠꜡꞉꞊꭛﮲-﯁＾｀￣",astral:"\ud83c[\udffb-\udfff]"},{name:"Sm",alias:"Math_Symbol",bmp:"\\+<->\\|~¬±×÷϶؆-؈⁄⁒⁺-⁼₊-₌℘⅀-⅄⅋←-↔↚↛↠↣↦↮⇎⇏⇒⇔⇴-⋿⌠⌡⍼⎛-⎳⏜-⏡▷◁◸-◿♯⟀-⟄⟇-⟥⟰-⟿⤀-⦂⦙-⧗⧜-⧻⧾-⫿⬰-⭄⭇-⭌﬩﹢﹤-﹦＋＜-＞｜～￢￩-￬",astral:"\ud835[\udec1\udedb\udefb\udf15\udf35\udf4f\udf6f\udf89\udfa9\udfc3]|\ud83b[\udef0\udef1]"},{name:"So",alias:"Other_Symbol",bmp:"¦©®°҂֍֎؎؏۞۩۽۾߶৺୰௳-௸௺౿൏൹༁-༃༓༕-༗༚-༟༴༶༸྾-࿅࿇-࿌࿎࿏࿕-࿘႞႟᎐-᎙᥀᧞-᧿᭡-᭪᭴-᭼℀℁℃-℆℈℉℔№℗℞-℣℥℧℩℮℺℻⅊⅌⅍⅏↊↋↕-↙↜-↟↡↢↤↥↧-↭↯-⇍⇐⇑⇓⇕-⇳⌀-⌇⌌-⌟⌢-⌨⌫-⍻⍽-⎚⎴-⏛⏢-␦⑀-⑊⒜-ⓩ─-▶▸-◀◂-◷☀-♮♰-❧➔-➿⠀-⣿⬀-⬯⭅⭆⭍-⭳⭶-⮕⮘-⮹⮽-⯈⯊-⯒⯬-⯯⳥-⳪⺀-⺙⺛-⻳⼀-⿕⿰-⿻〄〒〓〠〶〷〾〿㆐㆑㆖-㆟㇀-㇣㈀-㈞㈪-㉇㉐㉠-㉿㊊-㊰㋀-㋾㌀-㏿䷀-䷿꒐-꓆꠨-꠫꠶꠷꠹꩷-꩹﷽￤￨￭￮￼�",astral:"\ud800[\udd37-\udd3f\udd79-\udd89\udd8c-\udd8e\udd90-\udd9b\udda0\uddd0-\uddfc]|\ud802[\udc77\udc78\udec8]|𑜿|\ud81a[\udf3c-\udf3f\udf45]|𛲜|\ud834[\udc00-\udcf5\udd00-\udd26\udd29-\udd64\udd6a-\udd6c\udd83\udd84\udd8c-\udda9\uddae-\udde8\ude00-\ude41\ude45\udf00-\udf56]|\ud836[\udc00-\uddff\ude37-\ude3a\ude6d-\ude74\ude76-\ude83\ude85\ude86]|\ud83c[\udc00-\udc2b\udc30-\udc93\udca0-\udcae\udcb1-\udcbf\udcc1-\udccf\udcd1-\udcf5\udd10-\udd2e\udd30-\udd6b\udd70-\uddac\udde6-\ude02\ude10-\ude3b\ude40-\ude48\ude50\ude51\ude60-\ude65\udf00-\udffa]|\ud83d[\udc00-\uded4\udee0-\udeec\udef0-\udef8\udf00-\udf73\udf80-\udfd4]|\ud83e[\udc00-\udc0b\udc10-\udc47\udc50-\udc59\udc60-\udc87\udc90-\udcad\udd00-\udd0b\udd10-\udd3e\udd40-\udd4c\udd50-\udd6b\udd80-\udd97\uddc0\uddd0-\udde6]"},{name:"Z",alias:"Separator",bmp:"    - \u2028\u2029  　"},{name:"Zl",alias:"Line_Separator",bmp:"\u2028"},{name:"Zp",alias:"Paragraph_Separator",bmp:"\u2029"},{name:"Zs",alias:"Space_Separator",bmp:"    -   　"}],$=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0});var u,t=(u=Z)&&u.__esModule?u:{default:u};d.default=function(e){if(!e.addUnicodeData)throw new ReferenceError("Unicode Base must be loaded before Unicode Categories");e.addUnicodeData(t.default)},e.exports=d.default});c($);var K=[{name:"ASCII",bmp:"\0-"},{name:"Alphabetic",bmp:"A-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͅͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևְ-ׇֽֿׁׂׅׄא-תװ-ײؐ-ؚؠ-ٗٙ-ٟٮ-ۓە-ۜۡ-ۭۨ-ۯۺ-ۼۿܐ-ܿݍ-ޱߊ-ߪߴߵߺࠀ-ࠗࠚ-ࠬࡀ-ࡘࡠ-ࡪࢠ-ࢴࢶ-ࢽࣔ-ࣣࣟ-ࣰࣩ-ऻऽ-ौॎ-ॐॕ-ॣॱ-ঃঅ-ঌএঐও-নপ-রলশ-হঽ-ৄেৈোৌৎৗড়ঢ়য়-ৣৰৱৼਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਾ-ੂੇੈੋੌੑਖ਼-ੜਫ਼ੰ-ੵઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽ-ૅે-ૉોૌૐૠ-ૣૹ-ૼଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽ-ୄେୈୋୌୖୗଡ଼ଢ଼ୟ-ୣୱஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-ௌௐௗఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-ౌౕౖౘ-ౚౠ-ౣಀ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽ-ೄೆ-ೈೊ-ೌೕೖೞೠ-ೣೱೲഀ-ഃഅ-ഌഎ-ഐഒ-ഺഽ-ൄെ-ൈൊ-ൌൎൔ-ൗൟ-ൣൺ-ൿංඃඅ-ඖක-නඳ-රලව-ෆා-ුූෘ-ෟෲෳก-ฺเ-ๆํກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆໍໜ-ໟༀཀ-ཇཉ-ཬཱ-ཱྀྈ-ྗྙ-ྼက-ံးျ-ဿၐ-ၢၥ-ၨၮ-ႆႎႜႝႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፟ᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛮ-ᛸᜀ-ᜌᜎ-ᜓᜠ-ᜳᝀ-ᝓᝠ-ᝬᝮ-ᝰᝲᝳក-ឳា-ៈៗៜᠠ-ᡷᢀ-ᢪᢰ-ᣵᤀ-ᤞᤠ-ᤫᤰ-ᤸᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨛᨠ-ᩞᩡ-ᩴᪧᬀ-ᬳᬵ-ᭃᭅ-ᭋᮀ-ᮩᮬ-ᮯᮺ-ᯥᯧ-ᯱᰀ-ᰵᱍ-ᱏᱚ-ᱽᲀ-ᲈᳩ-ᳬᳮ-ᳳᳵᳶᴀ-ᶿᷧ-ᷴḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎⅠ-ↈⒶ-ⓩⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⷠ-ⷿⸯ々-〇〡-〩〱-〵〸-〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄮㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿪ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙴ-ꙻꙿ-ꛯꜗ-ꜟꜢ-ꞈꞋ-ꞮꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠧꡀ-ꡳꢀ-ꣃꣅꣲ-ꣷꣻꣽꤊ-ꤪꤰ-ꥒꥠ-ꥼꦀ-ꦲꦴ-ꦿꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨶꩀ-ꩍꩠ-ꩶꩺꩾ-ꪾꫀꫂꫛ-ꫝꫠ-ꫯꫲ-ꫵꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯪ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ",astral:"\ud800[\udc00-\udc0b\udc0d-\udc26\udc28-\udc3a\udc3c\udc3d\udc3f-\udc4d\udc50-\udc5d\udc80-\udcfa\udd40-\udd74\ude80-\ude9c\udea0-\uded0\udf00-\udf1f\udf2d-\udf4a\udf50-\udf7a\udf80-\udf9d\udfa0-\udfc3\udfc8-\udfcf\udfd1-\udfd5]|\ud801[\udc00-\udc9d\udcb0-\udcd3\udcd8-\udcfb\udd00-\udd27\udd30-\udd63\ude00-\udf36\udf40-\udf55\udf60-\udf67]|\ud802[\udc00-\udc05\udc08\udc0a-\udc35\udc37\udc38\udc3c\udc3f-\udc55\udc60-\udc76\udc80-\udc9e\udce0-\udcf2\udcf4\udcf5\udd00-\udd15\udd20-\udd39\udd80-\uddb7\uddbe\uddbf\ude00-\ude03\ude05\ude06\ude0c-\ude13\ude15-\ude17\ude19-\ude33\ude60-\ude7c\ude80-\ude9c\udec0-\udec7\udec9-\udee4\udf00-\udf35\udf40-\udf55\udf60-\udf72\udf80-\udf91]|\ud803[\udc00-\udc48\udc80-\udcb2\udcc0-\udcf2]|\ud804[\udc00-\udc45\udc82-\udcb8\udcd0-\udce8\udd00-\udd32\udd50-\udd72\udd76\udd80-\uddbf\uddc1-\uddc4\uddda\udddc\ude00-\ude11\ude13-\ude34\ude37\ude3e\ude80-\ude86\ude88\ude8a-\ude8d\ude8f-\ude9d\ude9f-\udea8\udeb0-\udee8\udf00-\udf03\udf05-\udf0c\udf0f\udf10\udf13-\udf28\udf2a-\udf30\udf32\udf33\udf35-\udf39\udf3d-\udf44\udf47\udf48\udf4b\udf4c\udf50\udf57\udf5d-\udf63]|\ud805[\udc00-\udc41\udc43-\udc45\udc47-\udc4a\udc80-\udcc1\udcc4\udcc5\udcc7\udd80-\uddb5\uddb8-\uddbe\uddd8-\udddd\ude00-\ude3e\ude40\ude44\ude80-\udeb5\udf00-\udf19\udf1d-\udf2a]|\ud806[\udca0-\udcdf\udcff\ude00-\ude32\ude35-\ude3e\ude50-\ude83\ude86-\ude97\udec0-\udef8]|\ud807[\udc00-\udc08\udc0a-\udc36\udc38-\udc3e\udc40\udc72-\udc8f\udc92-\udca7\udca9-\udcb6\udd00-\udd06\udd08\udd09\udd0b-\udd36\udd3a\udd3c\udd3d\udd3f-\udd41\udd43\udd46\udd47]|\ud808[\udc00-\udf99]|\ud809[\udc00-\udc6e\udc80-\udd43]|[\ud80c\ud81c-\ud820\ud840-\ud868\ud86a-\ud86c\ud86f-\ud872\ud874-\ud879][\udc00-\udfff]|\ud80d[\udc00-\udc2e]|\ud811[\udc00-\ude46]|\ud81a[\udc00-\ude38\ude40-\ude5e\uded0-\udeed\udf00-\udf36\udf40-\udf43\udf63-\udf77\udf7d-\udf8f]|\ud81b[\udf00-\udf44\udf50-\udf7e\udf93-\udf9f\udfe0\udfe1]|\ud821[\udc00-\udfec]|\ud822[\udc00-\udef2]|\ud82c[\udc00-\udd1e\udd70-\udefb]|\ud82f[\udc00-\udc6a\udc70-\udc7c\udc80-\udc88\udc90-\udc99\udc9e]|\ud835[\udc00-\udc54\udc56-\udc9c\udc9e\udc9f\udca2\udca5\udca6\udca9-\udcac\udcae-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd1e-\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd52-\udea5\udea8-\udec0\udec2-\udeda\udedc-\udefa\udefc-\udf14\udf16-\udf34\udf36-\udf4e\udf50-\udf6e\udf70-\udf88\udf8a-\udfa8\udfaa-\udfc2\udfc4-\udfcb]|\ud838[\udc00-\udc06\udc08-\udc18\udc1b-\udc21\udc23\udc24\udc26-\udc2a]|\ud83a[\udc00-\udcc4\udd00-\udd43\udd47]|\ud83b[\ude00-\ude03\ude05-\ude1f\ude21\ude22\ude24\ude27\ude29-\ude32\ude34-\ude37\ude39\ude3b\ude42\ude47\ude49\ude4b\ude4d-\ude4f\ude51\ude52\ude54\ude57\ude59\ude5b\ude5d\ude5f\ude61\ude62\ude64\ude67-\ude6a\ude6c-\ude72\ude74-\ude77\ude79-\ude7c\ude7e\ude80-\ude89\ude8b-\ude9b\udea1-\udea3\udea5-\udea9\udeab-\udebb]|\ud83c[\udd30-\udd49\udd50-\udd69\udd70-\udd89]|\ud869[\udc00-\uded6\udf00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d\udc20-\udfff]|\ud873[\udc00-\udea1\udeb0-\udfff]|\ud87a[\udc00-\udfe0]|\ud87e[\udc00-\ude1d]"},{name:"Any",isBmpLast:!0,bmp:"\0-￿",astral:"[\ud800-\udbff][\udc00-\udfff]"},{name:"Default_Ignorable_Code_Point",bmp:"­͏؜ᅟᅠ឴឵᠋-᠎​-‏‪-‮⁠-⁯ㅤ︀-️\ufeffﾠ￰-￸",astral:"\ud82f[\udca0-\udca3]|\ud834[\udd73-\udd7a]|[\udb40-\udb43][\udc00-\udfff]"},{name:"Lowercase",bmp:"a-zªµºß-öø-ÿāăąćĉċčďđēĕėęěĝğġģĥħĩīĭįıĳĵķĸĺļľŀłńņňŉŋōŏőœŕŗřśŝşšţťŧũūŭůűųŵŷźżž-ƀƃƅƈƌƍƒƕƙ-ƛƞơƣƥƨƪƫƭưƴƶƹƺƽ-ƿǆǉǌǎǐǒǔǖǘǚǜǝǟǡǣǥǧǩǫǭǯǰǳǵǹǻǽǿȁȃȅȇȉȋȍȏȑȓȕȗșțȝȟȡȣȥȧȩȫȭȯȱȳ-ȹȼȿɀɂɇɉɋɍɏ-ʓʕ-ʸˀˁˠ-ˤͅͱͳͷͺ-ͽΐά-ώϐϑϕ-ϗϙϛϝϟϡϣϥϧϩϫϭϯ-ϳϵϸϻϼа-џѡѣѥѧѩѫѭѯѱѳѵѷѹѻѽѿҁҋҍҏґғҕҗҙқҝҟҡңҥҧҩҫҭүұҳҵҷҹһҽҿӂӄӆӈӊӌӎӏӑӓӕӗәӛӝӟӡӣӥӧөӫӭӯӱӳӵӷӹӻӽӿԁԃԅԇԉԋԍԏԑԓԕԗԙԛԝԟԡԣԥԧԩԫԭԯա-ևᏸ-ᏽᲀ-ᲈᴀ-ᶿḁḃḅḇḉḋḍḏḑḓḕḗḙḛḝḟḡḣḥḧḩḫḭḯḱḳḵḷḹḻḽḿṁṃṅṇṉṋṍṏṑṓṕṗṙṛṝṟṡṣṥṧṩṫṭṯṱṳṵṷṹṻṽṿẁẃẅẇẉẋẍẏẑẓẕ-ẝẟạảấầẩẫậắằẳẵặẹẻẽếềểễệỉịọỏốồổỗộớờởỡợụủứừửữựỳỵỷỹỻỽỿ-ἇἐ-ἕἠ-ἧἰ-ἷὀ-ὅὐ-ὗὠ-ὧὰ-ώᾀ-ᾇᾐ-ᾗᾠ-ᾧᾰ-ᾴᾶᾷιῂ-ῄῆῇῐ-ΐῖῗῠ-ῧῲ-ῴῶῷⁱⁿₐ-ₜℊℎℏℓℯℴℹℼℽⅆ-ⅉⅎⅰ-ⅿↄⓐ-ⓩⰰ-ⱞⱡⱥⱦⱨⱪⱬⱱⱳⱴⱶ-ⱽⲁⲃⲅⲇⲉⲋⲍⲏⲑⲓⲕⲗⲙⲛⲝⲟⲡⲣⲥⲧⲩⲫⲭⲯⲱⲳⲵⲷⲹⲻⲽⲿⳁⳃⳅⳇⳉⳋⳍⳏⳑⳓⳕⳗⳙⳛⳝⳟⳡⳣⳤⳬⳮⳳⴀ-ⴥⴧⴭꙁꙃꙅꙇꙉꙋꙍꙏꙑꙓꙕꙗꙙꙛꙝꙟꙡꙣꙥꙧꙩꙫꙭꚁꚃꚅꚇꚉꚋꚍꚏꚑꚓꚕꚗꚙꚛ-ꚝꜣꜥꜧꜩꜫꜭꜯ-ꜱꜳꜵꜷꜹꜻꜽꜿꝁꝃꝅꝇꝉꝋꝍꝏꝑꝓꝕꝗꝙꝛꝝꝟꝡꝣꝥꝧꝩꝫꝭꝯ-ꝸꝺꝼꝿꞁꞃꞅꞇꞌꞎꞑꞓ-ꞕꞗꞙꞛꞝꞟꞡꞣꞥꞧꞩꞵꞷꟸ-ꟺꬰ-ꭚꭜ-ꭥꭰ-ꮿﬀ-ﬆﬓ-ﬗａ-ｚ",astral:"\ud801[\udc28-\udc4f\udcd8-\udcfb]|\ud803[\udcc0-\udcf2]|\ud806[\udcc0-\udcdf]|\ud835[\udc1a-\udc33\udc4e-\udc54\udc56-\udc67\udc82-\udc9b\udcb6-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udccf\udcea-\udd03\udd1e-\udd37\udd52-\udd6b\udd86-\udd9f\uddba-\uddd3\uddee-\ude07\ude22-\ude3b\ude56-\ude6f\ude8a-\udea5\udec2-\udeda\udedc-\udee1\udefc-\udf14\udf16-\udf1b\udf36-\udf4e\udf50-\udf55\udf70-\udf88\udf8a-\udf8f\udfaa-\udfc2\udfc4-\udfc9\udfcb]|\ud83a[\udd22-\udd43]"},{name:"Noncharacter_Code_Point",bmp:"﷐-﷯￾￿",astral:"[\ud83f\ud87f\ud8bf\ud8ff\ud93f\ud97f\ud9bf\ud9ff\uda3f\uda7f\udabf\udaff\udb3f\udb7f\udbbf\udbff][\udffe\udfff]"},{name:"Uppercase",bmp:"A-ZÀ-ÖØ-ÞĀĂĄĆĈĊČĎĐĒĔĖĘĚĜĞĠĢĤĦĨĪĬĮİĲĴĶĹĻĽĿŁŃŅŇŊŌŎŐŒŔŖŘŚŜŞŠŢŤŦŨŪŬŮŰŲŴŶŸŹŻŽƁƂƄƆƇƉ-ƋƎ-ƑƓƔƖ-ƘƜƝƟƠƢƤƦƧƩƬƮƯƱ-ƳƵƷƸƼǄǇǊǍǏǑǓǕǗǙǛǞǠǢǤǦǨǪǬǮǱǴǶ-ǸǺǼǾȀȂȄȆȈȊȌȎȐȒȔȖȘȚȜȞȠȢȤȦȨȪȬȮȰȲȺȻȽȾɁɃ-ɆɈɊɌɎͰͲͶͿΆΈ-ΊΌΎΏΑ-ΡΣ-ΫϏϒ-ϔϘϚϜϞϠϢϤϦϨϪϬϮϴϷϹϺϽ-ЯѠѢѤѦѨѪѬѮѰѲѴѶѸѺѼѾҀҊҌҎҐҒҔҖҘҚҜҞҠҢҤҦҨҪҬҮҰҲҴҶҸҺҼҾӀӁӃӅӇӉӋӍӐӒӔӖӘӚӜӞӠӢӤӦӨӪӬӮӰӲӴӶӸӺӼӾԀԂԄԆԈԊԌԎԐԒԔԖԘԚԜԞԠԢԤԦԨԪԬԮԱ-ՖႠ-ჅჇჍᎠ-ᏵḀḂḄḆḈḊḌḎḐḒḔḖḘḚḜḞḠḢḤḦḨḪḬḮḰḲḴḶḸḺḼḾṀṂṄṆṈṊṌṎṐṒṔṖṘṚṜṞṠṢṤṦṨṪṬṮṰṲṴṶṸṺṼṾẀẂẄẆẈẊẌẎẐẒẔẞẠẢẤẦẨẪẬẮẰẲẴẶẸẺẼẾỀỂỄỆỈỊỌỎỐỒỔỖỘỚỜỞỠỢỤỦỨỪỬỮỰỲỴỶỸỺỼỾἈ-ἏἘ-ἝἨ-ἯἸ-ἿὈ-ὍὙὛὝὟὨ-ὯᾸ-ΆῈ-ΉῘ-ΊῨ-ῬῸ-Ώℂℇℋ-ℍℐ-ℒℕℙ-ℝℤΩℨK-ℭℰ-ℳℾℿⅅⅠ-ⅯↃⒶ-ⓏⰀ-ⰮⱠⱢ-ⱤⱧⱩⱫⱭ-ⱰⱲⱵⱾ-ⲀⲂⲄⲆⲈⲊⲌⲎⲐⲒⲔⲖⲘⲚⲜⲞⲠⲢⲤⲦⲨⲪⲬⲮⲰⲲⲴⲶⲸⲺⲼⲾⳀⳂⳄⳆⳈⳊⳌⳎⳐⳒⳔⳖⳘⳚⳜⳞⳠⳢⳫⳭⳲꙀꙂꙄꙆꙈꙊꙌꙎꙐꙒꙔꙖꙘꙚꙜꙞꙠꙢꙤꙦꙨꙪꙬꚀꚂꚄꚆꚈꚊꚌꚎꚐꚒꚔꚖꚘꚚꜢꜤꜦꜨꜪꜬꜮꜲꜴꜶꜸꜺꜼꜾꝀꝂꝄꝆꝈꝊꝌꝎꝐꝒꝔꝖꝘꝚꝜꝞꝠꝢꝤꝦꝨꝪꝬꝮꝹꝻꝽꝾꞀꞂꞄꞆꞋꞍꞐꞒꞖꞘꞚꞜꞞꞠꞢꞤꞦꞨꞪ-ꞮꞰ-ꞴꞶＡ-Ｚ",astral:"\ud801[\udc00-\udc27\udcb0-\udcd3]|\ud803[\udc80-\udcb2]|\ud806[\udca0-\udcbf]|\ud835[\udc00-\udc19\udc34-\udc4d\udc68-\udc81\udc9c\udc9e\udc9f\udca2\udca5\udca6\udca9-\udcac\udcae-\udcb5\udcd0-\udce9\udd04\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd38\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd6c-\udd85\udda0-\uddb9\uddd4-\udded\ude08-\ude21\ude3c-\ude55\ude70-\ude89\udea8-\udec0\udee2-\udefa\udf1c-\udf34\udf56-\udf6e\udf90-\udfa8\udfca]|\ud83a[\udd00-\udd21]|\ud83c[\udd30-\udd49\udd50-\udd69\udd70-\udd89]"},{name:"White_Space",bmp:"\t-\r    - \u2028\u2029  　"}],J=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0});var u,t=(u=K)&&u.__esModule?u:{default:u};d.default=function(e){if(!e.addUnicodeData)throw new ReferenceError("Unicode Base must be loaded before Unicode Properties");var d=t.default;d.push({name:"Assigned",inverseOf:"Cn"}),e.addUnicodeData(d)},e.exports=d.default});c(J);var Y=[{name:"Adlam",astral:"\ud83a[\udd00-\udd4a\udd50-\udd59\udd5e\udd5f]"},{name:"Ahom",astral:"\ud805[\udf00-\udf19\udf1d-\udf2b\udf30-\udf3f]"},{name:"Anatolian_Hieroglyphs",astral:"\ud811[\udc00-\ude46]"},{name:"Arabic",bmp:"؀-؄؆-؋؍-ؚ؜؞ؠ-ؿف-يٖ-ٯٱ-ۜ۞-ۿݐ-ݿࢠ-ࢴࢶ-ࢽࣔ-ࣣ࣡-ࣿﭐ-﯁ﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-﷽ﹰ-ﹴﹶ-ﻼ",astral:"\ud803[\ude60-\ude7e]|\ud83b[\ude00-\ude03\ude05-\ude1f\ude21\ude22\ude24\ude27\ude29-\ude32\ude34-\ude37\ude39\ude3b\ude42\ude47\ude49\ude4b\ude4d-\ude4f\ude51\ude52\ude54\ude57\ude59\ude5b\ude5d\ude5f\ude61\ude62\ude64\ude67-\ude6a\ude6c-\ude72\ude74-\ude77\ude79-\ude7c\ude7e\ude80-\ude89\ude8b-\ude9b\udea1-\udea3\udea5-\udea9\udeab-\udebb\udef0\udef1]"},{name:"Armenian",bmp:"Ա-Ֆՙ-՟ա-և֊֍-֏ﬓ-ﬗ"},{name:"Avestan",astral:"\ud802[\udf00-\udf35\udf39-\udf3f]"},{name:"Balinese",bmp:"ᬀ-ᭋ᭐-᭼"},{name:"Bamum",bmp:"ꚠ-꛷",astral:"\ud81a[\udc00-\ude38]"},{name:"Bassa_Vah",astral:"\ud81a[\uded0-\udeed\udef0-\udef5]"},{name:"Batak",bmp:"ᯀ-᯳᯼-᯿"},{name:"Bengali",bmp:"ঀ-ঃঅ-ঌএঐও-নপ-রলশ-হ়-ৄেৈো-ৎৗড়ঢ়য়-ৣ০-৽"},{name:"Bhaiksuki",astral:"\ud807[\udc00-\udc08\udc0a-\udc36\udc38-\udc45\udc50-\udc6c]"},{name:"Bopomofo",bmp:"˪˫ㄅ-ㄮㆠ-ㆺ"},{name:"Brahmi",astral:"\ud804[\udc00-\udc4d\udc52-\udc6f\udc7f]"},{name:"Braille",bmp:"⠀-⣿"},{name:"Buginese",bmp:"ᨀ-ᨛ᨞᨟"},{name:"Buhid",bmp:"ᝀ-ᝓ"},{name:"Canadian_Aboriginal",bmp:"᐀-ᙿᢰ-ᣵ"},{name:"Carian",astral:"\ud800[\udea0-\uded0]"},{name:"Caucasian_Albanian",astral:"\ud801[\udd30-\udd63\udd6f]"},{name:"Chakma",astral:"\ud804[\udd00-\udd34\udd36-\udd43]"},{name:"Cham",bmp:"ꨀ-ꨶꩀ-ꩍ꩐-꩙꩜-꩟"},{name:"Cherokee",bmp:"Ꭰ-Ᏽᏸ-ᏽꭰ-ꮿ"},{name:"Common",bmp:"\0-@\\[-`\\{-©«-¹»-¿×÷ʹ-˟˥-˩ˬ-˿ʹ;΅·։؅،؛؟ـ۝࣢।॥฿࿕-࿘჻᛫-᛭᜵᜶᠂᠃᠅᳓᳡ᳩ-ᳬᳮ-ᳳᳵ-᳷ -​‎-⁤⁦-⁰⁴-⁾₀-₎₠-₿℀-℥℧-℩ℬ-ℱℳ-⅍⅏-⅟↉-↋←-␦⑀-⑊①-⟿⤀-⭳⭶-⮕⮘-⮹⮽-⯈⯊-⯒⯬-⯯⸀-⹉⿰-⿻　-〄〆〈-〠〰-〷〼-〿゛゜゠・ー㆐-㆟㇀-㇣㈠-㉟㉿-㋏㍘-㏿䷀-䷿꜀-꜡ꞈ-꞊꠰-꠹꤮ꧏ꭛﴾﴿︐-︙︰-﹒﹔-﹦﹨-﹫\ufeff！-＠［-｀｛-･ｰﾞﾟ￠-￦￨-￮￹-�",astral:"\ud800[\udd00-\udd02\udd07-\udd33\udd37-\udd3f\udd90-\udd9b\uddd0-\uddfc\udee1-\udefb]|\ud82f[\udca0-\udca3]|\ud834[\udc00-\udcf5\udd00-\udd26\udd29-\udd66\udd6a-\udd7a\udd83\udd84\udd8c-\udda9\uddae-\udde8\udf00-\udf56\udf60-\udf71]|\ud835[\udc00-\udc54\udc56-\udc9c\udc9e\udc9f\udca2\udca5\udca6\udca9-\udcac\udcae-\udcb9\udcbb\udcbd-\udcc3\udcc5-\udd05\udd07-\udd0a\udd0d-\udd14\udd16-\udd1c\udd1e-\udd39\udd3b-\udd3e\udd40-\udd44\udd46\udd4a-\udd50\udd52-\udea5\udea8-\udfcb\udfce-\udfff]|\ud83c[\udc00-\udc2b\udc30-\udc93\udca0-\udcae\udcb1-\udcbf\udcc1-\udccf\udcd1-\udcf5\udd00-\udd0c\udd10-\udd2e\udd30-\udd6b\udd70-\uddac\udde6-\uddff\ude01\ude02\ude10-\ude3b\ude40-\ude48\ude50\ude51\ude60-\ude65\udf00-\udfff]|\ud83d[\udc00-\uded4\udee0-\udeec\udef0-\udef8\udf00-\udf73\udf80-\udfd4]|\ud83e[\udc00-\udc0b\udc10-\udc47\udc50-\udc59\udc60-\udc87\udc90-\udcad\udd00-\udd0b\udd10-\udd3e\udd40-\udd4c\udd50-\udd6b\udd80-\udd97\uddc0\uddd0-\udde6]|\udb40[\udc01\udc20-\udc7f]"},{name:"Coptic",bmp:"Ϣ-ϯⲀ-ⳳ⳹-⳿"},{name:"Cuneiform",astral:"\ud808[\udc00-\udf99]|\ud809[\udc00-\udc6e\udc70-\udc74\udc80-\udd43]"},{name:"Cypriot",astral:"\ud802[\udc00-\udc05\udc08\udc0a-\udc35\udc37\udc38\udc3c\udc3f]"},{name:"Cyrillic",bmp:"Ѐ-҄҇-ԯᲀ-ᲈᴫᵸⷠ-ⷿꙀ-ꚟ︮︯"},{name:"Deseret",astral:"\ud801[\udc00-\udc4f]"},{name:"Devanagari",bmp:"ऀ-ॐ॓-ॣ०-ॿ꣠-ꣽ"},{name:"Duployan",astral:"\ud82f[\udc00-\udc6a\udc70-\udc7c\udc80-\udc88\udc90-\udc99\udc9c-\udc9f]"},{name:"Egyptian_Hieroglyphs",astral:"\ud80c[\udc00-\udfff]|\ud80d[\udc00-\udc2e]"},{name:"Elbasan",astral:"\ud801[\udd00-\udd27]"},{name:"Ethiopic",bmp:"ሀ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚ፝-፼ᎀ-᎙ⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮ"},{name:"Georgian",bmp:"Ⴀ-ჅჇჍა-ჺჼ-ჿⴀ-ⴥⴧⴭ"},{name:"Glagolitic",bmp:"Ⰰ-Ⱞⰰ-ⱞ",astral:"\ud838[\udc00-\udc06\udc08-\udc18\udc1b-\udc21\udc23\udc24\udc26-\udc2a]"},{name:"Gothic",astral:"\ud800[\udf30-\udf4a]"},{name:"Grantha",astral:"\ud804[\udf00-\udf03\udf05-\udf0c\udf0f\udf10\udf13-\udf28\udf2a-\udf30\udf32\udf33\udf35-\udf39\udf3c-\udf44\udf47\udf48\udf4b-\udf4d\udf50\udf57\udf5d-\udf63\udf66-\udf6c\udf70-\udf74]"},{name:"Greek",bmp:"Ͱ-ͳ͵-ͷͺ-ͽͿ΄ΆΈ-ΊΌΎ-ΡΣ-ϡϰ-Ͽᴦ-ᴪᵝ-ᵡᵦ-ᵪᶿἀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ῄῆ-ΐῖ-Ί῝-`ῲ-ῴῶ-῾Ωꭥ",astral:"\ud800[\udd40-\udd8e\udda0]|\ud834[\ude00-\ude45]"},{name:"Gujarati",bmp:"ઁ-ઃઅ-ઍએ-ઑઓ-નપ-રલળવ-હ઼-ૅે-ૉો-્ૐૠ-ૣ૦-૱ૹ-૿"},{name:"Gurmukhi",bmp:"ਁ-ਃਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹ਼ਾ-ੂੇੈੋ-੍ੑਖ਼-ੜਫ਼੦-ੵ"},{name:"Han",bmp:"⺀-⺙⺛-⻳⼀-⿕々〇〡-〩〸-〻㐀-䶵一-鿪豈-舘並-龎",astral:"[\ud840-\ud868\ud86a-\ud86c\ud86f-\ud872\ud874-\ud879][\udc00-\udfff]|\ud869[\udc00-\uded6\udf00-\udfff]|\ud86d[\udc00-\udf34\udf40-\udfff]|\ud86e[\udc00-\udc1d\udc20-\udfff]|\ud873[\udc00-\udea1\udeb0-\udfff]|\ud87a[\udc00-\udfe0]|\ud87e[\udc00-\ude1d]"},{name:"Hangul",bmp:"ᄀ-ᇿ〮〯ㄱ-ㆎ㈀-㈞㉠-㉾ꥠ-ꥼ가-힣ힰ-ퟆퟋ-ퟻﾠ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ"},{name:"Hanunoo",bmp:"ᜠ-᜴"},{name:"Hatran",astral:"\ud802[\udce0-\udcf2\udcf4\udcf5\udcfb-\udcff]"},{name:"Hebrew",bmp:"֑-ׇא-תװ-״יִ-זּטּ-לּמּנּסּףּפּצּ-ﭏ"},{name:"Hiragana",bmp:"ぁ-ゖゝ-ゟ",astral:"\ud82c[\udc01-\udd1e]|🈀"},{name:"Imperial_Aramaic",astral:"\ud802[\udc40-\udc55\udc57-\udc5f]"},{name:"Inherited",bmp:"̀-ًͯ҅҆-ٰٕ॒॑᪰-᪾᳐-᳔᳒-᳢᳠-᳨᳭᳴᳸᳹᷀-᷹᷻-᷿‌‍⃐-〪⃰-゙゚〭︀-️︠-︭",astral:"\ud800[\uddfd\udee0]|\ud834[\udd67-\udd69\udd7b-\udd82\udd85-\udd8b\uddaa-\uddad]|\udb40[\udd00-\uddef]"},{name:"Inscriptional_Pahlavi",astral:"\ud802[\udf60-\udf72\udf78-\udf7f]"},{name:"Inscriptional_Parthian",astral:"\ud802[\udf40-\udf55\udf58-\udf5f]"},{name:"Javanese",bmp:"ꦀ-꧍꧐-꧙꧞꧟"},{name:"Kaithi",astral:"\ud804[\udc80-\udcc1]"},{name:"Kannada",bmp:"ಀ-ಃಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹ಼-ೄೆ-ೈೊ-್ೕೖೞೠ-ೣ೦-೯ೱೲ"},{name:"Katakana",bmp:"ァ-ヺヽ-ヿㇰ-ㇿ㋐-㋾㌀-㍗ｦ-ｯｱ-ﾝ",astral:"𛀀"},{name:"Kayah_Li",bmp:"꤀-꤭꤯"},{name:"Kharoshthi",astral:"\ud802[\ude00-\ude03\ude05\ude06\ude0c-\ude13\ude15-\ude17\ude19-\ude33\ude38-\ude3a\ude3f-\ude47\ude50-\ude58]"},{name:"Khmer",bmp:"ក-៝០-៩៰-៹᧠-᧿"},{name:"Khojki",astral:"\ud804[\ude00-\ude11\ude13-\ude3e]"},{name:"Khudawadi",astral:"\ud804[\udeb0-\udeea\udef0-\udef9]"},{name:"Lao",bmp:"ກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ູົ-ຽເ-ໄໆ່-ໍ໐-໙ໜ-ໟ"},{name:"Latin",bmp:"A-Za-zªºÀ-ÖØ-öø-ʸˠ-ˤᴀ-ᴥᴬ-ᵜᵢ-ᵥᵫ-ᵷᵹ-ᶾḀ-ỿⁱⁿₐ-ₜKÅℲⅎⅠ-ↈⱠ-ⱿꜢ-ꞇꞋ-ꞮꞰ-ꞷꟷ-ꟿꬰ-ꭚꭜ-ꭤﬀ-ﬆＡ-Ｚａ-ｚ"},{name:"Lepcha",bmp:"ᰀ-᰷᰻-᱉ᱍ-ᱏ"},{name:"Limbu",bmp:"ᤀ-ᤞᤠ-ᤫᤰ-᤻᥀᥄-᥏"},{name:"Linear_A",astral:"\ud801[\ude00-\udf36\udf40-\udf55\udf60-\udf67]"},{name:"Linear_B",astral:"\ud800[\udc00-\udc0b\udc0d-\udc26\udc28-\udc3a\udc3c\udc3d\udc3f-\udc4d\udc50-\udc5d\udc80-\udcfa]"},{name:"Lisu",bmp:"ꓐ-꓿"},{name:"Lycian",astral:"\ud800[\ude80-\ude9c]"},{name:"Lydian",astral:"\ud802[\udd20-\udd39\udd3f]"},{name:"Mahajani",astral:"\ud804[\udd50-\udd76]"},{name:"Malayalam",bmp:"ഀ-ഃഅ-ഌഎ-ഐഒ-ൄെ-ൈൊ-൏ൔ-ൣ൦-ൿ"},{name:"Mandaic",bmp:"ࡀ-࡛࡞"},{name:"Manichaean",astral:"\ud802[\udec0-\udee6\udeeb-\udef6]"},{name:"Marchen",astral:"\ud807[\udc70-\udc8f\udc92-\udca7\udca9-\udcb6]"},{name:"Masaram_Gondi",astral:"\ud807[\udd00-\udd06\udd08\udd09\udd0b-\udd36\udd3a\udd3c\udd3d\udd3f-\udd47\udd50-\udd59]"},{name:"Meetei_Mayek",bmp:"ꫠ-꫶ꯀ-꯭꯰-꯹"},{name:"Mende_Kikakui",astral:"\ud83a[\udc00-\udcc4\udcc7-\udcd6]"},{name:"Meroitic_Cursive",astral:"\ud802[\udda0-\uddb7\uddbc-\uddcf\uddd2-\uddff]"},{name:"Meroitic_Hieroglyphs",astral:"\ud802[\udd80-\udd9f]"},{name:"Miao",astral:"\ud81b[\udf00-\udf44\udf50-\udf7e\udf8f-\udf9f]"},{name:"Modi",astral:"\ud805[\ude00-\ude44\ude50-\ude59]"},{name:"Mongolian",bmp:"᠀᠁᠄᠆-᠎᠐-᠙ᠠ-ᡷᢀ-ᢪ",astral:"\ud805[\ude60-\ude6c]"},{name:"Mro",astral:"\ud81a[\ude40-\ude5e\ude60-\ude69\ude6e\ude6f]"},{name:"Multani",astral:"\ud804[\ude80-\ude86\ude88\ude8a-\ude8d\ude8f-\ude9d\ude9f-\udea9]"},{name:"Myanmar",bmp:"က-႟ꧠ-ꧾꩠ-ꩿ"},{name:"Nabataean",astral:"\ud802[\udc80-\udc9e\udca7-\udcaf]"},{name:"New_Tai_Lue",bmp:"ᦀ-ᦫᦰ-ᧉ᧐-᧚᧞᧟"},{name:"Newa",astral:"\ud805[\udc00-\udc59\udc5b\udc5d]"},{name:"Nko",bmp:"߀-ߺ"},{name:"Nushu",astral:"𖿡|\ud82c[\udd70-\udefb]"},{name:"Ogham",bmp:" -᚜"},{name:"Ol_Chiki",bmp:"᱐-᱿"},{name:"Old_Hungarian",astral:"\ud803[\udc80-\udcb2\udcc0-\udcf2\udcfa-\udcff]"},{name:"Old_Italic",astral:"\ud800[\udf00-\udf23\udf2d-\udf2f]"},{name:"Old_North_Arabian",astral:"\ud802[\ude80-\ude9f]"},{name:"Old_Permic",astral:"\ud800[\udf50-\udf7a]"},{name:"Old_Persian",astral:"\ud800[\udfa0-\udfc3\udfc8-\udfd5]"},{name:"Old_South_Arabian",astral:"\ud802[\ude60-\ude7f]"},{name:"Old_Turkic",astral:"\ud803[\udc00-\udc48]"},{name:"Oriya",bmp:"ଁ-ଃଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହ଼-ୄେୈୋ-୍ୖୗଡ଼ଢ଼ୟ-ୣ୦-୷"},{name:"Osage",astral:"\ud801[\udcb0-\udcd3\udcd8-\udcfb]"},{name:"Osmanya",astral:"\ud801[\udc80-\udc9d\udca0-\udca9]"},{name:"Pahawh_Hmong",astral:"\ud81a[\udf00-\udf45\udf50-\udf59\udf5b-\udf61\udf63-\udf77\udf7d-\udf8f]"},{name:"Palmyrene",astral:"\ud802[\udc60-\udc7f]"},{name:"Pau_Cin_Hau",astral:"\ud806[\udec0-\udef8]"},{name:"Phags_Pa",bmp:"ꡀ-꡷"},{name:"Phoenician",astral:"\ud802[\udd00-\udd1b\udd1f]"},{name:"Psalter_Pahlavi",astral:"\ud802[\udf80-\udf91\udf99-\udf9c\udfa9-\udfaf]"},{name:"Rejang",bmp:"ꤰ-꥓꥟"},{name:"Runic",bmp:"ᚠ-ᛪᛮ-ᛸ"},{name:"Samaritan",bmp:"ࠀ-࠭࠰-࠾"},{name:"Saurashtra",bmp:"ꢀ-ꣅ꣎-꣙"},{name:"Sharada",astral:"\ud804[\udd80-\uddcd\uddd0-\udddf]"},{name:"Shavian",astral:"\ud801[\udc50-\udc7f]"},{name:"Siddham",astral:"\ud805[\udd80-\uddb5\uddb8-\udddd]"},{name:"SignWriting",astral:"\ud836[\udc00-\ude8b\ude9b-\ude9f\udea1-\udeaf]"},{name:"Sinhala",bmp:"ංඃඅ-ඖක-නඳ-රලව-ෆ්ා-ුූෘ-ෟ෦-෯ෲ-෴",astral:"\ud804[\udde1-\uddf4]"},{name:"Sora_Sompeng",astral:"\ud804[\udcd0-\udce8\udcf0-\udcf9]"},{name:"Soyombo",astral:"\ud806[\ude50-\ude83\ude86-\ude9c\ude9e-\udea2]"},{name:"Sundanese",bmp:"ᮀ-ᮿ᳀-᳇"},{name:"Syloti_Nagri",bmp:"ꠀ-꠫"},{name:"Syriac",bmp:"܀-܍܏-݊ݍ-ݏࡠ-ࡪ"},{name:"Tagalog",bmp:"ᜀ-ᜌᜎ-᜔"},{name:"Tagbanwa",bmp:"ᝠ-ᝬᝮ-ᝰᝲᝳ"},{name:"Tai_Le",bmp:"ᥐ-ᥭᥰ-ᥴ"},{name:"Tai_Tham",bmp:"ᨠ-ᩞ᩠-᩿᩼-᪉᪐-᪙᪠-᪭"},{name:"Tai_Viet",bmp:"ꪀ-ꫂꫛ-꫟"},{name:"Takri",astral:"\ud805[\ude80-\udeb7\udec0-\udec9]"},{name:"Tamil",bmp:"ஂஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹா-ூெ-ைொ-்ௐௗ௦-௺"},{name:"Tangut",astral:"𖿠|[\ud81c-\ud820][\udc00-\udfff]|\ud821[\udc00-\udfec]|\ud822[\udc00-\udef2]"},{name:"Telugu",bmp:"ఀ-ఃఅ-ఌఎ-ఐఒ-నప-హఽ-ౄె-ైొ-్ౕౖౘ-ౚౠ-ౣ౦-౯౸-౿"},{name:"Thaana",bmp:"ހ-ޱ"},{name:"Thai",bmp:"ก-ฺเ-๛"},{name:"Tibetan",bmp:"ༀ-ཇཉ-ཬཱ-ྗྙ-ྼ྾-࿌࿎-࿔࿙࿚"},{name:"Tifinagh",bmp:"ⴰ-ⵧⵯ⵰⵿"},{name:"Tirhuta",astral:"\ud805[\udc80-\udcc7\udcd0-\udcd9]"},{name:"Ugaritic",astral:"\ud800[\udf80-\udf9d\udf9f]"},{name:"Vai",bmp:"ꔀ-ꘫ"},{name:"Warang_Citi",astral:"\ud806[\udca0-\udcf2\udcff]"},{name:"Yi",bmp:"ꀀ-ꒌ꒐-꓆"},{name:"Zanabazar_Square",astral:"\ud806[\ude00-\ude47]"}],X=i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0});var u,t=(u=Y)&&u.__esModule?u:{default:u};d.default=function(e){if(!e.addUnicodeData)throw new ReferenceError("Unicode Base must be loaded before Unicode Scripts");e.addUnicodeData(t.default)},e.exports=d.default});c(X);r=c(i(function(e,d){Object.defineProperty(d,"__esModule",{value:!0});var u=o(U),t=o(j),a=o(H),r=o(z),n=o(G),c=o($),i=o(J),s=o(X);function o(e){return e&&e.__esModule?e:{default:e}}(0,t.default)(u.default),(0,a.default)(u.default),(0,r.default)(u.default),(0,n.default)(u.default),(0,c.default)(u.default),(0,i.default)(u.default),(0,s.default)(u.default),d.default=u.default,e.exports=d.default}));function W(e){if(null==this)throw TypeError();var d=String(this),u=e?Number(e):0;if((u=u!=u?0:u)<0||u==1/0)throw RangeError();for(var t="";u;)u%2==1&&(t+=d),1<u&&(d+=d),u>>=1;return t}String.prototype.repeat||((ae=function(){try{var e={},d=Object.defineProperty,u=d(e,e,e)&&d}catch(e){}return u}())?ae(String.prototype,"repeat",{value:W,configurable:!0,writable:!0}):String.prototype.repeat=W);function Q(e){var d=new g("text");return d._literal=e,d}function ee(e){return e.slice(1,e.length-1).trim().replace(/[ \t\r\n]+/," ").toLowerCase().toUpperCase()}function de(e,d){e.next!==d&&((e.next=d).previous=e)}var ue=function(d){R.test(d)&&(d="http://"+d);try{return n(d)}catch(e){return d}},te=L,ae=C,C="\\\\"+ae,re=m,ne=new RegExp(/^[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/),ce=new RegExp("^=([0-9]*)x([0-9]*)"),ie=new RegExp('^(?:"('+C+'|[^"\\x00])*"|\'('+C+"|[^'\\x00])*'|\\(("+C+"|[^()\\x00])*\\))"),se=/^(?:<(?:[^<>\n\\\x00]|\\.)*>)/,oe=new RegExp("^"+ae),le=new RegExp("^&(?:#x[a-f0-9]{1,6}|#[0-9]{1,7}|[a-z][a-z0-9]{1,31});","i"),fe=/`+/,pe=/^`+/,he=/\.\.\./g,me=/--+/g,be=/^<([a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*)>/,ge=/^<[A-Za-z][A-Za-z0-9.+-]{1,31}:[^<>\x00-\x20]*>/i,_e=/^ *(?:\n *)?/,ve=/^[ \t\n\x0b\x0c\x0d]/,ye=/^\s/,we=/ *$/,xe=/^ */,ke=/^ *(?:\n|$)/,Ce=/^\W+$/,Ee=/^\[(?:[^\\\[\]]|\\.){0,1000}\]/s,Le=/^[*_~]/,qe=/^[\W]/,ae="\\p{L}\\p{Nd}!#$%&'*+\\-\\/=?^_`{|}~",Le=/^[*_~]/,qe=/^[\W]/,Ae=(ae="\\p{L}\\p{Nd}!#$%&'*+\\-\\/=?^_`{|}~",r.cache("^[\\s\\S]+?(?=[\\n`\\[\\]\\\\!<&*_'\"@:;xX~#$]|[a-z][a-z0-9.+-]{1,31}:|www\\d{0,3}\\.|["+ae+".]{1,64}@|$)")),De=function(e){e=this.matchRegex(e);return null===e?null:e[0]},Ie=function(e){e=e.exec(this.subject.slice(this.pos));return null===e?null:(this.pos+=e.index+e[0].length,e)},Se=function(e){e=e.exec(this.subject.slice(this.pos));return null===e?null:e},Ne=function(e){this.pos+=e.index+e[0].length},Te=function(){return this.pos<this.subject.length?this.subject.charCodeAt(this.pos):-1},Oe=function(){return this.match(_e),!0},Fe=function(e){var d=this.match(pe);if(null===d)return!1;for(var u,t,a=this.pos;null!==(t=this.match(fe));)if(t===d)return u=new g("code"),0<(t=this.subject.slice(a,this.pos-d.length).replace(/\n/gm," ")).length&&null!==t.match(/[^ ]/)&&" "==t[0]&&" "==t[t.length-1]?u._literal=t.slice(1,t.length-1):u._literal=t,"table_cell"===e.type&&(u._literal=u._literal.replace(/\\\|/g,"|")),e.appendChild(u),!0;return this.pos=a,e.appendChild(Q(d)),!0},Be=function(e){var d,u=this.subject;return this.pos+=1,10===this.peek()?(this.pos+=1,d=new g("linebreak"),e.appendChild(d)):oe.test(u.charAt(this.pos))?(e.appendChild(Q(u.charAt(this.pos))),this.pos+=1):e.appendChild(Q("\\")),!0},Re=function(e){var d,u,t;return(d=this.match(be))?(u=d.slice(1,d.length-1),(t=new g("link"))._destination=ue("mailto:"+u),t._title="",t.appendChild(Q(u)),e.appendChild(t),!0):!!(d=this.match(ge))&&(u=d.slice(1,d.length-1),(t=new g("link"))._destination=ue(u),t._title="",t.appendChild(Q(u)),e.appendChild(t),!0)},Me=function(e){var d=this.match(re);if(null===d)return!1;var u=new g("html_inline");return u._literal=d,e.appendChild(u),!0},Pe=function(e){var d,u,t,a,r,n,c=0,i=this.pos;if(39===e||34===e)c++,this.pos++;else for(;this.peek()===e;)c++,this.pos++;return 0===c||126===e&&c<2?(this.pos-=c,null):(d=0===i?"\n":this.subject.charAt(i-1),n=-1===(r=this.peek())?"\n":P(r),t=ye.test(n),a=ne.test(n),r=ye.test(d),n=ne.test(d),d=!t&&(!a||r||n),t=!r&&(!n||t||a),t=95===e?(u=d&&(!t||n),t&&(!d||a)):(u=39===e||34===e||126===e?d&&!t:d,t),this.pos=i,{numdelims:c,can_open:u,can_close:t})},Ue=function(e,d){var u=this.scanDelims(e);if(!u)return!1;var t=u.numdelims,a=this.pos;this.pos+=t;a=39===e?"’":34===e?"“":this.subject.slice(a,this.pos),a=Q(a);return d.appendChild(a),(u.can_open||u.can_close)&&(this.options.smart||39!==e&&34!==e)&&(this.delimiters={cc:e,numdelims:t,origdelims:t,node:a,previous:this.delimiters,next:null,can_open:u.can_open,can_close:u.can_close},null!==this.delimiters.previous&&(this.delimiters.previous.next=this.delimiters)),!0},je=function(e){null!==e.previous&&(e.previous.next=e.next),null===e.next?this.delimiters=e.previous:e.next.previous=e.previous},He=function(e){for(var d,u,t,a,r,n,c,i,s,o=[],l=0;l<8;l++)o[l]=e;for(u=this.delimiters;null!==u&&u.previous!==e;)u=u.previous;for(;null!==u;){var f=u.cc;if(u.can_close){switch(d=u.previous,c=!1,f){case 39:i=0;break;case 34:i=1;break;case 95:i=2;break;case 42:i=3+(u.can_open?3:0)+u.origdelims%3}for(;null!==d&&d!==e&&d!==o[i];){if(s=(u.can_open||d.can_close)&&u.origdelims%3!=0&&(d.origdelims+u.origdelims)%3==0,d.cc===u.cc&&d.can_open&&(!s||126===d.cc)){c=!0;break}d=d.previous}if(t=u,42===f||95===f)if(c){r=2<=u.numdelims&&2<=d.numdelims?2:1,m=d.node,b=u.node,d.numdelims-=r,u.numdelims-=r,m._literal=m._literal.slice(0,m._literal.length-r),b._literal=b._literal.slice(0,b._literal.length-r);for(var p=new g(1==r?"emph":"strong"),h=m._next;h&&h!==b;)n=h._next,h.unlink(),p.appendChild(h),h=n;m.insertAfter(p),de(d,u),0===d.numdelims&&(m.unlink(),this.removeDelimiter(d)),0===u.numdelims&&(b.unlink(),a=u.next,this.removeDelimiter(u),u=a)}else u=u.next;else if(126===f)if(c){var m=d.node,b=u.node,p=new g("del");for(h=m._next;h&&h!==b;)n=h._next,h.unlink(),p.appendChild(h),h=n;m.insertAfter(p),de(d,u),m.unlink(),this.removeDelimiter(d),b.unlink(),a=u.next,this.removeDelimiter(u),u=a}else u=u.next;else 39===f?(u.node._literal="’",c&&(d.node._literal="‘"),u=u.next):34===f&&(u.node._literal="”",c&&(d.node.literal="“"),u=u.next);c||(o[i]=t.previous,t.can_open||this.removeDelimiter(t))}else u=u.next}for(;null!==this.delimiters&&this.delimiters!==e;)this.removeDelimiter(this.delimiters)},ze=function(){var e=this.match(ce);if(null===e)return null;var d=e.match(ce),u=d[1],e=d[2],d={};return u&&(d.width=parseInt(u)),e&&(d.height=parseInt(e)),d},Ve=function(){var e=this.match(ie);return null===e?null:te(e.substr(1,e.length-2))},Ge=function(){var e=this.match(se);if(null!==e)return ue(te(e.substr(1,e.length-2)));if(60===this.peek())return null;for(var d,u=this.pos,t=0;-1!==(d=this.peek());)if(92===d&&oe.test(this.subject.charAt(this.pos+1)))this.pos+=1,-1!==this.peek()&&(this.pos+=1);else if(40===d)this.pos+=1,t+=1;else if(41===d){if(t<1)break;this.pos+=1,--t}else{if(null!==ve.exec(P(d)))break;this.pos+=1}return this.pos===u&&41!==d||0!==t?null:(e=this.subject.substr(u,this.pos-u),ue(te(e)))},Ze=function(){var e=this.match(Ee);return null===e||1001<e.length?0:e.length},$e=function(e){var d=this.pos;this.pos+=1;var u=Q("[");return e.appendChild(u),this.addBracket(u,d,!1),!0},Ke=function(e){var d,u=this.pos;return this.pos+=1,91===this.peek()?(this.pos+=1,d=Q("!["),e.appendChild(d),this.addBracket(d,u+1,!0)):e.appendChild(Q("!")),!0},Je=function(e){var d,u,t,a,r,n=!1;if(this.pos+=1,d=this.pos,null===(r=this.brackets))return e.appendChild(Q("]")),!0;if(!r.active)return e.appendChild(Q("]")),this.removeBracket(),!0;var c,i,s,o=r.image,l=this.pos;if(40===this.peek()&&(this.pos++,this.spnl()&&null!==(u=this.parseLinkDestination())&&this.spnl()&&(t=this.parseLinkSize()||!0)&&this.spnl()&&(ve.test(this.subject.charAt(this.pos-1))&&(a=this.parseLinkTitle()),1)&&this.spnl()&&41===this.peek()?(this.pos+=1,n=!0):this.pos=l),n||(c=this.pos,2<(i=this.parseLinkLabel())?s=this.subject.slice(c,c+i):r.bracketAfter||(s=this.subject.slice(r.index,d)),0===i&&(this.pos=l),!s||(s=this.refmap[ee(s)])&&(u=s.destination,a=s.title,n=!0)),n){var f,p,h=new g(o?"image":"link");for(h._destination=u,h._title=a||"",h._size=t,f=r.node._next;f;)p=f._next,f.unlink(),h.appendChild(f),f=p;if(e.appendChild(h),this.processEmphasis(r.previousDelimiter),this.removeBracket(),r.node.unlink(),!o)for(r=this.brackets;null!==r;)r.image||(r.active=!1),r=r.previous;return!0}return this.removeBracket(),this.pos=d,e.appendChild(Q("]")),!0},Ye=function(e,d,u){null!==this.brackets&&(this.brackets.bracketAfter=!0),this.brackets={node:e,previous:this.brackets,previousDelimiter:this.delimiters,index:d,image:u,active:!0}},Xe=function(){this.brackets=this.brackets.previous},We=function(e){var d;return!!(d=this.match(le))&&(e.appendChild(Q(S(d))),!0)},Qe=r.cache("^(?:[A-Za-z][A-Za-z\\d-.+]*:(?:\\/{1,3}|[\\pL\\d%])|www\\d{0,3}[.]|[\\pL\\d.\\-]+[.]\\pL{2,4}\\/)(?:\\[[\\da-f:]+\\]|[^\\s`!()\\[\\]{;:'\",<>?«»“”‘’*_]|[*_]+(?=[^_*\\s])|[`!\\[\\]{;:'\",<>?«»“”‘’](?=[^\\s()<>])|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+","i"),ed=function(e){if(this.brackets)return!1;if(u=this.tryMatch(Qe)){if(0!==this.pos&&"_"!==this.subject[this.pos-1]&&!Ce.test(this.subject[this.pos-1]))return!1;for(var d=u[0];/[?!.,,:*_~'"]$/.test(d);)d=d.substring(0,d.length-1);if(this.options.urlFilter&&!this.options.urlFilter(d))return!1;this.pos+=u.index+d.length;var u=new g("link");return u._destination=ue(d),u._title="",u.appendChild(Q(d)),e.appendChild(u),!0}return!1},dd=/^@([a-z][a-z0-9._-]*)/i,ud=function(e){if(this.brackets)return!1;var d;if(d=this.tryMatch(dd)){if(0===this.pos||Ce.test(this.subject[this.pos-1])){this.acceptMatch(d);var u=new g("at_mention");return u._mentionName=d[1],u.appendChild(Q(d[0])),e.appendChild(u),!0}return!1}return!1},td=/^~([a-z0-9_-]+)/i,ad=function(e){if(this.brackets)return!1;var d;if(d=this.tryMatch(td)){if(0===this.pos||Ce.test(this.subject[this.pos-1])){this.acceptMatch(d);var u=new g("channel_link");return u._channelName=d[1],u.appendChild(Q(d[0])),e.appendChild(u),!0}return!1}return!1},rd=/^:([a-z0-9_\-+]+):\B/i,nd=function(e){var d;if(d=this.tryMatch(rd)){if(0===this.pos||Ce.test(this.subject[this.pos-1])){this.acceptMatch(d);var u=new g("emoji");return u._literal=d[0],u._emojiName=d[1],u.appendChild(Q(d[0])),e.appendChild(u),!0}return!1}return!1},cd=/^(?:(:-?\))|(;-?\))|(:o)|(:-o)|(:-?])|(:-?d)|(x-d)|(:-?p)|(:-?[[@])|(:-?\()|(:[`'’]-?\()|(:-?\/)|(:-?s)|(:-?\|)|(:-?\$)|(:-x)|(<3|&lt;3)|(<\/3|&lt;\/3))(?=$|\W)/i,id=["slightly_smiling_face","wink","open_mouth","scream","smirk","smile","stuck_out_tongue_closed_eyes","stuck_out_tongue","rage","slightly_frowning_face","cry","confused","confounded","neutral_face","flushed","mask","heart","broken_heart"],sd=function(e){var d;if(d=this.tryMatch(cd)){if(0===this.pos||ve.test(this.subject[this.pos-1])||qe.test(this.subject[this.pos-1])){this.acceptMatch(d);var u=new g("emoji");u._literal=d[0];for(var t=0;t<id.length;t++)d[t+1]&&(u._emojiName=id[t]);return u.appendChild(Q(d[0])),e.appendChild(u),!0}return!1}return!1},od=r.cache("^(?:[\\p{L}\\p{Nd}!#$%&'*+\\-\\/=?^_`{|}~](?:[\\p{L}\\p{Nd}!#$%&'*+\\-\\/=?^_`{|}~]|\\.(?!\\.|@))*|\\\"[\\p{L}\\p{Nd}!#$%&'*+\\-\\/=?^_`{|}~\\s(),:;<>@\\[\\].]+\\\")@[\\pL\\d.\\-]+[.]\\pL{2,4}(?=$|[^\\p{L}])"),ld=function(e){if(this.brackets)return!1;var d;if(d=this.tryMatch(od)){if(0===this.pos||Ce.test(this.subject[this.pos-1])){this.acceptMatch(d);var u=d[0],t=new g("link");return t._destination=ue("mailto:"+u),t._title="",t.appendChild(Q(d[0])),e.appendChild(t),!0}return!1}return!1},fd=r.cache("^#(\\pL[\\pL\\d\\-_.]*[\\pL\\d])"),pd=function(e){if(this.brackets)return!1;var d;if(d=this.tryMatch(fd,!0)){if((0===this.pos||Ce.test(this.subject[this.pos-1])||Le.test(this.subject[this.pos-1]))&&d[1].length>=this.options.minimumHashtagLength){this.acceptMatch(d);var u=new g("hashtag");return u._hashtag=d[1],u.appendChild(Q(d[0])),e.appendChild(u),!0}return!1}return!1},hd=/^\$([^\$\n]+)\$(?!\w)/,md=function(e){if(this.brackets)return!1;var d;if(d=this.tryMatch(hd,!0)){if(0===this.pos||Ce.test(this.subject[this.pos-1])||Le.test(this.subject[this.pos-1])){this.acceptMatch(d);var u=new g("latex_inline");return u._latexCode=d[1].trim(),u.appendChild(Q(d[0])),e.appendChild(u),!0}return!1}},bd=function(e){var d;return!!(d=this.match(Ae))&&(this.options.smart?e.appendChild(Q(d.replace(he,"…").replace(me,function(e){var d=0,u=0;return e.length%3==0?u=e.length/3:e.length%2==0?d=e.length/2:u=e.length%3==2?(d=1,(e.length-2)/3):(d=2,(e.length-4)/3),"—".repeat(u)+"–".repeat(d)}))):e.appendChild(Q(d)),!0)},gd=function(e){this.pos+=1;var d,u=e._lastChild;return u&&"text"===u.type&&" "===u._literal[u._literal.length-1]?(d=" "===u._literal[u._literal.length-2],u._literal=u._literal.replace(we,""),e.appendChild(new g(d?"linebreak":"softbreak"))):e.appendChild(new g("softbreak")),this.match(xe),!0},_d=function(e,d){var u,t;this.subject=e,this.pos=0;var a=this.pos;if(0===(r=this.parseLinkLabel()))return 0;if(n=this.subject.substr(0,r),58!==this.peek())return this.pos=a,0;if(this.pos++,this.spnl(),null===(u=this.parseLinkDestination()))return this.pos=a,0;e=this.pos;this.spnl(),null===(t=this.pos!==e?this.parseLinkTitle():t)&&(t="",this.pos=e);var r=!0;if(!(r=null===this.match(ke)?""!==t&&(t="",this.pos=e,null!==this.match(ke)):r))return this.pos=a,0;var n=ee(n);return""===n?(this.pos=a,0):(d[n]||(d[n]={destination:u,title:t}),this.pos-a)},vd=function(e){var d=!1,u=this.peek();if(-1===u)return!1;switch(u){case 10:d=this.parseNewline(e);break;case 92:d=this.parseBackslash(e);break;case 96:d=this.parseBackticks(e);break;case 42:case 95:d=this.handleDelim(u,e);break;case 39:case 34:d=this.options.smart&&this.handleDelim(u,e);break;case 91:d=this.parseOpenBracket(e);break;case 33:d=this.parseBang(e);break;case 93:d=this.parseCloseBracket(e);break;case 60:d=this.parseAutolink(e)||this.parseHtmlTag(e)||this.parseEmoticon(e);break;case 38:d=this.parseEmoticon(e)||this.parseEntity(e);break;case 64:d=this.parseAtMention(e);break;case 126:d=this.handleDelim(u,e)||this.parseChannelLink(e);break;case 58:d=this.parseEmoji(e)||this.parseEmoticon(e);break;case 59:d=this.parseEmoticon(e);break;case 88:case 120:d=this.parseEmoticon(e);break;case 35:d=this.parseHashtag(e);break;case 36:d=this.parseInlineLatex(e)}return d=(d=(d=d||this.parseEmail(e))||this.parseUrl(e))||this.parseString(e),!0},yd=function(e){for(this.subject=e._string_content.trim(),this.pos=0,this.delimiters=null,this.brackets=null;this.parseInline(e););e._string_content=null,this.processEmphasis(null)};function wd(e){return{subject:"",delimiters:null,brackets:null,pos:0,refmap:{},match:De,matchRegex:Ie,tryMatch:Se,acceptMatch:Ne,peek:Te,spnl:Oe,parseBackticks:Fe,parseBackslash:Be,parseAutolink:Re,parseHtmlTag:Me,scanDelims:Pe,handleDelim:Ue,parseLinkSize:ze,parseLinkTitle:Ve,parseLinkDestination:Ge,parseLinkLabel:Ze,parseOpenBracket:$e,parseBang:Ke,parseCloseBracket:Je,addBracket:Ye,removeBracket:Xe,parseEntity:We,parseUrl:ed,parseAtMention:ud,parseChannelLink:ad,parseEmoji:nd,parseEmoticon:sd,parseEmail:ld,parseHashtag:pd,parseInlineLatex:md,parseString:bd,parseNewline:gd,parseReference:_d,parseInline:vd,processEmphasis:He,removeDelimiter:je,options:e||{},parse:yd}}function xd(e){return 32===e||9===e}function kd(e,d){return d<e.length?e.charCodeAt(d):-1}function Cd(e){return e.replace(eu,"|")}function Ed(e){for(;e;){if(e._lastLineBlank)return 1;var d=e.type;if(e._lastLineChecked||"list"!==d&&"item"!==d){e._lastLineChecked=!0;break}e._lastLineChecked=!0,e=e._lastChild}}function Ld(){var e;this.partiallyConsumedTab&&(this.offset+=1,e=4-this.column%4,this.tip._string_content+=" ".repeat(e)),this.tip._string_content+=this.currentLine.slice(this.offset)+"\n"}function qd(e,d){for(;!this.blocks[this.tip.type].canContain(e);)this.finalize(this.tip,this.lineNumber-1);return(d=new g(e,[[this.lineNumber,d+1],[0,0]]))._string_content="",this.tip.appendChild(d),this.tip=d}function Ad(){if(!this.allClosed){for(;this.oldtip!==this.lastMatchedContainer;){var e=this.oldtip._parent;this.finalize(this.oldtip,this.lineNumber-1),this.oldtip=e}this.allClosed=!0}}function Dd(e,d){for(var u,t,a,r=this.currentLine;0<e&&(a=r[this.offset]);)"\t"===a?(u=4-this.column%4,d?(this.partiallyConsumedTab=e<u,this.column+=t=e<u?e:u,this.offset+=this.partiallyConsumedTab?0:1,e-=t):(this.partiallyConsumedTab=!1,this.column+=u,this.offset+=1,--e)):(this.partiallyConsumedTab=!1,this.offset+=1,this.column+=1,--e)}function Id(){this.offset=this.nextNonspace,this.column=this.nextNonspaceColumn,this.partiallyConsumedTab=!1}function Sd(){for(var e,d=this.currentLine,u=this.offset,t=this.column;""!==(e=d.charAt(u));)if(" "===e)u++,t++;else{if("\t"!==e)break;u++,t+=4-t%4}this.blank="\n"===e||"\r"===e||""===e,this.nextNonspace=u,this.nextNonspaceColumn=t,this.indent=this.nextNonspaceColumn-this.column,this.indented=this.indent>=Rd}function Nd(e,d){var u,t=!0,a=this.doc;for(this.oldtip=this.tip,this.offset=0,this.column=0,this.blank=!1,this.partiallyConsumedTab=!1,this.lineNumber+=1,-1!==e.indexOf("\0")&&(e=e.replace(/\0/g,"�")),this.currentLine=e,this.nextLine=d;(u=a._lastChild)&&u._open;){switch(a=u,this.findNextNonspace(),this.blocks[a.type].continue(this,a)){case 0:break;case 1:t=!1;break;case 2:return;default:throw"continue returned illegal value, must be 0, 1, or 2"}if(!t){a=a._parent;break}}this.allClosed=a===this.oldtip;for(var r="paragraph"!==(this.lastMatchedContainer=a).type&&du[a.type].acceptsLines,n=this.blockStarts,c=n.length;!r;){if(this.findNextNonspace(),!this.indented&&!Hd.test(e.slice(this.nextNonspace))&&"table"!==a.type&&"table_row"!==a.type&&d&&!zd.test(d.slice(this.nextNonspace))){this.advanceNextNonspace();break}for(var i=0;i<c;){var s=n[i](this,a);if(1===s){a=this.tip;break}if(2===s){a=this.tip,r=!0;break}i++}if(i===c){this.advanceNextNonspace();break}}if(this.allClosed||this.blank||"paragraph"!==this.tip.type||"item"===this.tip._parent.type&&0===this.indent){this.closeUnmatchedBlocks(),this.blank&&a.lastChild&&(a.lastChild._lastLineBlank=!0);for(var o=a.type,l=this.blank&&!("block_quote"===o||"code_block"===o&&a._isFenced||"item"===o&&!a._firstChild&&a.sourcepos[0][0]===this.lineNumber),f=a;f;)f._lastLineBlank=l,f=f._parent;this.blocks[o].acceptsLines?(this.addLine(),"html_block"===o&&1<=a._htmlBlockType&&a._htmlBlockType<=5&&Ud[a._htmlBlockType].test(this.currentLine.slice(this.offset))&&(this.lastLineLength=e.length,this.finalize(a,this.lineNumber))):this.offset<e.length&&!this.blank&&(a=this.addChild("paragraph",this.offset),this.advanceNextNonspace(),this.addLine())}else this.addLine();this.lastLineLength=e.length}function Td(){this.shouldSkipNextLine=!0}function Od(e,d){var u=e._parent;e._open=!1,e.sourcepos[1]=[d,this.lastLineLength],this.blocks[e.type].finalize(this,e),this.tip=u}function Fd(e){var d,u,t,a=e.walker();for(this.inlineParser.refmap=this.refmap,this.inlineParser.options=this.options;u=a.next();)t=(d=u.node).type,u.entering||"paragraph"!==t&&"heading"!==t&&"table_cell"!==t||this.inlineParser.parse(d)}function Bd(e){this.doc=new ru,this.tip=this.doc,this.refmap={},this.lineNumber=0,this.lastLineLength=0,this.offset=0,this.column=0,this.lastMatchedContainer=this.doc,this.currentLine="",this.shouldSkipNextLine=!1,this.options.time&&console.time("preparing input");var d=e.split(Xd),u=d.length;e.charCodeAt(e.length-1)===Md&&--u,this.options.time&&console.timeEnd("preparing input"),this.options.time&&console.time("block parsing");for(var t=0;t<u;t++)this.shouldSkipNextLine?this.shouldSkipNextLine=!1:this.incorporateLine(d[t],d[t+1]);for(;this.tip;)this.finalize(this.tip,u);return this.options.time&&console.timeEnd("block parsing"),this.options.time&&console.time("inline parsing"),this.processInlines(this.doc),this.options.time&&console.timeEnd("inline parsing"),this.doc}var Rd=4,Md=10,Pd=[/./,/^<(?:script|pre|textarea|style)(?:\s|>|$)/i,/^<!--/,/^<[?]/,/^<![A-Z]/,/^<!\[CDATA\[/,/^<[/]?(?:address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[123456]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|nav|noframes|ol|optgroup|option|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul)(?:\s|[/]?[>]|$)/i,new RegExp("^(?:"+p+"|"+h+")\\s*$","i")],Ud=[/./,/<\/(?:script|pre|textarea|style)>/i,/-->/,/\?>/,/>/,/\]\]>/],jd=/^(?:\*[ \t]*){3,}$|^(?:_[ \t]*){3,}$|^(?:-[ \t]*){3,}$/,Hd=/^[#`~*+_=<>0-9-|]/,zd=/[|\-]/,Vd=/[^ \t\f\v\r\n]/,Gd=/^[*+-]/,Zd=/^(\d{1,9})([.)])/,$d=/^#{1,6}(?:[ \t]+|$)/,Kd=/^`{3,}(?!.*`)|^~{3,}/,Jd=/^(?:`{3,}|~{3,})(?= *$)/,Yd=/^(?:=+|-+)[ \t]*$/,Xd=/\r\n|\n|\r/,Wd=/^[ \t]{0,3}((?:\|[ \t]*)?:?-+:?[ \t]*(?:\|(?:[ \t]*:?-+:?[ \t]*)?)*\|?)$/,Qd=/^(\|?)(?:(?:\\\||[^|])*\|?)+$/,eu=/\|\s+$/,du={document:{continue:function(){return 0},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},list:{continue:function(){return 0},finalize:function(e,d){for(var u=d._firstChild;u;){if(Ed(u)&&u._next){d._listData.tight=!1;break}for(var t=u._firstChild;t;){if(Ed(t)&&(u._next||t._next)){d._listData.tight=!1;break}t=t._next}u=u._next}},canContain:function(e){return"item"===e},acceptsLines:!1},block_quote:{continue:function(e){var d=e.currentLine;return e.indented||62!==kd(d,e.nextNonspace)?1:(e.advanceNextNonspace(),e.advanceOffset(1,!1),xd(kd(d,e.offset))&&e.advanceOffset(1,!0),0)},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},item:{continue:function(e,d){if(e.blank){if(null==d._firstChild)return 1;e.advanceNextNonspace()}else{if(!(e.indent>=d._listData.markerOffset+d._listData.padding))return 1;e.advanceOffset(d._listData.markerOffset+d._listData.padding,!0)}return 0},finalize:function(){},canContain:function(e){return"item"!==e},acceptsLines:!1},heading:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},thematic_break:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},code_block:{continue:function(e,d){var u=e.currentLine,t=e.indent;if(d._isFenced){var a=t<=3&&u.charAt(e.nextNonspace)===d._fenceChar&&u.slice(e.nextNonspace).match(Jd);if(a&&a[0].length>=d._fenceLength)return e.lastLineLength=e.offset+t+a[0].length,e.finalize(d,e.lineNumber),2;for(var r=d._fenceOffset;0<r&&xd(kd(u,e.offset));)e.advanceOffset(1,!0),r--}else if(Rd<=t)e.advanceOffset(Rd,!0);else{if(!e.blank)return 1;e.advanceNextNonspace()}return 0},finalize:function(e,d){var u,t,a;d._isFenced?(a=(u=d._string_content).indexOf("\n"),t=u.slice(0,a),a=u.slice(a+1),d.info=L(t.trim()),d._literal=a):d._literal=d._string_content.replace(/(\n *)+$/,"\n"),d._string_content=null},canContain:function(){return!1},acceptsLines:!0},html_block:{continue:function(e,d){return!e.blank||6!==d._htmlBlockType&&7!==d._htmlBlockType?0:1},finalize:function(e,d){d._literal=d._string_content.replace(/(\n *)+$/,""),d._string_content=null},canContain:function(){return!1},acceptsLines:!0},table:{continue:function(e){return e.blank||e.indented?1:0},finalize:function(e,d){for(var u=d.alignColumns.length,t=d.firstChild;t;t=t.next){for(var a=0,r=t.firstChild;r;r=r.next)if(r.align=d.alignColumns[a],u<(a+=1)+1){r._next=null,t._lastChild=r;break}for(;a<u;)(r=new g("table_cell"))._string_content="",r.isHeading=t.isHeading,r.align=d.alignColumns[a],t.appendChild(r),a+=1}},canContain:function(e){return"table_row"===e},acceptsLines:!1},table_row:{continue:function(e){return e.blank?2:1},finalize:function(e,d){if(d===d.parent.firstChild){d.isHeading=!0;for(var u=d.firstChild;u;u=u.next)u.isHeading=!0}},canContain:function(e){return"table_cell"===e},acceptsLines:!1},table_cell:{continue:function(){return 1},finalize:function(){},canContain:function(){return!1},acceptsLines:!1},paragraph:{continue:function(e){return e.blank?1:0},finalize:function(e,d){for(var u,t,a=!1;91===kd(d._string_content,0)&&(u=e.inlineParser.parseReference(d._string_content,e.refmap));)d._string_content=d._string_content.slice(u),a=!0;a&&(t=d._string_content,!Vd.test(t))&&d.unlink()},canContain:function(){return!1},acceptsLines:!0}},uu=[function(e){return e.indented||62!==kd(e.currentLine,e.nextNonspace)?0:(e.advanceNextNonspace(),e.advanceOffset(1,!1),xd(kd(e.currentLine,e.offset))&&e.advanceOffset(1,!0),e.closeUnmatchedBlocks(),e.addChild("block_quote",e.nextNonspace),1)},function(e){var d;if(e.indented||!(d=e.currentLine.slice(e.nextNonspace).match($d)))return 0;e.advanceNextNonspace(),e.advanceOffset(d[0].length,!1),e.closeUnmatchedBlocks();var u=e.addChild("heading",e.nextNonspace);return u.level=d[0].trim().length,u._string_content=e.currentLine.slice(e.offset).replace(/^[ \t]*#+[ \t]*$/,"").replace(/[ \t]+#+[ \t]*$/,""),e.advanceOffset(e.currentLine.length-e.offset),2},function(e){var d;if(e.indented||!(d=e.currentLine.slice(e.nextNonspace).match(Kd)))return 0;var u=d[0].length;e.closeUnmatchedBlocks();var t=e.addChild("code_block",e.nextNonspace);return t._isFenced=!0,t._fenceLength=u,t._fenceChar=d[0][0],t._fenceOffset=e.indent,e.advanceNextNonspace(),e.advanceOffset(u,!1),2},function(e,d){if(!e.indented&&60===kd(e.currentLine,e.nextNonspace))for(var u=e.currentLine.slice(e.nextNonspace),t=1;t<=7;t++)if(Pd[t].test(u)&&(t<7||"paragraph"!==d.type&&(e.allClosed||e.blank||"paragraph"!==e.tip.type)))return e.closeUnmatchedBlocks(),e.addChild("html_block",e.offset)._htmlBlockType=t,2;return 0},function(e,d){var u,t;if(e.indented||"paragraph"!==d.type||!(u=e.currentLine.slice(e.nextNonspace).match(Yd)))return 0;for(e.closeUnmatchedBlocks();91===kd(d._string_content,0)&&(t=e.inlineParser.parseReference(d._string_content,e.refmap));)d._string_content=d._string_content.slice(t);if(0<d._string_content.length){var a=new g("heading",d.sourcepos);return a.level="="===u[0][0]?1:2,a._string_content=d._string_content,d.insertAfter(a),d.unlink(),e.tip=a,e.advanceOffset(e.currentLine.length-e.offset,!1),2}return 0},function(e){return!e.indented&&jd.test(e.currentLine.slice(e.nextNonspace))?(e.closeUnmatchedBlocks(),e.addChild("thematic_break",e.nextNonspace),e.advanceOffset(e.currentLine.length-e.offset,!1),2):0},function(e,d){var u,t,a;return e.indented&&"list"!==d.type||!(u=function(e,d){var u,t,a,r,n=e.currentLine.slice(e.nextNonspace),c={type:null,tight:!0,bulletChar:null,start:null,delimiter:null,padding:null,markerOffset:e.indent};if(4<=e.indent)return null;if(u=n.match(Gd))c.type="bullet",c.bulletChar=u[0][0];else{if(!(u=n.match(Zd))||"paragraph"===d.type&&1!=u[1])return null;c.type="ordered",c.start=parseInt(u[1]),c.delimiter=u[2]}if(-1!==(t=kd(e.currentLine,e.nextNonspace+u[0].length))&&9!==t&&32!==t)return null;if("paragraph"===d.type&&!e.currentLine.slice(e.nextNonspace+u[0].length).match(Vd))return null;for(e.advanceNextNonspace(),e.advanceOffset(u[0].length,!0),a=e.column,r=e.offset;e.advanceOffset(1,!0),t=kd(e.currentLine,e.offset),e.column-a<5&&xd(t););n=-1===kd(e.currentLine,e.offset),d=e.column-a;return 5<=d||d<1||n?(c.padding=u[0].length+1,e.column=a,e.offset=r,xd(kd(e.currentLine,e.offset))&&e.advanceOffset(1,!0)):c.padding=u[0].length+d,c}(e,d))?0:(e.closeUnmatchedBlocks(),"list"===e.tip.type&&(t=d._listData,a=u,t.type===a.type&&t.delimiter===a.delimiter&&t.bulletChar===a.bulletChar)||((d=e.addChild("list",e.nextNonspace))._listData=u),(d=e.addChild("item",e.nextNonspace))._listData=u,1)},function(e){return e.indented&&"paragraph"!==e.tip.type&&!e.blank?(e.advanceOffset(Rd,!0),e.closeUnmatchedBlocks(),e.addChild("code_block",e.offset),2):0},function(e,d){if("document"!==d.type)return 0;if(e.indented)return 0;if(!e.nextLine)return 0;var u=Cd(e.nextLine),d=Wd.exec(u);if(!d||-1===d[0].indexOf("|"))return 0;const t=Cd(e.currentLine);u=Qd.exec(t.slice(e.nextNonspace));if(!u)return 0;d=tu(d[1]),u=tu(u[0]);return d.length!==u.length?0:(e.closeUnmatchedBlocks(),e.advanceNextNonspace(),e.addChild("table",e.offset),e.tip.alignColumns=d.map(au),e.skipNextLine(),1)},function(e,d){if("table"!==d.type)return 0;if(e.blank)return 2;d=Qd.exec(e.currentLine.slice(e.nextNonspace));if(!d)return 0;e.closeUnmatchedBlocks(),e.advanceNextNonspace(),e.addChild("table_row",e.offset),e.advanceOffset(d[1].length,!1);for(var u=tu(d[0]),t=u.length,a=0;a<t;a++)e.addChild("table_cell",e.offset),e.tip._string_content=u[a].trim(),e.advanceOffset(u[a].length+1);return 2}],tu=function(e){e=e.replace(/^\|/,"");for(var d,u=/\||((?:\\\||[^|])+)\|?/g,t=[];d=u.exec(e);)t.push(d[1]||"");return t},au=function(e){return":"===(e=e.trim()).charAt(0)?":"===e.charAt(e.length-1)?"center":"left":e.endsWith(":")?"right":""},ru=function(){return new g("document",[[1,1],[0,0]])};function nu(){}nu.prototype.render=function(e){var d,u,t=e.walker();for(this.buffer="",this.lastOut="\n";d=t.next();)this[u=d.node.type]&&this[u](d.node,d.entering);return this.buffer},nu.prototype.out=function(e){this.lit(e)},nu.prototype.lit=function(e){this.buffer+=e,this.lastOut=e},nu.prototype.cr=function(){"\n"!==this.lastOut&&this.lit("\n")},nu.prototype.esc=function(e){return e};function cu(e){return iu.test(e)&&!su.test(e)}var iu=/^javascript:|vbscript:|file:|data:/i,su=/^data:image\/(?:png|gif|jpeg|webp)/i;function ou(e){(e=e||{}).softbreak=e.softbreak||"\n",this.esc=e.esc||q,this.disableTags=0,this.lastOut="\n",this.options=e}(ou.prototype=Object.create(nu.prototype)).text=function(e){this.out(e.literal)},ou.prototype.html_inline=function(e){this.options.safe?this.lit("\x3c!-- raw HTML omitted --\x3e"):this.lit(e.literal)},ou.prototype.html_block=function(e){this.cr(),this.options.safe?this.lit("\x3c!-- raw HTML omitted --\x3e"):this.lit(e.literal),this.cr()},ou.prototype.softbreak=function(){this.lit(this.options.softbreak)},ou.prototype.linebreak=function(){this.tag("br",[],!0),this.cr()},ou.prototype.link=function(e,d){var u=this.attrs(e);d?(this.options.safe&&cu(e.destination)||u.push(["href",this.esc(e.destination)]),e.title&&u.push(["title",this.esc(e.title)]),this.tag("a",u)):this.tag("/a")},ou.prototype.at_mention=function(e,d){d?(d=this.attrs(e),e.mentionName&&d.push(["data-mention-name",this.esc(e.mentionName)]),this.tag("span",d)):this.tag("/span")},ou.prototype.channel_link=function(e,d){d?(d=this.attrs(e),e.channelName&&d.push(["data-channel-name",this.esc(e.channelName)]),this.tag("span",d)):this.tag("/span")},ou.prototype.emoji=function(e,d){d?(d=this.attrs(e),e.emojiName&&(d.push(["data-emoji-name",this.esc(e.emojiName)]),d.push(["data-literal",this.esc(e.literal)])),this.tag("span",d)):this.tag("/span")},ou.prototype.hashtag=function(e,d){d?(d=this.attrs(e),e.hashtag&&d.push(["data-hashtag",this.esc(e.hashtag)]),this.tag("span",d)):this.tag("/span")},ou.prototype.image=function(e,d){d?(0===this.disableTags&&(this.options.safe&&cu(e.destination)?this.lit('<img src="" alt="'):this.lit('<img src="'+this.esc(e.destination)+'" alt="')),this.disableTags+=1):(--this.disableTags,0===this.disableTags&&(e.title&&this.lit('" title="'+this.esc(e.title)),e.size&&(e.size.width&&this.lit('" width="'+e.size.width),e.size.height&&this.lit('" height="'+e.size.height)),this.lit('" />')))},ou.prototype.emph=function(e,d){this.tag(d?"em":"/em")},ou.prototype.strong=function(e,d){this.tag(d?"strong":"/strong")},ou.prototype.del=function(e,d){this.tag(d?"del":"/del")},ou.prototype.paragraph=function(e,d){var u=e.parent.parent,e=this.attrs(e);null!==u&&"list"===u.type&&u.listTight||(d?(this.cr(),this.tag("p",e)):(this.tag("/p"),this.cr()))},ou.prototype.heading=function(e,d){var u="h"+e.level,e=this.attrs(e);d?(this.cr(),this.tag(u,e)):(this.tag("/"+u),this.cr())},ou.prototype.code=function(e){this.tag("code"),this.out(e.literal),this.tag("/code")},ou.prototype.code_block=function(e){var d=e.info?e.info.split(/\s+/):[],u=this.attrs(e);0<d.length&&0<d[0].length&&u.push(["class","language-"+this.esc(d[0])]),this.cr(),this.tag("pre"),this.tag("code",u),this.out(e.literal),this.tag("/code"),this.tag("/pre"),this.cr()},ou.prototype.thematic_break=function(e){e=this.attrs(e),this.cr(),this.tag("hr",e,!0),this.cr()},ou.prototype.block_quote=function(e,d){e=this.attrs(e),d?(this.cr(),this.tag("blockquote",e)):(this.cr(),this.tag("/blockquote")),this.cr()},ou.prototype.list=function(e,d){var u="bullet"===e.listType?"ul":"ol",t=this.attrs(e);d?(null!==(e=e.listStart)&&1!==e&&t.push(["start",e.toString()]),this.cr(),this.tag(u,t)):(this.cr(),this.tag("/"+u)),this.cr()},ou.prototype.item=function(e,d){e=this.attrs(e),d?this.tag("li",e):(this.tag("/li"),this.cr())},ou.prototype.table=function(e,d){e=this.attrs(e),d?(this.cr(),this.tag("table",e)):this.tag("/table"),this.cr()},ou.prototype.table_row=function(e,d){var u=this.attrs(e);d?(e===e.parent.firstChild?(this.cr(),this.tag("thead"),this.cr()):e===e.parent.firstChild.next&&(this.cr(),this.tag("tbody"),this.cr()),this.cr(),this.tag("tr",u),this.cr()):(this.tag("/tr"),e===e.parent.firstChild?(this.cr(),this.tag("/thead")):e===e.parent.lastChild&&this.tag("/tbody"))},ou.prototype.table_cell=function(e,d){var u=this.attrs(e),t=e.isHeading?"th":"td";e.align&&u.push(["align",e.align]),d?this.tag(t,u):(this.tag("/"+t),this.cr())},ou.prototype.custom_inline=function(e,d){d&&e.onEnter?this.lit(e.onEnter):!d&&e.onExit&&this.lit(e.onExit)},ou.prototype.custom_block=function(e,d){this.cr(),d&&e.onEnter?this.lit(e.onEnter):!d&&e.onExit&&this.lit(e.onExit),this.cr()},ou.prototype.esc=q,ou.prototype.out=function(e){this.lit(this.esc(e))},ou.prototype.tag=function(e,d,u){if(!(0<this.disableTags)){if(this.buffer+="<"+e,d&&0<d.length)for(var t,a=0;void 0!==(t=d[a]);)this.buffer+=" "+t[0]+'="'+t[1]+'"',a++;u&&(this.buffer+=" /"),this.buffer+=">",this.lastOut=">"}},ou.prototype.attrs=function(e){var d=[];return!this.options.sourcepos||(e=e.sourcepos)&&d.push(["data-sourcepos",String(e[0][0])+":"+String(e[0][1])+"-"+String(e[1][0])+":"+String(e[1][1])]),d};var lu=/\<[^>]*\>/;function fu(e){e=e||{},this.disableTags=0,this.lastOut="\n",this.indentLevel=0,this.indent="  ",this.esc=e.esc||q,this.options=e}(fu.prototype=Object.create(nu.prototype)).render=function(e){var d;this.buffer="";var u,t,a,r,n,c,i=e.walker(),s=this.options;for(s.time&&console.time("rendering"),this.buffer+='<?xml version="1.0" encoding="UTF-8"?>\n',this.buffer+='<!DOCTYPE document SYSTEM "CommonMark.dtd">\n';u=i.next();)if(a=u.entering,n=(t=u.node).type,r=t.isContainer,c="thematic_break"===n||"linebreak"===n||"softbreak"===n,u=n.replace(/([a-z])([A-Z])/g,"$1_$2").toLowerCase(),a){switch(d=[],n){case"document":d.push(["xmlns","http://commonmark.org/xml/1.0"]);break;case"list":null!==t.listType&&d.push(["type",t.listType.toLowerCase()]),null!==t.listStart&&d.push(["start",String(t.listStart)]),null!==t.listTight&&d.push(["tight",t.listTight?"true":"false"]);var o=t.listDelimiter;null!==o&&d.push(["delimiter","."===o?"period":"paren"]);break;case"code_block":t.info&&d.push(["info",t.info]);break;case"heading":d.push(["level",String(t.level)]);break;case"link":case"image":d.push(["destination",t.destination]),d.push(["title",t.title]);break;case"at_mention":d.push(["mention-name",t.mentionName]);break;case"emoji":d.push(["emoji-name",t.emojiName]),d.push(["literal",t.literal]);break;case"custom_inline":case"custom_block":d.push(["on_enter",t.onEnter]),d.push(["on_exit",t.onExit])}!s.sourcepos||(n=t.sourcepos)&&d.push(["sourcepos",String(n[0][0])+":"+String(n[0][1])+"-"+String(n[1][0])+":"+String(n[1][1])]),this.cr(),this.out(this.tag(u,d,c)),r?this.indentLevel+=1:c||((c=t.literal)&&this.out(this.esc(c)),this.out(this.tag("/"+u)))}else--this.indentLevel,this.cr(),this.out(this.tag("/"+u));return s.time&&console.timeEnd("rendering"),this.buffer+="\n",this.buffer},fu.prototype.out=function(e){0<this.disableTags?this.buffer+=e.replace(lu,""):this.buffer+=e,this.lastOut=e},fu.prototype.cr=function(){if("\n"!==this.lastOut){this.buffer+="\n",this.lastOut="\n";for(var e=this.indentLevel;0<e;e--)this.buffer+=this.indent}},fu.prototype.tag=function(e,d,u){var t="<"+e;if(d&&0<d.length)for(var a,r=0;void 0!==(a=d[r]);)t+=" "+a[0]+'="'+this.esc(a[1])+'"',r++;return u&&(t+=" /"),t+=">"},fu.prototype.esc=q,e.HtmlRenderer=ou,e.Node=g,e.Parser=function(e){return null==(e=e||{}).minimumHashtagLength&&(e.minimumHashtagLength=3),{doc:new ru,blocks:du,blockStarts:uu,tip:this.doc,oldtip:this.doc,currentLine:"",lineNumber:0,offset:0,column:0,nextNonspace:0,nextNonspaceColumn:0,indent:0,indented:!1,blank:!1,partiallyConsumedTab:!1,allClosed:!0,lastMatchedContainer:this.doc,refmap:{},lastLineLength:0,inlineParser:new wd(e),findNextNonspace:Sd,advanceOffset:Dd,advanceNextNonspace:Id,addLine:Ld,addChild:qd,incorporateLine:Nd,skipNextLine:Td,finalize:Od,processInlines:Fd,closeUnmatchedBlocks:Ad,parse:Bd,options:e}},e.Renderer=nu,e.XmlRenderer=fu,Object.defineProperty(e,"__esModule",{value:!0})});
diff --git a/node_modules/commonmark/lib/blocks.js b/node_modules/commonmark/lib/blocks.js
index 9262a4d..8ffa01b 100644
--- a/node_modules/commonmark/lib/blocks.js
+++ b/node_modules/commonmark/lib/blocks.js
@@ -35,7 +35,9 @@ var reHtmlBlockClose = [
 
 var reThematicBreak = /^(?:\*[ \t]*){3,}$|^(?:_[ \t]*){3,}$|^(?:-[ \t]*){3,}$/;
 
-var reMaybeSpecial = /^[#`~*+_=<>0-9-]/;
+var reMaybeSpecial = /^[#`~*+_=<>0-9-|]/;
+
+var reMaybeDelimiterRow = /[|\-]/;
 
 var reNonSpace = /[^ \t\f\v\r\n]/;
 
@@ -53,6 +55,12 @@ var reSetextHeadingLine = /^(?:=+|-+)[ \t]*$/;
 
 var reLineEnding = /\r\n|\n|\r/;
 
+var reTableDelimiter = /^[ \t]{0,3}((?:\|[ \t]*)?:?-+:?[ \t]*(?:\|(?:[ \t]*:?-+:?[ \t]*)?)*\|?)$/;
+
+var reTableRow = /^(\|?)(?:(?:\\\||[^|])*\|?)+$/;
+
+var reTablePipeSpaceEnding = /\|\s+$/;
+
 // Returns true if string contains only space characters.
 var isBlank = function(s) {
     return !reNonSpace.test(s);
@@ -70,6 +78,10 @@ var peek = function(ln, pos) {
     }
 };
 
+var trimSpacesAfterPipe = function(ln) {
+    return ln.replace(reTablePipeSpaceEnding,"|");
+}
+
 // DOC PARSER
 
 // These are methods of a Parser object, defined below.
@@ -431,6 +443,84 @@ var blocks = {
         },
         acceptsLines: true
     },
+    table: {
+        continue: function(parser) {
+            if (parser.blank) {
+                // next line is blank so the table has ended
+                return 1;
+            } else if (parser.indented) {
+                // next line is indented so its part of a list or code block
+                return 1;
+            }
+
+            return 0;
+        },
+        finalize: function(parser, block) {
+            var numberOfColumns = block.alignColumns.length;
+
+            for (var row = block.firstChild; row; row = row.next) {
+                var i = 0;
+                for (var cell = row.firstChild; cell; cell = cell.next) {
+                    // copy column alignment to each cell
+                    cell.align = block.alignColumns[i];
+
+                    i += 1;
+
+                    // if there's more columns in a row than the header row, GitHub cuts them off
+                    if (i + 1 > numberOfColumns) {
+                        cell._next = null;
+                        row._lastChild = cell;
+                        break;
+                    }
+                }
+
+                // GitHub adds extra empty cells to make sure all rows are equal width
+                while (i < numberOfColumns) {
+                    var cell = new Node("table_cell");
+
+                    cell._string_content = "";
+                    cell.isHeading = row.isHeading;
+                    cell.align = block.alignColumns[i];
+
+                    row.appendChild(cell);
+                    i += 1;
+                }
+            }
+        },
+        canContain: function(t) { return (t === "table_row"); },
+        acceptsLines: false
+    },
+    table_row: {
+        continue: function(parser) {
+            if (parser.blank) {
+                return 2;
+            }
+
+            return 1;
+        },
+        finalize: function(parser, block) {
+            // mark the header row since it'll have special treatment when rendering
+            if (block === block.parent.firstChild) {
+                block.isHeading = true;
+
+                for (var cell = block.firstChild; cell; cell = cell.next) {
+                    cell.isHeading = true;
+                }
+            }
+        },
+        canContain: function(t) { return (t === "table_cell"); },
+        acceptsLines: false
+    },
+    table_cell: {
+        continue: function() {
+            return 1;
+        },
+        finalize: function() {
+            return;
+        },
+        canContain: function() { return false; },
+        acceptsLines: false
+    },
     paragraph: {
         continue: function(parser) {
             return parser.blank ? 1 : 0;
@@ -671,9 +761,127 @@ var blockStarts = [
         } else {
             return 0;
         }
+    },
+
+    // table
+    function(parser, container) {
+        if (container.type !== "document") {
+            return 0;
+        }
+
+        if (parser.indented) {
+            return 0;
+        }
+
+        if (!parser.nextLine) {
+            // tables require at least two rows (header and delimiter)
+            return 0;
+        }
+
+        // check for a delimiter first since it's stricter than the header row
+        const nextLine = trimSpacesAfterPipe(parser.nextLine);
+        var delimiterMatch = reTableDelimiter.exec(nextLine);
+        if (!delimiterMatch || delimiterMatch[0].indexOf("|") === -1) {
+            return 0;
+        }
+
+        const currentLine = trimSpacesAfterPipe(parser.currentLine);
+        var headerMatch = reTableRow.exec(currentLine.slice(parser.nextNonspace));
+        if (!headerMatch) {
+            return 0;
+        }
+
+        var delimiterCells = parseTableCells(delimiterMatch[1]);
+        var headerCells = parseTableCells(headerMatch[0]);
+
+        if (delimiterCells.length !== headerCells.length) {
+            // the first two rows must be the same length for this to be considered a table
+            return 0;
+        }
+
+        parser.closeUnmatchedBlocks();
+
+        parser.advanceNextNonspace();
+        parser.addChild("table", parser.offset);
+
+        // store the alignments of the columns and then skip the delimiter line since we've
+        // gotten what we need from it
+        parser.tip.alignColumns = delimiterCells.map(getCellAlignment);
+
+        parser.skipNextLine();
+
+        return 1;
+    },
+
+    // table_row
+    function(parser, container) {
+        if (container.type !== "table") {
+            return 0;
+        }
+
+        if (parser.blank) {
+            return 2;
+        }
+
+        var rowMatch = reTableRow.exec(parser.currentLine.slice(parser.nextNonspace));
+        if (!rowMatch) {
+            return 0;
+        }
+
+        parser.closeUnmatchedBlocks();
+        parser.advanceNextNonspace();
+
+        parser.addChild("table_row", parser.offset);
+
+        // advance past leading | if one exists
+        parser.advanceOffset(rowMatch[1].length, false);
+
+        // parse the row into cells
+        var cells = parseTableCells(rowMatch[0]);
+        var length = cells.length;
+        for (var i = 0; i < length; i++) {
+            parser.addChild("table_cell", parser.offset);
+
+            parser.tip._string_content = cells[i].trim();
+
+            parser.advanceOffset(cells[i].length + 1);
+        }
+
+        return 2;
     }
 ];
 
+var parseTableCells = function(row) {
+    // remove starting pipe to make life easier
+    row = row.replace(/^\|/, "");
+
+    var reTableCell = /\||((?:\\\||[^|])+)\|?/g;
+
+    var match;
+    var cells = [];
+    while (match = reTableCell.exec(row)) {
+        cells.push(match[1] || "");
+    }
+
+    return cells;
+};
+
+var getCellAlignment = function(cell) {
+    cell = cell.trim();
+
+    if (cell.charAt(0) === ":") {
+        if (cell.charAt(cell.length - 1) === ":") {
+            return "center";
+        } else {
+            return "left";
+        }
+    } else if (cell.endsWith(":")) {
+        return "right";
+    } else {
+        return "";
+    }
+};
+
 var advanceOffset = function(count, columns) {
     var currentLine = this.currentLine;
     var charsToTab, charsToAdvance;
@@ -735,7 +943,7 @@ var findNextNonspace = function() {
 // Analyze a line of text and update the document appropriately.
 // We parse markdown text by calling this on each line of input,
 // then finalizing the document.
-var incorporateLine = function(ln) {
+var incorporateLine = function(ln, nextLn) {
     var all_matched = true;
     var t;
 
@@ -753,6 +961,7 @@ var incorporateLine = function(ln) {
     }
 
     this.currentLine = ln;
+    this.nextLine = nextLn;
 
     // For each containing block, try to parse the associated line start.
     // Bail out on failure: container will point to the last matching block.
@@ -794,8 +1003,10 @@ var incorporateLine = function(ln) {
 
         // this is a little performance optimization:
         if (
-            !this.indented &&
-            !reMaybeSpecial.test(ln.slice(this.nextNonspace))
+            !this.indented && // starts indented code blocks
+            !reMaybeSpecial.test(ln.slice(this.nextNonspace)) && // starts lists, block quotes, etc
+            (container.type !== "table" && container.type !== "table_row") && // start table rows
+            (nextLn && !reMaybeDelimiterRow.test(nextLn.slice(this.nextNonspace))) // starts tables
         ) {
             this.advanceNextNonspace();
             break;
@@ -827,7 +1038,11 @@ var incorporateLine = function(ln) {
     // appropriate container.
 
     // First check for a lazy paragraph continuation:
-    if (!this.allClosed && !this.blank && this.tip.type === "paragraph") {
+    if (
+        !this.allClosed && !this.blank &&
+        this.tip.type === "paragraph" &&
+        !(this.tip._parent.type === "item" && this.indent === 0)
+    ) {
         // lazy paragraph continuation
         this.addLine();
     } else {
@@ -886,6 +1101,10 @@ var incorporateLine = function(ln) {
     this.lastLineLength = ln.length;
 };
 
+var skipNextLine = function() {
+    this.shouldSkipNextLine = true;
+};
+
 // Finalize a block.  Close it and do any necessary postprocessing,
 // e.g. creating string_content from strings, setting the 'tight'
 // or 'loose' status of a list, and parsing the beginnings
@@ -911,7 +1130,7 @@ var processInlines = function(block) {
     while ((event = walker.next())) {
         node = event.node;
         t = node.type;
-        if (!event.entering && (t === "paragraph" || t === "heading")) {
+        if (!event.entering && (t === "paragraph" || t === "heading" || t === "table_cell")) {
             this.inlineParser.parse(node);
         }
     }
@@ -936,6 +1155,7 @@ var parse = function(input) {
     this.column = 0;
     this.lastMatchedContainer = this.doc;
     this.currentLine = "";
+    this.shouldSkipNextLine = false;
     if (this.options.time) {
         console.time("preparing input");
     }
@@ -952,7 +1172,11 @@ var parse = function(input) {
         console.time("block parsing");
     }
     for (var i = 0; i < len; i++) {
-        this.incorporateLine(lines[i]);
+        if (this.shouldSkipNextLine) {
+            this.shouldSkipNextLine = false;
+            continue;
+        }
+        this.incorporateLine(lines[i], lines[i + 1]);
     }
     while (this.tip) {
         this.finalize(this.tip, len);
@@ -972,6 +1196,12 @@ var parse = function(input) {
 
 // The Parser object.
 function Parser(options) {
+    options = options || {};
+
+    if (options.minimumHashtagLength == null) {
+        options.minimumHashtagLength = 3;
+    }
+
     return {
         doc: new Document(),
         blocks: blocks,
@@ -999,11 +1229,12 @@ function Parser(options) {
         addLine: addLine,
         addChild: addChild,
         incorporateLine: incorporateLine,
+        skipNextLine: skipNextLine,
         finalize: finalize,
         processInlines: processInlines,
         closeUnmatchedBlocks: closeUnmatchedBlocks,
         parse: parse,
-        options: options || {}
+        options: options
     };
 }
 
diff --git a/node_modules/commonmark/lib/common.js b/node_modules/commonmark/lib/common.js
index 298e9b0..cf27955 100644
--- a/node_modules/commonmark/lib/common.js
+++ b/node_modules/commonmark/lib/common.js
@@ -71,7 +71,12 @@ var unescapeString = function(s) {
     }
 };
 
+var reWWW = /^www\d{0,3}\./i;
 var normalizeURI = function(uri) {
+    if (reWWW.test(uri)) {
+        uri = 'http://' + uri;
+    }
+
     try {
         return encode(uri);
     } catch (err) {
diff --git a/node_modules/commonmark/lib/inlines.js b/node_modules/commonmark/lib/inlines.js
index 5d2a545..f5c0d6f 100644
--- a/node_modules/commonmark/lib/inlines.js
+++ b/node_modules/commonmark/lib/inlines.js
@@ -4,6 +4,7 @@ import Node from "./node.js";
 import * as common from "./common.js";
 import fromCodePoint from "./from-code-point.js";
 import { decodeHTML } from "entities";
+import XRegExp from "xregexp";
 import "string.prototype.repeat"; // Polyfill for String.prototype.repeat
 
 var normalizeURI = common.normalizeURI;
@@ -26,6 +27,13 @@ var C_CLOSE_PAREN = 41;
 var C_COLON = 58;
 var C_SINGLEQUOTE = 39;
 var C_DOUBLEQUOTE = 34;
+var C_AT_SIGN = 64;
+var C_SEMICOLON = 59;
+var C_UPPER_X = 88;
+var C_LOWER_X = 120;
+var C_TILDE = 126;
+var C_NUMBER_SIGN = 35;
+var C_DOLLAR_SIGN = 36;
 
 // Some regexps used in inline parser:
 
@@ -39,6 +47,8 @@ var rePunctuation = new RegExp(
     /^[!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u0AF0\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E42\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC9\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDF3C-\uDF3E]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]/
 );
 
+var reLinkSize = new RegExp('^=([0-9]*)x([0-9]*)');
+
 var reLinkTitle = new RegExp(
     '^(?:"(' +
         ESCAPED_CHAR +
@@ -83,10 +93,40 @@ var reInitialSpace = /^ */;
 
 var reSpaceAtEndOfLine = /^ *(?:\n|$)/;
 
+var reNonWord = /^\W+$/;
+
 var reLinkLabel = /^\[(?:[^\\\[\]]|\\.){0,1000}\]/s;
 
+var reDelimChar = /^[*_~]/;
+
+var reDelimCharAll = /^[\W]/;
+
+// Adapted from https://github.com/gregjacobs/Autolinker.js
+var emailAlphaNumericChars = "\\p{L}\\p{Nd}";
+var emailSpecialCharacters = '!#$%&\'*+\\-\\/=?^_`{|}~';
+var emailRestrictedSpecialCharacters = "\\s(),:;<>@\\[\\]";
+var emailValidCharacters = emailAlphaNumericChars + emailSpecialCharacters;
+var emailValidRestrictedCharacters = emailValidCharacters + emailRestrictedSpecialCharacters;
+
+// Matches a proper email address
+var emailStartPattern = "(?:[" + emailValidCharacters + "](?:[" + emailValidCharacters + ']|\\.(?!\\.|@))*|\\"[' + emailValidRestrictedCharacters + '.]+\\")@';
+
+var reDelimChar = /^[*_~]/;
+
+var reDelimCharAll = /^[\W]/
+
+// Adapted from https://github.com/gregjacobs/Autolinker.js
+var emailAlphaNumericChars = "\\p{L}\\p{Nd}";
+var emailSpecialCharacters = '!#$%&\'*+\\-\\/=?^_`{|}~';
+var emailRestrictedSpecialCharacters = "\\s(),:;<>@\\[\\]";
+var emailValidCharacters = emailAlphaNumericChars + emailSpecialCharacters;
+var emailValidRestrictedCharacters = emailValidCharacters + emailRestrictedSpecialCharacters;
+
+// Matches a proper email address
+var emailStartPattern = "(?:[" + emailValidCharacters + "](?:[" + emailValidCharacters + ']|\\.(?!\\.|@))*|\\"[' + emailValidRestrictedCharacters + '.]+\\")@';
+
 // Matches a string of non-special characters.
-var reMain = /^[^\n`\[\]\\!<&*_'"]+/m;
+var reMain = XRegExp.cache('^[\\s\\S]+?(?=[\\n`\\[\\]\\\\!<&*_\'"@:;xX~#$]|[a-z][a-z0-9.+-]{1,31}:|www\\d{0,3}\\.|[' + emailValidCharacters + ".]{1,64}@|$)");
 
 var text = function(s) {
     var node = new Node("text");
@@ -115,15 +155,37 @@ var normalizeReference = function(string) {
 // If re matches at current position in the subject, advance
 // position in subject and return the match; otherwise return null.
 var match = function(re) {
+    var m = this.matchRegex(re);
+    if (m === null) {
+        return null;
+    } else {
+        return m[0];
+    }
+};
+
+var matchRegex = function(re) {
     var m = re.exec(this.subject.slice(this.pos));
     if (m === null) {
         return null;
     } else {
         this.pos += m.index + m[0].length;
-        return m[0];
+        return m;
+    }
+};
+
+var tryMatch = function(re) {
+    var m = re.exec(this.subject.slice(this.pos));
+    if (m === null) {
+        return null;
+    } else {
+        return m;
     }
 };
 
+var acceptMatch = function(m) {
+    this.pos += m.index + m[0].length;
+};
+
 // Returns the code for the character at the current subject position, or -1
 // there are no more characters.
 var peek = function() {
@@ -171,6 +233,11 @@ var parseBackticks = function(block) {
             } else {
                 node._literal = contents;
             }
+
+            if (block.type === "table_cell") {
+                node._literal = node._literal.replace(/\\\|/g, "|");
+            }
+
             block.appendChild(node);
             return true;
         }
@@ -265,7 +332,8 @@ var scanDelims = function(cc) {
         }
     }
 
-    if (numdelims === 0) {
+    if (numdelims === 0 || (cc === C_TILDE && numdelims < 2)) {
+        this.pos -= numdelims;
         return null;
     }
 
@@ -294,7 +362,7 @@ var scanDelims = function(cc) {
     if (cc === C_UNDERSCORE) {
         can_open = left_flanking && (!right_flanking || before_is_punctuation);
         can_close = right_flanking && (!left_flanking || after_is_punctuation);
-    } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE) {
+    } else if (cc === C_SINGLEQUOTE || cc === C_DOUBLEQUOTE || cc === C_TILDE) {
         can_open = left_flanking && !right_flanking;
         can_close = right_flanking;
     } else {
@@ -305,7 +373,7 @@ var scanDelims = function(cc) {
     return { numdelims: numdelims, can_open: can_open, can_close: can_close };
 };
 
-// Handle a delimiter marker for emphasis or a quote.
+// Handle a delimiter marker for emphasis, quotes, or deleted text.
 var handleDelim = function(cc, block) {
     var res = this.scanDelims(cc);
     if (!res) {
@@ -420,7 +488,7 @@ var processEmphasis = function(stack_bottom) {
                     (closer.can_open || opener.can_close) &&
                     closer.origdelims % 3 !== 0 &&
                     (opener.origdelims + closer.origdelims) % 3 === 0;
-                if (opener.cc === closer.cc && opener.can_open && !odd_match) {
+                if (opener.cc === closer.cc && opener.can_open && (!odd_match || opener.cc === C_TILDE)) {
                     opener_found = true;
                     break;
                 }
@@ -480,6 +548,40 @@ var processEmphasis = function(stack_bottom) {
                         closer = tempstack;
                     }
                 }
+
+            } else if (closercc === C_TILDE) {
+                if (!opener_found) {
+                    closer = closer.next;
+                } else {
+                    opener_inl = opener.node;
+                    closer_inl = closer.node;
+
+                    // build contents for new del element
+                    var emph = new Node("del");
+
+                    tmp = opener_inl._next;
+                    while (tmp && tmp !== closer_inl) {
+                        next = tmp._next;
+                        tmp.unlink();
+                        emph.appendChild(tmp);
+                        tmp = next;
+                    }
+
+                    opener_inl.insertAfter(emph);
+
+                    // remove elts between opener and closer in delimiters stack
+                    removeDelimitersBetween(opener, closer);
+
+                    // remove the opening and closing delimiters
+                    opener_inl.unlink();
+                    this.removeDelimiter(opener);
+
+                    closer_inl.unlink();
+                    tempstack = closer.next;
+                    this.removeDelimiter(closer);
+                    closer = tempstack;
+                }
+
             } else if (closercc === C_SINGLEQUOTE) {
                 closer.node._literal = "\u2019";
                 if (opener_found) {
@@ -512,6 +614,29 @@ var processEmphasis = function(stack_bottom) {
     }
 };
 
+var parseLinkSize = function() {
+    var size_matches = this.match(reLinkSize);
+
+    if (size_matches === null) {
+        return null;
+    } else {
+        var detailed = size_matches.match(reLinkSize);
+        var width = detailed[1];
+        var height = detailed[2];
+        var size = {};
+
+        if (width) {
+            size.width = parseInt(width);
+        }
+
+        if (height) {
+            size.height = parseInt(height);
+        }
+
+        return size;
+    }
+}
+
 // Attempt to parse link title (sans quotes), returning the string
 // or null if no match.
 var parseLinkTitle = function() {
@@ -625,6 +750,7 @@ var parseCloseBracket = function(block) {
     var startpos;
     var is_image;
     var dest;
+    var size;
     var title;
     var matched = false;
     var reflabel;
@@ -664,6 +790,8 @@ var parseCloseBracket = function(block) {
             this.spnl() &&
             (dest = this.parseLinkDestination()) !== null &&
             this.spnl() &&
+            (size = this.parseLinkSize() || true) &&
+            this.spnl() &&
             // make sure there's a space before the title:
             ((reWhitespaceChar.test(this.subject.charAt(this.pos - 1)) &&
                 (title = this.parseLinkTitle())) ||
@@ -709,6 +837,7 @@ var parseCloseBracket = function(block) {
         var node = new Node(is_image ? "image" : "link");
         node._destination = dest;
         node._title = title || "";
+        node._size = size;
 
         var tmp, next;
         tmp = opener.node._next;
@@ -776,6 +905,262 @@ var parseEntity = function(block) {
     }
 };
 
+// Attempt to parse a url
+var reUrl = XRegExp.cache('^(?:[A-Za-z][A-Za-z\\d-.+]*:(?:\\/{1,3}|[\\pL\\d%])|www\\d{0,3}[.]|[\\pL\\d.\\-]+[.]\\pL{2,4}\\/)(?:\\[[\\da-f:]+\\]|[^\\s`!()\\[\\]{;:\'",<>?«»“”‘’*_]|[*_]+(?=[^_*\\s])|[`!\\[\\]{;:\'",<>?«»“”‘’](?=[^\\s()<>])|\\((?:[^\\s()<>]|(?:\\([^\\s()<>]+\\)))*\\))+', 'i');
+var parseUrl = function(block) {
+    if (this.brackets) {
+        // Don't perform autolinking while inside an explicit link
+        return false;
+    }
+
+    var m;
+    if ((m = this.tryMatch(reUrl))) {
+        // Only link urls after non-word, non-formatting characters
+        if (this.pos !== 0 && this.subject[this.pos - 1] !== "_" && !reNonWord.test(this.subject[this.pos - 1])) {
+            return false;
+        }
+
+        // Step back to remove trailing punctuation like how GitHub does
+        // https://github.com/github/cmark/blob/master/extensions/autolink.c#L58
+        var url = m[0];
+        while ((/[?!.,,:*_~'"]$/).test(url)) {
+            url = url.substring(0, url.length - 1);
+        }
+
+        if (this.options.urlFilter && !this.options.urlFilter(url)) {
+            return false;
+        }
+
+        this.pos += m.index + url.length;
+
+        var node = new Node("link");
+        node._destination = normalizeURI(url);
+        node._title = "";
+        node.appendChild(text(url));
+        block.appendChild(node);
+
+        return true;
+    } else {
+        return false;
+    }
+}
+
+// Attempt to parse an at mention
+var reAtMention = /^@([a-z][a-z0-9._-]*)/i;
+var parseAtMention = function(block) {
+    if (this.brackets) {
+        // Don't perform autolinking while inside an explicit link
+        return false;
+    }
+
+    var m;
+    if ((m = this.tryMatch(reAtMention))) {
+        // Only allow at mentions after non-word characters
+        if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+            this.acceptMatch(m);
+
+            // It's up to the renderer to determine what part of this is actually a username
+            var node = new Node("at_mention");
+            node._mentionName = m[1];
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    } else {
+        return false;
+    }
+}
+
+// Attempt to parse a channel link
+var reChannelLink = /^~([a-z0-9_-]+)/i;
+var parseChannelLink = function(block) {
+    if (this.brackets) {
+        // Don't perform autolinking while inside an explicit link
+        return false;
+    }
+
+    var m;
+    if ((m = this.tryMatch(reChannelLink))) {
+        // Only allow channel links after non-word characters
+        if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+            this.acceptMatch(m);
+
+            // It's up to the renderer to determine if this is actually a channel link
+            var node = new Node("channel_link");
+            node._channelName = m[1];
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    } else {
+        return false;
+    }
+}
+
+// Attempt to parse a named emoji
+var reEmoji = /^:([a-z0-9_\-+]+):\B/i;
+var parseEmoji = function(block) {
+    var m;
+    if ((m = this.tryMatch(reEmoji))) {
+        // Only allow emojis after non-word characters
+        if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+            this.acceptMatch(m);
+
+            // It's up to the renderer to determine if this is a real emoji
+            var node = new Node("emoji");
+            node._literal = m[0];
+            node._emojiName = m[1];
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    } else {
+        return false;
+    }
+}
+
+// Attempt to parse an emoticon (eg. :D, <3)
+var reEmoticon = /^(?:(:-?\))|(;-?\))|(:o)|(:-o)|(:-?])|(:-?d)|(x-d)|(:-?p)|(:-?[[@])|(:-?\()|(:[`'’]-?\()|(:-?\/)|(:-?s)|(:-?\|)|(:-?\$)|(:-x)|(<3|&lt;3)|(<\/3|&lt;\/3))(?=$|\W)/i;
+var EMOTICONS = [
+    "slightly_smiling_face",
+    "wink",
+    "open_mouth",
+    "scream",
+    "smirk",
+    "smile",
+    "stuck_out_tongue_closed_eyes",
+    "stuck_out_tongue",
+    "rage",
+    "slightly_frowning_face",
+    "cry",
+    "confused",
+    "confounded",
+    "neutral_face",
+    "flushed",
+    "mask",
+    "heart",
+    "broken_heart"
+];
+var parseEmoticon = function(block) {
+    var m;
+    if ((m = this.tryMatch(reEmoticon))) {
+        // Only allow emoticons after whitespace or a delimiter
+        if (this.pos === 0 || reWhitespaceChar.test(this.subject[this.pos - 1]) || reDelimCharAll.test(this.subject[this.pos - 1])) {
+            this.acceptMatch(m);
+
+            var node = new Node("emoji");
+            node._literal = m[0];
+
+            // Capture groups in the regex correspond to entries in EMOTICONS
+            for (var i = 0; i < EMOTICONS.length; i++) {
+                if (m[i + 1]) {
+                    node._emojiName = EMOTICONS[i];
+                }
+            }
+
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    } else {
+        return false;
+    }
+}
+
+var reEmail = XRegExp.cache("^" + emailStartPattern + "[\\pL\\d.\\-]+[.]\\pL{2,4}(?=$|[^\\p{L}])");
+var parseEmail = function(block) {
+    if (this.brackets) {
+        // Don't perform autolinking while inside an explicit link
+        return false;
+    }
+
+    var m;
+    if ((m = this.tryMatch(reEmail))) {
+        // Only allow at mentions after non-word characters
+        if (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1])) {
+            this.acceptMatch(m);
+
+            var dest = m[0];
+
+            var node = new Node("link");
+            node._destination = normalizeURI("mailto:" + dest);
+            node._title = "";
+
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    } else {
+        return false;
+    }
+}
+
+var reHashtag = XRegExp.cache("^#(\\pL[\\pL\\d\\-_.]*[\\pL\\d])");
+var parseHashtag = function(block) {
+    if (this.brackets) {
+        // Don't perform autolinking while inside an explicit link
+        return false;
+    }
+
+    var m;
+    if ((m = this.tryMatch(reHashtag, true))) {
+        // Only allow hashtags after a non-word character or a delimiter and only allow hashtags that are long enough
+        if (
+            (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1]) || reDelimChar.test(this.subject[this.pos - 1])) &&
+            m[1].length >= this.options.minimumHashtagLength
+        ) {
+            this.acceptMatch(m);
+
+            var node = new Node("hashtag");
+            node._hashtag = m[1];
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    } else {
+        return false;
+    }
+}
+
+var reInlineLatex = /^\$([^\$\n]+)\$(?!\w)/;
+var parseInlineLatex = function(block) {
+
+    if (this.brackets) {
+        // Don't perform autolinking while inside an explicit link
+        return false;
+    }
+
+    var m;
+    if ((m = this.tryMatch(reInlineLatex, true))) {
+        //Only allow for inline latex if the dollarsign was present after a non-word character
+        if (
+            (this.pos === 0 || reNonWord.test(this.subject[this.pos - 1]) || reDelimChar.test(this.subject[this.pos - 1]))
+        ) {
+            this.acceptMatch(m);
+
+            var node = new Node("latex_inline");
+            node._latexCode = m[1].trim();
+            node.appendChild(text(m[0]));
+            block.appendChild(node);
+            return true;
+        } else {
+            return false;
+        }
+    }
+}
+
 // Parse a run of ordinary characters, or a single character with
 // a special meaning in markdown, as a plain string.
 var parseString = function(block) {
@@ -959,18 +1344,48 @@ var parseInline = function(block) {
             res = this.parseCloseBracket(block);
             break;
         case C_LESSTHAN:
-            res = this.parseAutolink(block) || this.parseHtmlTag(block);
+            res = this.parseAutolink(block) || this.parseHtmlTag(block) || this.parseEmoticon(block);
             break;
         case C_AMPERSAND:
-            res = this.parseEntity(block);
+            res = this.parseEmoticon(block) || this.parseEntity(block);
+            break;
+        case C_AT_SIGN:
+            res = this.parseAtMention(block);
+            break;
+        case C_TILDE:
+            res = this.handleDelim(c, block) || this.parseChannelLink(block);
+            break;
+        case C_COLON:
+            res = this.parseEmoji(block) || this.parseEmoticon(block);
+            break;
+        case C_SEMICOLON:
+            res = this.parseEmoticon(block);
+            break;
+        case C_UPPER_X:
+        case C_LOWER_X:
+            res = this.parseEmoticon(block);
+            break;
+        case C_NUMBER_SIGN:
+            res = this.parseHashtag(block);
+            break;
+        case C_DOLLAR_SIGN:
+            res = this.parseInlineLatex(block);
             break;
         default:
-            res = this.parseString(block);
             break;
     }
+
     if (!res) {
-        this.pos += 1;
-        block.appendChild(text(fromCodePoint(c)));
+        res = this.parseEmail(block);
+    }
+
+    if (!res) {
+        res = this.parseUrl(block);
+    }
+
+    // parseString always captures at least a single character
+    if (!res) {
+        res = this.parseString(block);
     }
 
     return true;
@@ -997,6 +1412,9 @@ function InlineParser(options) {
         pos: 0,
         refmap: {},
         match: match,
+        matchRegex: matchRegex,
+        tryMatch: tryMatch,
+        acceptMatch: acceptMatch,
         peek: peek,
         spnl: spnl,
         parseBackticks: parseBackticks,
@@ -1005,6 +1423,7 @@ function InlineParser(options) {
         parseHtmlTag: parseHtmlTag,
         scanDelims: scanDelims,
         handleDelim: handleDelim,
+        parseLinkSize: parseLinkSize,
         parseLinkTitle: parseLinkTitle,
         parseLinkDestination: parseLinkDestination,
         parseLinkLabel: parseLinkLabel,
@@ -1014,6 +1433,14 @@ function InlineParser(options) {
         addBracket: addBracket,
         removeBracket: removeBracket,
         parseEntity: parseEntity,
+        parseUrl: parseUrl,
+        parseAtMention: parseAtMention,
+        parseChannelLink: parseChannelLink,
+        parseEmoji: parseEmoji,
+        parseEmoticon: parseEmoticon,
+        parseEmail: parseEmail,
+        parseHashtag: parseHashtag,
+        parseInlineLatex: parseInlineLatex,
         parseString: parseString,
         parseNewline: parseNewline,
         parseReference: parseReference,
diff --git a/node_modules/commonmark/lib/node.js b/node_modules/commonmark/lib/node.js
index 0e9c4b6..d4a6f18 100644
--- a/node_modules/commonmark/lib/node.js
+++ b/node_modules/commonmark/lib/node.js
@@ -6,12 +6,23 @@ function isContainer(node) {
         case "block_quote":
         case "list":
         case "item":
+        case "table":
+        case "table_row":
+        case "table_cell":
         case "paragraph":
         case "heading":
         case "emph":
         case "strong":
+        case "del":
         case "link":
         case "image":
+        case "at_mention":
+        case "channel_link":
+        case "emoji":
+        case "hashtag":
+        case "latex_inline":
+        case "mention_highlight":
+        case "search_highlight":
         case "custom_inline":
         case "custom_block":
             return true;
@@ -82,12 +93,23 @@ var Node = function(nodeType, sourcepos) {
     this._listData = {};
     this._info = null;
     this._destination = null;
+    this._size = null;
     this._title = null;
     this._isFenced = false;
     this._fenceChar = null;
     this._fenceLength = 0;
     this._fenceOffset = null;
     this._level = null;
+    this._mentionName = null;
+    this._emojiName = null;
+    this._hashtag = null;
+    this._latexCode = null;
+
+    // used by tables
+    this._alignColumns = [];
+    this._isHeading = false;
+    this._align = "";
+
     this._onEnter = null;
     this._onExit = null;
 };
@@ -160,6 +182,15 @@ Object.defineProperty(proto, "destination", {
     }
 });
 
+Object.defineProperty(proto, "size", {
+    get: function() {
+        return this._size;
+    },
+    set: function(s) {
+        this._size = s;
+    }
+});
+
 Object.defineProperty(proto, "title", {
     get: function() {
         return this._title;
@@ -223,6 +254,63 @@ Object.defineProperty(proto, "listDelimiter", {
     }
 });
 
+Object.defineProperty(proto, "mentionName", {
+    get: function() {
+        return this._mentionName;
+    },
+});
+
+Object.defineProperty(proto, "channelName", {
+    get: function() {
+        return this._channelName;
+    },
+});
+
+Object.defineProperty(proto, "emojiName", {
+    get: function() {
+        return this._emojiName;
+    },
+});
+
+Object.defineProperty(proto, "hashtag", {
+    get: function() {
+        return this._hashtag;
+    },
+});
+
+Object.defineProperty(proto, "latexCode", {
+    get: function() {
+        return this._latexCode;
+    },
+});
+
+Object.defineProperty(proto, "alignColumns", {
+    get: function() {
+        return this._alignColumns;
+    },
+    set: function(s) {
+        this._alignColumns = s;
+    }
+});
+
+Object.defineProperty(proto, "isHeading", {
+    get: function() {
+        return this._isHeading;
+    },
+    set: function(t) {
+        this._isHeading = t;
+    }
+});
+
+Object.defineProperty(proto, "align", {
+    get: function() {
+        return this._align;
+    },
+    set: function(s) {
+        this._align = s;
+    }
+});
+
 Object.defineProperty(proto, "onEnter", {
     get: function() {
         return this._onEnter;
diff --git a/node_modules/commonmark/lib/render/html.js b/node_modules/commonmark/lib/render/html.js
index 2963dea..eac00e9 100644
--- a/node_modules/commonmark/lib/render/html.js
+++ b/node_modules/commonmark/lib/render/html.js
@@ -76,6 +76,63 @@ function link(node, entering) {
     }
 }
 
+function at_mention(node, entering) {
+    if (entering) {
+        var attrs = this.attrs(node);
+
+        if (node.mentionName) {
+            attrs.push(["data-mention-name", this.esc(node.mentionName)]);
+        }
+
+        this.tag("span", attrs);
+    } else {
+        this.tag("/span");
+    }
+}
+
+function channel_link(node, entering) {
+    if (entering) {
+        var attrs = this.attrs(node);
+
+        if (node.channelName) {
+            attrs.push(["data-channel-name", this.esc(node.channelName)]);
+        }
+
+        this.tag("span", attrs);
+    } else {
+        this.tag("/span");
+    }
+}
+
+function emoji(node, entering) {
+    if (entering) {
+        var attrs = this.attrs(node);
+
+        if (node.emojiName) {
+            attrs.push(["data-emoji-name", this.esc(node.emojiName)]);
+            attrs.push(["data-literal", this.esc(node.literal)]);
+        }
+
+        this.tag("span", attrs);
+    } else {
+        this.tag("/span");
+    }
+}
+
+function hashtag(node, entering) {
+    if (entering) {
+        var attrs = this.attrs(node);
+
+        if (node.hashtag) {
+            attrs.push(["data-hashtag", this.esc(node.hashtag)]);
+        }
+
+        this.tag("span", attrs);
+    } else {
+        this.tag("/span");
+    }
+}
+
 function image(node, entering) {
     if (entering) {
         if (this.disableTags === 0) {
@@ -92,6 +149,15 @@ function image(node, entering) {
             if (node.title) {
                 this.lit('" title="' + this.esc(node.title));
             }
+            if (node.size) {
+              if (node.size.width) {
+                this.lit('" width="' + node.size.width);
+              }
+
+              if (node.size.height) {
+                this.lit('" height="' + node.size.height);
+              }
+            }
             this.lit('" />');
         }
     }
@@ -105,6 +171,10 @@ function strong(node, entering) {
     this.tag(entering ? "strong" : "/strong");
 }
 
+function del(node, entering) {
+  this.tag(entering ? "del" : "/del");
+}
+
 function paragraph(node, entering) {
     var grandparent = node.parent.parent,
         attrs = this.attrs(node);
@@ -204,6 +274,63 @@ function item(node, entering) {
     }
 }
 
+function table(node, entering) {
+    var attrs = this.attrs(node);
+    if (entering) {
+        this.cr();
+        this.tag("table", attrs);
+        this.cr();
+    } else {
+        this.tag("/table");
+        this.cr();
+    }
+}
+
+function table_row(node, entering) {
+    var attrs = this.attrs(node);
+    if (entering) {
+        if (node === node.parent.firstChild) {
+            this.cr();
+            this.tag("thead");
+            this.cr();
+        } else if (node === node.parent.firstChild.next) {
+            this.cr();
+            this.tag("tbody");
+            this.cr();
+        }
+
+        this.cr();
+        this.tag("tr", attrs);
+        this.cr();
+    } else {
+        this.tag("/tr");
+
+        if (node === node.parent.firstChild) {
+            this.cr(); // we're not consistent about how these tags are laid out because this is what GitHub does
+            this.tag("/thead");
+        } else if (node === node.parent.lastChild) {
+            this.tag("/tbody");
+        }
+    }
+}
+
+function table_cell(node, entering) {
+    var attrs = this.attrs(node);
+
+    var tag = node.isHeading ? "th" : "td";
+
+    if (node.align) {
+        attrs.push(["align", node.align]);
+    }
+
+    if (entering) {
+        this.tag(tag, attrs);
+    } else {
+        this.tag("/" + tag);
+        this.cr();
+    }
+}
+
 function html_inline(node) {
     if (this.options.safe) {
         this.lit("<!-- raw HTML omitted -->");
@@ -275,9 +402,14 @@ HtmlRenderer.prototype.html_block = html_block;
 HtmlRenderer.prototype.softbreak = softbreak;
 HtmlRenderer.prototype.linebreak = linebreak;
 HtmlRenderer.prototype.link = link;
+HtmlRenderer.prototype.at_mention = at_mention;
+HtmlRenderer.prototype.channel_link = channel_link;
+HtmlRenderer.prototype.emoji = emoji;
+HtmlRenderer.prototype.hashtag = hashtag;
 HtmlRenderer.prototype.image = image;
 HtmlRenderer.prototype.emph = emph;
 HtmlRenderer.prototype.strong = strong;
+HtmlRenderer.prototype.del = del;
 HtmlRenderer.prototype.paragraph = paragraph;
 HtmlRenderer.prototype.heading = heading;
 HtmlRenderer.prototype.code = code;
@@ -286,6 +418,9 @@ HtmlRenderer.prototype.thematic_break = thematic_break;
 HtmlRenderer.prototype.block_quote = block_quote;
 HtmlRenderer.prototype.list = list;
 HtmlRenderer.prototype.item = item;
+HtmlRenderer.prototype.table = table;
+HtmlRenderer.prototype.table_row = table_row;
+HtmlRenderer.prototype.table_cell = table_cell;
 HtmlRenderer.prototype.custom_inline = custom_inline;
 HtmlRenderer.prototype.custom_block = custom_block;
 
diff --git a/node_modules/commonmark/lib/render/xml.js b/node_modules/commonmark/lib/render/xml.js
index f39331a..b669481 100644
--- a/node_modules/commonmark/lib/render/xml.js
+++ b/node_modules/commonmark/lib/render/xml.js
@@ -103,6 +103,13 @@ function render(ast) {
                     attrs.push(["destination", node.destination]);
                     attrs.push(["title", node.title]);
                     break;
+                case "at_mention":
+                    attrs.push(["mention-name", node.mentionName]);
+                    break;
+                case "emoji":
+                    attrs.push(["emoji-name", node.emojiName]);
+                    attrs.push(["literal", node.literal]);
+                    break;
                 case "custom_inline":
                 case "custom_block":
                     attrs.push(["on_enter", node.onEnter]);
